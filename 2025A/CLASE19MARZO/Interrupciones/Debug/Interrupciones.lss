
Interrupciones.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091f  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000828  00000000  00000000  00000b67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030e  00000000  00000000  0000138f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  000016a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042c  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fd  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001c11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	97 c0       	rjmp	.+302    	; 0x134 <__vector_1>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	5e c0       	rjmp	.+188    	; 0x158 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <avr/interrupt.h>


int main(void)
{
	DDRB |= (1<<0);
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	84 b9       	out	0x04, r24	; 4
	
	DDRA = 0xFF;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	81 b9       	out	0x01, r24	; 1
	
    //CONFIGURAR LA INTERRUPCION POR FALLING
	//EICRA |= (1<<ISC01);
	//EICRA |= (1<<ISC00);
	EICRA &= ~(1<<ISC01);
  a8:	e9 e6       	ldi	r30, 0x69	; 105
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	8d 7f       	andi	r24, 0xFD	; 253
  b0:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC00);
  b2:	80 81       	ld	r24, Z
  b4:	8e 7f       	andi	r24, 0xFE	; 254
  b6:	80 83       	st	Z, r24
	
	//HABILITAMOS LA INTERRUPCION POR INT0
	EIMSK |= (1<<INT0);
  b8:	8d b3       	in	r24, 0x1d	; 29
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	8d bb       	out	0x1d, r24	; 29
	
	//HABILITAR LA INTERRUPCION GLOBAL
	sei();
  be:	78 94       	sei
	//APAGA LAS INTERRUPCIONES GLOBALES
	//cli();
	
    while (1) 
    {
		for(int i=0; i<=7; i++){
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	16 c0       	rjmp	.+44     	; 0xf2 <main+0x54>
			PORTA  |= (1<<i);
  c6:	42 b1       	in	r20, 0x02	; 2
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 2e       	mov	r0, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <main+0x36>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <main+0x32>
  d8:	84 2b       	or	r24, r20
  da:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	4f e7       	ldi	r20, 0x7F	; 127
  de:	84 e8       	ldi	r24, 0x84	; 132
  e0:	9e e1       	ldi	r25, 0x1E	; 30
  e2:	41 50       	subi	r20, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x44>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x4e>
  ec:	00 00       	nop
	//APAGA LAS INTERRUPCIONES GLOBALES
	//cli();
	
    while (1) 
    {
		for(int i=0; i<=7; i++){
  ee:	2f 5f       	subi	r18, 0xFF	; 255
  f0:	3f 4f       	sbci	r19, 0xFF	; 255
  f2:	28 30       	cpi	r18, 0x08	; 8
  f4:	31 05       	cpc	r19, r1
  f6:	3c f3       	brlt	.-50     	; 0xc6 <main+0x28>
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	17 c0       	rjmp	.+46     	; 0x12c <main+0x8e>
			PORTA  |= (1<<i);
			_delay_ms(500);
		}
		
		for(int i=0; i<=7; i++){
			PORTA  &= ~(1<<i);
  fe:	42 b1       	in	r20, 0x02	; 2
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 2e       	mov	r0, r18
 106:	02 c0       	rjmp	.+4      	; 0x10c <main+0x6e>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <main+0x6a>
 110:	80 95       	com	r24
 112:	84 23       	and	r24, r20
 114:	82 b9       	out	0x02, r24	; 2
 116:	4f e7       	ldi	r20, 0x7F	; 127
 118:	84 e8       	ldi	r24, 0x84	; 132
 11a:	9e e1       	ldi	r25, 0x1E	; 30
 11c:	41 50       	subi	r20, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x7e>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x88>
 126:	00 00       	nop
		for(int i=0; i<=7; i++){
			PORTA  |= (1<<i);
			_delay_ms(500);
		}
		
		for(int i=0; i<=7; i++){
 128:	2f 5f       	subi	r18, 0xFF	; 255
 12a:	3f 4f       	sbci	r19, 0xFF	; 255
 12c:	28 30       	cpi	r18, 0x08	; 8
 12e:	31 05       	cpc	r19, r1
 130:	34 f3       	brlt	.-52     	; 0xfe <main+0x60>
 132:	c6 cf       	rjmp	.-116    	; 0xc0 <main+0x22>

00000134 <__vector_1>:
		}
    }
}


ISR(INT0_vect){
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
	PORTB ^= (1<<0);
 142:	95 b1       	in	r25, 0x05	; 5
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	89 27       	eor	r24, r25
 148:	85 b9       	out	0x05, r24	; 5
	
}
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
