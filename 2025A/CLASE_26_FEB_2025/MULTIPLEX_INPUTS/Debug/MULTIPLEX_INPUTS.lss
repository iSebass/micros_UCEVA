
MULTIPLEX_INPUTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002a6  0000033a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010c  0080010c  00000346  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b66  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000909  00000000  00000000  00000f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048f  00000000  00000000  0000187f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000565  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000141  00000000  00000000  000022ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000242e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ea       	ldi	r30, 0xA6	; 166
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	50 d0       	rcall	.+160    	; 0x164 <main>
  c4:	ee c0       	rjmp	.+476    	; 0x2a2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <_Z14MultiplexClasev>:

int contador=5268, contador_seg=0, unidad, decena, centena, miles, aux;


void MultiplexClase(void){
	miles = contador / 1000;
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d0:	68 ee       	ldi	r22, 0xE8	; 232
  d2:	73 e0       	ldi	r23, 0x03	; 3
  d4:	bf d0       	rcall	.+382    	; 0x254 <__divmodhi4>
  d6:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <miles+0x1>
  da:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <miles>
	aux = contador % 1000;
	
	centena = aux / 100;
  de:	64 e6       	ldi	r22, 0x64	; 100
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	b8 d0       	rcall	.+368    	; 0x254 <__divmodhi4>
  e4:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <centena+0x1>
  e8:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <centena>
	aux = aux % 100;
  ec:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
  f0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	
	decena = aux / 10;
  f4:	6a e0       	ldi	r22, 0x0A	; 10
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	ad d0       	rcall	.+346    	; 0x254 <__divmodhi4>
  fa:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <decena+0x1>
  fe:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <decena>
	unidad = aux % 10;
 102:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <unidad+0x1>
 106:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <unidad>
	
	SET_DISPLAY_1();
 10a:	88 e0       	ldi	r24, 0x08	; 8
	DisplaySevenSegCA(unidad);
 10c:	82 b9       	out	0x02, r24	; 2
 10e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <unidad>
 112:	43 d0       	rcall	.+134    	; 0x19a <_Z17DisplaySevenSegCAc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	8f e1       	ldi	r24, 0x1F	; 31
 116:	9e e4       	ldi	r25, 0x4E	; 78
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <_Z14MultiplexClasev+0x50>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <_Z14MultiplexClasev+0x56>
 11e:	00 00       	nop
	_delay_ms(te);
	
	SET_DISPLAY_2();
 120:	84 e0       	ldi	r24, 0x04	; 4
	DisplaySevenSegCA(decena);
 122:	82 b9       	out	0x02, r24	; 2
 124:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <decena>
 128:	38 d0       	rcall	.+112    	; 0x19a <_Z17DisplaySevenSegCAc>
 12a:	8f e1       	ldi	r24, 0x1F	; 31
 12c:	9e e4       	ldi	r25, 0x4E	; 78
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <_Z14MultiplexClasev+0x66>
 132:	00 c0       	rjmp	.+0      	; 0x134 <_Z14MultiplexClasev+0x6c>
	_delay_ms(te);
	
	SET_DISPLAY_3();
 134:	00 00       	nop
 136:	82 e0       	ldi	r24, 0x02	; 2
	DisplaySevenSegCA(centena);
 138:	82 b9       	out	0x02, r24	; 2
 13a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <centena>
 13e:	2d d0       	rcall	.+90     	; 0x19a <_Z17DisplaySevenSegCAc>
 140:	8f e1       	ldi	r24, 0x1F	; 31
 142:	9e e4       	ldi	r25, 0x4E	; 78
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <_Z14MultiplexClasev+0x7c>
 148:	00 c0       	rjmp	.+0      	; 0x14a <_Z14MultiplexClasev+0x82>
	_delay_ms(te);
	
	SET_DISPLAY_4();
 14a:	00 00       	nop
 14c:	81 e0       	ldi	r24, 0x01	; 1
	DisplaySevenSegCA(miles);
 14e:	82 b9       	out	0x02, r24	; 2
 150:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <miles>
 154:	22 d0       	rcall	.+68     	; 0x19a <_Z17DisplaySevenSegCAc>
 156:	8f e1       	ldi	r24, 0x1F	; 31
 158:	9e e4       	ldi	r25, 0x4E	; 78
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <_Z14MultiplexClasev+0x92>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <_Z14MultiplexClasev+0x98>
 160:	00 00       	nop
 162:	08 95       	ret

00000164 <main>:
}

#define getBTN()  (PINB & (1<<0) ) 

int main(void){
	DisplaySevengSegInit();
 164:	17 d0       	rcall	.+46     	; 0x194 <_Z20DisplaySevengSegInitv>
	DISPLAY_DDR = 0x0F;
 166:	8f e0       	ldi	r24, 0x0F	; 15
 168:	81 b9       	out	0x01, r24	; 1
	DISPLAY_CONTROL = 0xF;
 16a:	82 b9       	out	0x02, r24	; 2
	
	DDRB &= ~(1<<0);
 16c:	84 b1       	in	r24, 0x04	; 4
 16e:	8e 7f       	andi	r24, 0xFE	; 254
 170:	84 b9       	out	0x04, r24	; 4
	
	while (1)
	{
		if( getBTN() == 0 ){
 172:	18 99       	sbic	0x03, 0	; 3
 174:	0d c0       	rjmp	.+26     	; 0x190 <main+0x2c>
			while( getBTN() == 0 ){
 176:	18 99       	sbic	0x03, 0	; 3
				MultiplexClase();
 178:	02 c0       	rjmp	.+4      	; 0x17e <main+0x1a>
 17a:	a6 df       	rcall	.-180    	; 0xc8 <_Z14MultiplexClasev>
	DDRB &= ~(1<<0);
	
	while (1)
	{
		if( getBTN() == 0 ){
			while( getBTN() == 0 ){
 17c:	fc cf       	rjmp	.-8      	; 0x176 <main+0x12>
				MultiplexClase();
			}
			contador++;
 17e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 182:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 18c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		MultiplexClase();
 190:	9b df       	rcall	.-202    	; 0xc8 <_Z14MultiplexClasev>
	DISPLAY_DDR = 0x0F;
	DISPLAY_CONTROL = 0xF;
	
	DDRB &= ~(1<<0);
	
	while (1)
 192:	ef cf       	rjmp	.-34     	; 0x172 <main+0xe>

00000194 <_Z20DisplaySevengSegInitv>:

char decoAC[10]={0xC0, 0xF9, 0xA4, 0xB0, 0x99,
0x92, 0x82, 0xF8, 0x80, 0x90};

void DisplaySevengSegInit(void ){
	DIR_SEVENSEG = 0xFF;
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	87 b9       	out	0x07, r24	; 7
 198:	08 95       	ret

0000019a <_Z17DisplaySevenSegCAc>:
}
void DisplaySevenSegCA(char val){
	
	if( (decoAC[val] & 1) == 0 )   PORT_SEVENSEG &= ~(1<<SEGA); else PORT_SEVENSEG |= (1<<SEGA);
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	fc 01       	movw	r30, r24
 19e:	ee 5f       	subi	r30, 0xFE	; 254
 1a0:	fe 4f       	sbci	r31, 0xFE	; 254
 1a2:	20 81       	ld	r18, Z
 1a4:	20 fd       	sbrc	r18, 0
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <_Z17DisplaySevenSegCAc+0x16>
 1a8:	28 b1       	in	r18, 0x08	; 8
 1aa:	2e 7f       	andi	r18, 0xFE	; 254
 1ac:	28 b9       	out	0x08, r18	; 8
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <_Z17DisplaySevenSegCAc+0x1c>
 1b0:	28 b1       	in	r18, 0x08	; 8
 1b2:	21 60       	ori	r18, 0x01	; 1
 1b4:	28 b9       	out	0x08, r18	; 8
	if( (decoAC[val] & 2) == 0 )   PORT_SEVENSEG &= ~(1<<SEGB); else PORT_SEVENSEG |= (1<<SEGB);
 1b6:	fc 01       	movw	r30, r24
 1b8:	ee 5f       	subi	r30, 0xFE	; 254
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	20 81       	ld	r18, Z
 1be:	21 fd       	sbrc	r18, 1
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <_Z17DisplaySevenSegCAc+0x30>
 1c2:	28 b1       	in	r18, 0x08	; 8
 1c4:	2d 7f       	andi	r18, 0xFD	; 253
 1c6:	28 b9       	out	0x08, r18	; 8
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <_Z17DisplaySevenSegCAc+0x36>
 1ca:	28 b1       	in	r18, 0x08	; 8
 1cc:	22 60       	ori	r18, 0x02	; 2
 1ce:	28 b9       	out	0x08, r18	; 8
	if( (decoAC[val] & 4) == 0 )   PORT_SEVENSEG &= ~(1<<SEGC); else PORT_SEVENSEG |= (1<<SEGC);
 1d0:	fc 01       	movw	r30, r24
 1d2:	ee 5f       	subi	r30, 0xFE	; 254
 1d4:	fe 4f       	sbci	r31, 0xFE	; 254
 1d6:	20 81       	ld	r18, Z
 1d8:	22 fd       	sbrc	r18, 2
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <_Z17DisplaySevenSegCAc+0x4a>
 1dc:	28 b1       	in	r18, 0x08	; 8
 1de:	2b 7f       	andi	r18, 0xFB	; 251
 1e0:	28 b9       	out	0x08, r18	; 8
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <_Z17DisplaySevenSegCAc+0x50>
 1e4:	28 b1       	in	r18, 0x08	; 8
 1e6:	24 60       	ori	r18, 0x04	; 4
 1e8:	28 b9       	out	0x08, r18	; 8
	if( (decoAC[val] & 8) == 0 )   PORT_SEVENSEG &= ~(1<<SEGD); else PORT_SEVENSEG |= (1<<SEGD);
 1ea:	fc 01       	movw	r30, r24
 1ec:	ee 5f       	subi	r30, 0xFE	; 254
 1ee:	fe 4f       	sbci	r31, 0xFE	; 254
 1f0:	20 81       	ld	r18, Z
 1f2:	23 fd       	sbrc	r18, 3
 1f4:	04 c0       	rjmp	.+8      	; 0x1fe <_Z17DisplaySevenSegCAc+0x64>
 1f6:	28 b1       	in	r18, 0x08	; 8
 1f8:	27 7f       	andi	r18, 0xF7	; 247
 1fa:	28 b9       	out	0x08, r18	; 8
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <_Z17DisplaySevenSegCAc+0x6a>
 1fe:	28 b1       	in	r18, 0x08	; 8
 200:	28 60       	ori	r18, 0x08	; 8
 202:	28 b9       	out	0x08, r18	; 8
	if( (decoAC[val] & 16) == 0 )  PORT_SEVENSEG &= ~(1<<SEGE); else PORT_SEVENSEG |= (1<<SEGE);
 204:	fc 01       	movw	r30, r24
 206:	ee 5f       	subi	r30, 0xFE	; 254
 208:	fe 4f       	sbci	r31, 0xFE	; 254
 20a:	20 81       	ld	r18, Z
 20c:	24 fd       	sbrc	r18, 4
 20e:	04 c0       	rjmp	.+8      	; 0x218 <_Z17DisplaySevenSegCAc+0x7e>
 210:	28 b1       	in	r18, 0x08	; 8
 212:	2f 7e       	andi	r18, 0xEF	; 239
 214:	28 b9       	out	0x08, r18	; 8
 216:	03 c0       	rjmp	.+6      	; 0x21e <_Z17DisplaySevenSegCAc+0x84>
 218:	28 b1       	in	r18, 0x08	; 8
 21a:	20 61       	ori	r18, 0x10	; 16
 21c:	28 b9       	out	0x08, r18	; 8
	if( (decoAC[val] & 32) == 0 )  PORT_SEVENSEG &= ~(1<<SEGF); else PORT_SEVENSEG |= (1<<SEGF);
 21e:	fc 01       	movw	r30, r24
 220:	ee 5f       	subi	r30, 0xFE	; 254
 222:	fe 4f       	sbci	r31, 0xFE	; 254
 224:	20 81       	ld	r18, Z
 226:	25 fd       	sbrc	r18, 5
 228:	04 c0       	rjmp	.+8      	; 0x232 <_Z17DisplaySevenSegCAc+0x98>
 22a:	28 b1       	in	r18, 0x08	; 8
 22c:	2f 7d       	andi	r18, 0xDF	; 223
 22e:	28 b9       	out	0x08, r18	; 8
 230:	03 c0       	rjmp	.+6      	; 0x238 <_Z17DisplaySevenSegCAc+0x9e>
 232:	28 b1       	in	r18, 0x08	; 8
 234:	20 62       	ori	r18, 0x20	; 32
 236:	28 b9       	out	0x08, r18	; 8
	if( (decoAC[val] & 64) == 0 )  PORT_SEVENSEG &= ~(1<<SEGG); else PORT_SEVENSEG |= (1<<SEGG);
 238:	fc 01       	movw	r30, r24
 23a:	ee 5f       	subi	r30, 0xFE	; 254
 23c:	fe 4f       	sbci	r31, 0xFE	; 254
 23e:	80 81       	ld	r24, Z
 240:	86 fd       	sbrc	r24, 6
 242:	04 c0       	rjmp	.+8      	; 0x24c <_Z17DisplaySevenSegCAc+0xb2>
 244:	88 b1       	in	r24, 0x08	; 8
 246:	8f 7b       	andi	r24, 0xBF	; 191
 248:	88 b9       	out	0x08, r24	; 8
 24a:	08 95       	ret
 24c:	88 b1       	in	r24, 0x08	; 8
 24e:	80 64       	ori	r24, 0x40	; 64
 250:	88 b9       	out	0x08, r24	; 8
 252:	08 95       	ret

00000254 <__divmodhi4>:
 254:	97 fb       	bst	r25, 7
 256:	07 2e       	mov	r0, r23
 258:	16 f4       	brtc	.+4      	; 0x25e <__divmodhi4+0xa>
 25a:	00 94       	com	r0
 25c:	06 d0       	rcall	.+12     	; 0x26a <__divmodhi4_neg1>
 25e:	77 fd       	sbrc	r23, 7
 260:	08 d0       	rcall	.+16     	; 0x272 <__divmodhi4_neg2>
 262:	0b d0       	rcall	.+22     	; 0x27a <__udivmodhi4>
 264:	07 fc       	sbrc	r0, 7
 266:	05 d0       	rcall	.+10     	; 0x272 <__divmodhi4_neg2>
 268:	3e f4       	brtc	.+14     	; 0x278 <__divmodhi4_exit>

0000026a <__divmodhi4_neg1>:
 26a:	90 95       	com	r25
 26c:	81 95       	neg	r24
 26e:	9f 4f       	sbci	r25, 0xFF	; 255
 270:	08 95       	ret

00000272 <__divmodhi4_neg2>:
 272:	70 95       	com	r23
 274:	61 95       	neg	r22
 276:	7f 4f       	sbci	r23, 0xFF	; 255

00000278 <__divmodhi4_exit>:
 278:	08 95       	ret

0000027a <__udivmodhi4>:
 27a:	aa 1b       	sub	r26, r26
 27c:	bb 1b       	sub	r27, r27
 27e:	51 e1       	ldi	r21, 0x11	; 17
 280:	07 c0       	rjmp	.+14     	; 0x290 <__udivmodhi4_ep>

00000282 <__udivmodhi4_loop>:
 282:	aa 1f       	adc	r26, r26
 284:	bb 1f       	adc	r27, r27
 286:	a6 17       	cp	r26, r22
 288:	b7 07       	cpc	r27, r23
 28a:	10 f0       	brcs	.+4      	; 0x290 <__udivmodhi4_ep>
 28c:	a6 1b       	sub	r26, r22
 28e:	b7 0b       	sbc	r27, r23

00000290 <__udivmodhi4_ep>:
 290:	88 1f       	adc	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	5a 95       	dec	r21
 296:	a9 f7       	brne	.-22     	; 0x282 <__udivmodhi4_loop>
 298:	80 95       	com	r24
 29a:	90 95       	com	r25
 29c:	bc 01       	movw	r22, r24
 29e:	cd 01       	movw	r24, r26
 2a0:	08 95       	ret

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
