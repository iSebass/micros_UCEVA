
Ejercicio02_CLASE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000222  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cf1  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000989  00000000  00000000  00001011  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fd  00000000  00000000  0000199a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001d98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d8  00000000  00000000  00001dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000394  00000000  00000000  000022c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002658  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  80:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  8c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  90:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  94:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  98:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  9c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  ac:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  b0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 e2       	ldi	r30, 0x22	; 34
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 30       	cpi	r26, 0x00	; 0
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>
  d6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <main>
  da:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <secuencia_A>:
		
    }
}

void secuencia_A(void){
	PORTB = 0b10000001;
  e2:	81 e8       	ldi	r24, 0x81	; 129
  e4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	80 e7       	ldi	r24, 0x70	; 112
  ea:	92 e0       	ldi	r25, 0x02	; 2
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <secuencia_A+0xa>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <secuencia_A+0x14>
  f6:	00 00       	nop
	_delay_ms(te);
	PORTB = 0b11000011;
  f8:	83 ec       	ldi	r24, 0xC3	; 195
  fa:	85 b9       	out	0x05, r24	; 5
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	80 e7       	ldi	r24, 0x70	; 112
 100:	92 e0       	ldi	r25, 0x02	; 2
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <secuencia_A+0x20>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <secuencia_A+0x2a>
 10c:	00 00       	nop
	_delay_ms(te);
	PORTB = 0b11100111;
 10e:	87 ee       	ldi	r24, 0xE7	; 231
 110:	85 b9       	out	0x05, r24	; 5
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	80 e7       	ldi	r24, 0x70	; 112
 116:	92 e0       	ldi	r25, 0x02	; 2
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <secuencia_A+0x36>
 120:	00 c0       	rjmp	.+0      	; 0x122 <secuencia_A+0x40>
 122:	00 00       	nop
	_delay_ms(te);
	PORTB = 0b11111111;
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	85 b9       	out	0x05, r24	; 5
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	80 e7       	ldi	r24, 0x70	; 112
 12c:	92 e0       	ldi	r25, 0x02	; 2
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <secuencia_A+0x4c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <secuencia_A+0x56>
 138:	00 00       	nop
	_delay_ms(te);
	PORTB = 0b01111110;
 13a:	8e e7       	ldi	r24, 0x7E	; 126
 13c:	85 b9       	out	0x05, r24	; 5
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	80 e7       	ldi	r24, 0x70	; 112
 142:	92 e0       	ldi	r25, 0x02	; 2
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <secuencia_A+0x62>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <secuencia_A+0x6c>
 14e:	00 00       	nop
	_delay_ms(te);
	PORTB = 0b00111100;
 150:	8c e3       	ldi	r24, 0x3C	; 60
 152:	85 b9       	out	0x05, r24	; 5
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	80 e7       	ldi	r24, 0x70	; 112
 158:	92 e0       	ldi	r25, 0x02	; 2
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <secuencia_A+0x78>
 162:	00 c0       	rjmp	.+0      	; 0x164 <secuencia_A+0x82>
 164:	00 00       	nop
	_delay_ms(te);
	PORTB = 0b00011000;
 166:	88 e1       	ldi	r24, 0x18	; 24
 168:	85 b9       	out	0x05, r24	; 5
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	80 e7       	ldi	r24, 0x70	; 112
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <secuencia_A+0x8e>
 178:	00 c0       	rjmp	.+0      	; 0x17a <secuencia_A+0x98>
 17a:	00 00       	nop
	_delay_ms(te);
	PORTB = 0b00000000;
 17c:	15 b8       	out	0x05, r1	; 5
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	80 e7       	ldi	r24, 0x70	; 112
 182:	92 e0       	ldi	r25, 0x02	; 2
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <secuencia_A+0xa2>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <secuencia_A+0xac>
 18e:	00 00       	nop
 190:	08 95       	ret

00000192 <secuencia_B>:
	_delay_ms(te);
}

void secuencia_B(void){
	PORTB = 0x0F;
 192:	8f e0       	ldi	r24, 0x0F	; 15
 194:	85 b9       	out	0x05, r24	; 5
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	80 e7       	ldi	r24, 0x70	; 112
 19a:	92 e0       	ldi	r25, 0x02	; 2
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <secuencia_B+0xa>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <secuencia_B+0x14>
 1a6:	00 00       	nop
	_delay_ms(te);
	PORTB = 0xF0;
 1a8:	80 ef       	ldi	r24, 0xF0	; 240
 1aa:	85 b9       	out	0x05, r24	; 5
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	80 e7       	ldi	r24, 0x70	; 112
 1b0:	92 e0       	ldi	r25, 0x02	; 2
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <secuencia_B+0x20>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <secuencia_B+0x2a>
 1bc:	00 00       	nop
 1be:	08 95       	ret

000001c0 <secuencia_C>:
	_delay_ms(te);
	
}
void secuencia_C(void){
	PORTB = 0b10101010;
 1c0:	8a ea       	ldi	r24, 0xAA	; 170
 1c2:	85 b9       	out	0x05, r24	; 5
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	80 e7       	ldi	r24, 0x70	; 112
 1c8:	92 e0       	ldi	r25, 0x02	; 2
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <secuencia_C+0xa>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <secuencia_C+0x14>
 1d4:	00 00       	nop
	_delay_ms(te);
	PORTB = 0b01010101;
 1d6:	85 e5       	ldi	r24, 0x55	; 85
 1d8:	85 b9       	out	0x05, r24	; 5
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	80 e7       	ldi	r24, 0x70	; 112
 1de:	92 e0       	ldi	r25, 0x02	; 2
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <secuencia_C+0x20>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <secuencia_C+0x2a>
 1ea:	00 00       	nop
 1ec:	08 95       	ret

000001ee <main>:

const int te=100;

int main(void)
{
    DDRB  = 0xFF;
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 1f2:	15 b8       	out	0x05, r1	; 5
	int i=0;
    while (1) 
    {
		secuencia_A();
 1f4:	0e 94 71 00 	call	0xe2	; 0xe2 <secuencia_A>
		for(i=0; i<=3; i++){
 1f8:	c0 e0       	ldi	r28, 0x00	; 0
 1fa:	d0 e0       	ldi	r29, 0x00	; 0
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <main+0x16>
			secuencia_B();
 1fe:	0e 94 c9 00 	call	0x192	; 0x192 <secuencia_B>
	PORTB = 0x00;
	int i=0;
    while (1) 
    {
		secuencia_A();
		for(i=0; i<=3; i++){
 202:	21 96       	adiw	r28, 0x01	; 1
 204:	c4 30       	cpi	r28, 0x04	; 4
 206:	d1 05       	cpc	r29, r1
 208:	d4 f3       	brlt	.-12     	; 0x1fe <main+0x10>
 20a:	c0 e0       	ldi	r28, 0x00	; 0
 20c:	d0 e0       	ldi	r29, 0x00	; 0
 20e:	03 c0       	rjmp	.+6      	; 0x216 <main+0x28>
			secuencia_B();
		}
		for(i=0; i<=3; i++){
			secuencia_C();
 210:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <secuencia_C>
    {
		secuencia_A();
		for(i=0; i<=3; i++){
			secuencia_B();
		}
		for(i=0; i<=3; i++){
 214:	21 96       	adiw	r28, 0x01	; 1
 216:	c4 30       	cpi	r28, 0x04	; 4
 218:	d1 05       	cpc	r29, r1
 21a:	d4 f3       	brlt	.-12     	; 0x210 <main+0x22>
 21c:	eb cf       	rjmp	.-42     	; 0x1f4 <main+0x6>

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
