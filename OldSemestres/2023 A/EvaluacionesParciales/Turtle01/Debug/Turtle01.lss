
Turtle01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009cd  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e5  00000000  00000000  00000bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bd  00000000  00000000  000014ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001778  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047f  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001c4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  c4:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <izquierda>:
void avanzar(){
	PORTB |=  ( (1<<3)|(1<<4) );
	PORTB &= ~( (1<<2)|(1<<5) );
}
void izquierda(){
	PORTB |=  ( (1<<4) );
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	80 61       	ori	r24, 0x10	; 16
  d0:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~( (1<<2)|(1<<5)|(1<<3) );
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	83 7d       	andi	r24, 0xD3	; 211
  d6:	85 b9       	out	0x05, r24	; 5
  d8:	08 95       	ret

000000da <derecha>:
}
void derecha(){
	PORTB |=  ( (1<<3) );
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	88 60       	ori	r24, 0x08	; 8
  de:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~( (1<<2)|(1<<5)|(1<<4) );
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	8b 7c       	andi	r24, 0xCB	; 203
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	08 95       	ret

000000e8 <main>:
}


int main(void)
{
    DDRB  &= ~( (1<<0)|(1<<1) );
  e8:	84 b1       	in	r24, 0x04	; 4
  ea:	8c 7f       	andi	r24, 0xFC	; 252
  ec:	84 b9       	out	0x04, r24	; 4
	DDRB  |=  ( (1<<2)|(1<<3)|(1<<4)|(1<<5) );
  ee:	84 b1       	in	r24, 0x04	; 4
  f0:	8c 63       	ori	r24, 0x3C	; 60
  f2:	84 b9       	out	0x04, r24	; 4
	
	derecha();
  f4:	0e 94 6d 00 	call	0xda	; 0xda <derecha>
	
    while (1) 
    {
		if(S1 != 0){
  f8:	18 99       	sbic	0x03, 0	; 3
			izquierda();
  fa:	0e 94 66 00 	call	0xcc	; 0xcc <izquierda>
		}
		if(S2 != 0){
  fe:	19 9b       	sbis	0x03, 1	; 3
 100:	fb cf       	rjmp	.-10     	; 0xf8 <main+0x10>
			derecha();
 102:	0e 94 6d 00 	call	0xda	; 0xda <derecha>
 106:	f8 cf       	rjmp	.-16     	; 0xf8 <main+0x10>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
