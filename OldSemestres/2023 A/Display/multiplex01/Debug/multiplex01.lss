
multiplex01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000270  00000304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000270  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800102  00800102  00000306  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c1b  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a07  00000000  00000000  00000fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000490  00000000  00000000  000019e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fb  00000000  00000000  00001ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001da  00000000  00000000  000023c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000025a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  58:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  5c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  60:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  64:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  68:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  6c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  70:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  74:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  78:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  7c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  80:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  84:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  88:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  8c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  90:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  94:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  98:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  9c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  a0:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  a4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  a8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  ac:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  b0:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  b4:	90 00       	.word	0x0090	; ????
  b6:	93 00       	.word	0x0093	; ????
  b8:	96 00       	.word	0x0096	; ????
  ba:	99 00       	.word	0x0099	; ????
  bc:	9c 00       	.word	0x009c	; ????
  be:	9f 00       	.word	0x009f	; ????
  c0:	a2 00       	.word	0x00a2	; ????
  c2:	a5 00       	.word	0x00a5	; ????
  c4:	a8 00       	.word	0x00a8	; ????
  c6:	ab 00       	.word	0x00ab	; ????

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d8 e0       	ldi	r29, 0x08	; 8
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	e0 e7       	ldi	r30, 0x70	; 112
  dc:	f2 e0       	ldi	r31, 0x02	; 2
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a2 30       	cpi	r26, 0x02	; 2
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	a2 e0       	ldi	r26, 0x02	; 2
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	ac 30       	cpi	r26, 0x0C	; 12
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
  fa:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  fe:	0c 94 36 01 	jmp	0x26c	; 0x26c <_exit>

00000102 <__bad_interrupt>:
 102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <decoInit>:
#include "PERREA.h"


void decoInit(void){
	DECO_DDR  = 0xFF;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	8a b9       	out	0x0a, r24	; 10
	DECO_PORT = 0x00;
 10a:	1b b8       	out	0x0b, r1	; 11
 10c:	08 95       	ret

0000010e <decoCC>:
}
void decoCC(uint8_t dig){
	switch(dig){
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	8a 30       	cpi	r24, 0x0A	; 10
 112:	91 05       	cpc	r25, r1
 114:	10 f5       	brcc	.+68     	; 0x15a <decoCC+0x4c>
 116:	fc 01       	movw	r30, r24
 118:	e6 5a       	subi	r30, 0xA6	; 166
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__tablejump2__>
		
		case 0: DECO_PORT = 191; break;
 120:	8f eb       	ldi	r24, 0xBF	; 191
 122:	8b b9       	out	0x0b, r24	; 11
 124:	08 95       	ret
		case 1: DECO_PORT = 134; break;
 126:	86 e8       	ldi	r24, 0x86	; 134
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	08 95       	ret
		case 2: DECO_PORT = 219; break;
 12c:	8b ed       	ldi	r24, 0xDB	; 219
 12e:	8b b9       	out	0x0b, r24	; 11
 130:	08 95       	ret
		case 3: DECO_PORT = 207; break;
 132:	8f ec       	ldi	r24, 0xCF	; 207
 134:	8b b9       	out	0x0b, r24	; 11
 136:	08 95       	ret
		case 4: DECO_PORT = 230; break;
 138:	86 ee       	ldi	r24, 0xE6	; 230
 13a:	8b b9       	out	0x0b, r24	; 11
 13c:	08 95       	ret
		case 5: DECO_PORT = 237; break;
 13e:	8d ee       	ldi	r24, 0xED	; 237
 140:	8b b9       	out	0x0b, r24	; 11
 142:	08 95       	ret
		case 6: DECO_PORT = 253; break;
 144:	8d ef       	ldi	r24, 0xFD	; 253
 146:	8b b9       	out	0x0b, r24	; 11
 148:	08 95       	ret
		case 7: DECO_PORT = 135; break;
 14a:	87 e8       	ldi	r24, 0x87	; 135
 14c:	8b b9       	out	0x0b, r24	; 11
 14e:	08 95       	ret
		case 8: DECO_PORT = 255; break;
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	8b b9       	out	0x0b, r24	; 11
 154:	08 95       	ret
		case 9: DECO_PORT = 231; break;
 156:	87 ee       	ldi	r24, 0xE7	; 231
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	08 95       	ret

0000015c <main>:
const int tmultiplex=10;

int main(void)
{
	
    decoInit();
 15c:	0e 94 83 00 	call	0x106	; 0x106 <decoInit>
	DDRB |= (1<<DDRB0)|(1<<DDRB1)|(1<<DDRB2)|(1<<DDRB3);
 160:	84 b1       	in	r24, 0x04	; 4
 162:	8f 60       	ori	r24, 0x0F	; 15
 164:	84 b9       	out	0x04, r24	; 4
    while (1) 
    {
		u_mil   = numerito/1000;
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16e:	68 ee       	ldi	r22, 0xE8	; 232
 170:	73 e0       	ldi	r23, 0x03	; 3
 172:	0e 94 08 01 	call	0x210	; 0x210 <__divmodhi4>
 176:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <__data_end+0x1>
 17a:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__data_end>
		residuo = numerito % 1000;
		
		cent    = residuo/100;
 17e:	64 e6       	ldi	r22, 0x64	; 100
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	0e 94 08 01 	call	0x210	; 0x210 <__divmodhi4>
 186:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <cent+0x1>
 18a:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <cent>
		residuo = residuo%100;
 18e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <residuo+0x1>
 192:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <residuo>
		
		dec     = residuo/10;
 196:	6a e0       	ldi	r22, 0x0A	; 10
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	0e 94 08 01 	call	0x210	; 0x210 <__divmodhi4>
 19e:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <dec+0x1>
 1a2:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <dec>
		unidad  = residuo%10;
 1a6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <unidad+0x1>
 1aa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <unidad>
	
		
		PORTB = DP1_ON;
 1ae:	8e e0       	ldi	r24, 0x0E	; 14
 1b0:	85 b9       	out	0x05, r24	; 5
		decoCC(u_mil);
 1b2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1b6:	0e 94 87 00 	call	0x10e	; 0x10e <decoCC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	8f e3       	ldi	r24, 0x3F	; 63
 1bc:	9c e9       	ldi	r25, 0x9C	; 156
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <main+0x62>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x68>
 1c4:	00 00       	nop
		_delay_ms(tmultiplex);
		
		PORTB = DP2_ON;
 1c6:	8d e0       	ldi	r24, 0x0D	; 13
 1c8:	85 b9       	out	0x05, r24	; 5
		decoCC(cent);
 1ca:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <cent>
 1ce:	0e 94 87 00 	call	0x10e	; 0x10e <decoCC>
 1d2:	8f e3       	ldi	r24, 0x3F	; 63
 1d4:	9c e9       	ldi	r25, 0x9C	; 156
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <main+0x7a>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x80>
 1dc:	00 00       	nop
		_delay_ms(tmultiplex);
		
		PORTB = DP3_ON;
 1de:	8b e0       	ldi	r24, 0x0B	; 11
 1e0:	85 b9       	out	0x05, r24	; 5
		decoCC(dec);
 1e2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dec>
 1e6:	0e 94 87 00 	call	0x10e	; 0x10e <decoCC>
 1ea:	8f e3       	ldi	r24, 0x3F	; 63
 1ec:	9c e9       	ldi	r25, 0x9C	; 156
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <main+0x92>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <main+0x98>
 1f4:	00 00       	nop
		_delay_ms(tmultiplex);
		
		PORTB = DP4_ON;
 1f6:	87 e0       	ldi	r24, 0x07	; 7
 1f8:	85 b9       	out	0x05, r24	; 5
		decoCC(unidad);
 1fa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <unidad>
 1fe:	0e 94 87 00 	call	0x10e	; 0x10e <decoCC>
 202:	8f e3       	ldi	r24, 0x3F	; 63
 204:	9c e9       	ldi	r25, 0x9C	; 156
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <main+0xaa>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0xb0>
 20c:	00 00       	nop
 20e:	ab cf       	rjmp	.-170    	; 0x166 <main+0xa>

00000210 <__divmodhi4>:
 210:	97 fb       	bst	r25, 7
 212:	07 2e       	mov	r0, r23
 214:	16 f4       	brtc	.+4      	; 0x21a <__divmodhi4+0xa>
 216:	00 94       	com	r0
 218:	07 d0       	rcall	.+14     	; 0x228 <__divmodhi4_neg1>
 21a:	77 fd       	sbrc	r23, 7
 21c:	09 d0       	rcall	.+18     	; 0x230 <__divmodhi4_neg2>
 21e:	0e 94 22 01 	call	0x244	; 0x244 <__udivmodhi4>
 222:	07 fc       	sbrc	r0, 7
 224:	05 d0       	rcall	.+10     	; 0x230 <__divmodhi4_neg2>
 226:	3e f4       	brtc	.+14     	; 0x236 <__divmodhi4_exit>

00000228 <__divmodhi4_neg1>:
 228:	90 95       	com	r25
 22a:	81 95       	neg	r24
 22c:	9f 4f       	sbci	r25, 0xFF	; 255
 22e:	08 95       	ret

00000230 <__divmodhi4_neg2>:
 230:	70 95       	com	r23
 232:	61 95       	neg	r22
 234:	7f 4f       	sbci	r23, 0xFF	; 255

00000236 <__divmodhi4_exit>:
 236:	08 95       	ret

00000238 <__tablejump2__>:
 238:	ee 0f       	add	r30, r30
 23a:	ff 1f       	adc	r31, r31
 23c:	05 90       	lpm	r0, Z+
 23e:	f4 91       	lpm	r31, Z
 240:	e0 2d       	mov	r30, r0
 242:	09 94       	ijmp

00000244 <__udivmodhi4>:
 244:	aa 1b       	sub	r26, r26
 246:	bb 1b       	sub	r27, r27
 248:	51 e1       	ldi	r21, 0x11	; 17
 24a:	07 c0       	rjmp	.+14     	; 0x25a <__udivmodhi4_ep>

0000024c <__udivmodhi4_loop>:
 24c:	aa 1f       	adc	r26, r26
 24e:	bb 1f       	adc	r27, r27
 250:	a6 17       	cp	r26, r22
 252:	b7 07       	cpc	r27, r23
 254:	10 f0       	brcs	.+4      	; 0x25a <__udivmodhi4_ep>
 256:	a6 1b       	sub	r26, r22
 258:	b7 0b       	sbc	r27, r23

0000025a <__udivmodhi4_ep>:
 25a:	88 1f       	adc	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	5a 95       	dec	r21
 260:	a9 f7       	brne	.-22     	; 0x24c <__udivmodhi4_loop>
 262:	80 95       	com	r24
 264:	90 95       	com	r25
 266:	bc 01       	movw	r22, r24
 268:	cd 01       	movw	r24, r26
 26a:	08 95       	ret

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
