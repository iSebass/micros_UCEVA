
contador7SegUPDOWN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000240  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae4  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009dd  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042a  00000000  00000000  000017b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004df  00000000  00000000  00001c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000102  00000000  00000000  0000211b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000221d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
   4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  10:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  14:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  18:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  1c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  20:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  24:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  28:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  2c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  30:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  34:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  38:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  3c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  40:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  48:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  4c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  50:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  54:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  58:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  5c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  60:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  68:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  6c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  70:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  74:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  78:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  7c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  80:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  84:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  88:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  8c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  90:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  94:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  98:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  9c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  a0:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  a4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  a8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  ac:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  b0:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  b4:	85 00       	.word	0x0085	; ????
  b6:	88 00       	.word	0x0088	; ????
  b8:	8b 00       	.word	0x008b	; ????
  ba:	8e 00       	.word	0x008e	; ????
  bc:	91 00       	.word	0x0091	; ????
  be:	94 00       	.word	0x0094	; ????
  c0:	97 00       	.word	0x0097	; ????
  c2:	9a 00       	.word	0x009a	; ????
  c4:	9d 00       	.word	0x009d	; ????
  c6:	a0 00       	.word	0x00a0	; ????

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d8 e0       	ldi	r29, 0x08	; 8
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_clear_bss>:
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	a2 30       	cpi	r26, 0x02	; 2
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
  e4:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  e8:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_exit>

000000ec <__bad_interrupt>:
  ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f0 <decoInit>:
#include "PERREA.h"


void decoInit(void){
	DECO_DDR  = 0xFF;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	8a b9       	out	0x0a, r24	; 10
	DECO_PORT = 0x00;
  f4:	1b b8       	out	0x0b, r1	; 11
  f6:	08 95       	ret

000000f8 <decoCC>:
}
void decoCC(uint8_t dig){
	switch(dig){
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	8a 30       	cpi	r24, 0x0A	; 10
  fc:	91 05       	cpc	r25, r1
  fe:	10 f5       	brcc	.+68     	; 0x144 <decoCC+0x4c>
 100:	fc 01       	movw	r30, r24
 102:	e6 5a       	subi	r30, 0xA6	; 166
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__tablejump2__>
		
		case 0: DECO_PORT = 191; break;
 10a:	8f eb       	ldi	r24, 0xBF	; 191
 10c:	8b b9       	out	0x0b, r24	; 11
 10e:	08 95       	ret
		case 1: DECO_PORT = 134; break;
 110:	86 e8       	ldi	r24, 0x86	; 134
 112:	8b b9       	out	0x0b, r24	; 11
 114:	08 95       	ret
		case 2: DECO_PORT = 219; break;
 116:	8b ed       	ldi	r24, 0xDB	; 219
 118:	8b b9       	out	0x0b, r24	; 11
 11a:	08 95       	ret
		case 3: DECO_PORT = 207; break;
 11c:	8f ec       	ldi	r24, 0xCF	; 207
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	08 95       	ret
		case 4: DECO_PORT = 230; break;
 122:	86 ee       	ldi	r24, 0xE6	; 230
 124:	8b b9       	out	0x0b, r24	; 11
 126:	08 95       	ret
		case 5: DECO_PORT = 237; break;
 128:	8d ee       	ldi	r24, 0xED	; 237
 12a:	8b b9       	out	0x0b, r24	; 11
 12c:	08 95       	ret
		case 6: DECO_PORT = 253; break;
 12e:	8d ef       	ldi	r24, 0xFD	; 253
 130:	8b b9       	out	0x0b, r24	; 11
 132:	08 95       	ret
		case 7: DECO_PORT = 135; break;
 134:	87 e8       	ldi	r24, 0x87	; 135
 136:	8b b9       	out	0x0b, r24	; 11
 138:	08 95       	ret
		case 8: DECO_PORT = 255; break;
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	8b b9       	out	0x0b, r24	; 11
 13e:	08 95       	ret
		case 9: DECO_PORT = 231; break;
 140:	87 ee       	ldi	r24, 0xE7	; 231
 142:	8b b9       	out	0x0b, r24	; 11
 144:	08 95       	ret

00000146 <main>:
#define get_BtnDOWN()  ( PINB & (1<<PORTB1) )

int contador=0;
int main(void)
{	
    decoInit();
 146:	0e 94 78 00 	call	0xf0	; 0xf0 <decoInit>
	
	DDRB &= ~( (1<<0)|(1<<1) );
 14a:	84 b1       	in	r24, 0x04	; 4
 14c:	8c 7f       	andi	r24, 0xFC	; 252
 14e:	84 b9       	out	0x04, r24	; 4
	
    while (1) 
    {
		decoCC(contador);
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 154:	0e 94 7c 00 	call	0xf8	; 0xf8 <decoCC>
		
		if( get_BtnDOWN() != 0){
 158:	19 9b       	sbis	0x03, 1	; 3
 15a:	11 c0       	rjmp	.+34     	; 0x17e <main+0x38>
			while(get_BtnDOWN() != 0);
 15c:	19 99       	sbic	0x03, 1	; 3
 15e:	fe cf       	rjmp	.-4      	; 0x15c <main+0x16>
			contador++;
 160:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 164:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if(contador>9) contador=0;
 172:	0a 97       	sbiw	r24, 0x0a	; 10
 174:	24 f0       	brlt	.+8      	; 0x17e <main+0x38>
 176:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		if(get_BtnUP() == 0){
 17e:	18 99       	sbic	0x03, 0	; 3
 180:	13 c0       	rjmp	.+38     	; 0x1a8 <main+0x62>
			while(get_BtnUP() == 0);
 182:	18 9b       	sbis	0x03, 0	; 3
 184:	fe cf       	rjmp	.-4      	; 0x182 <main+0x3c>
			contador--;
 186:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 194:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if(contador<0) contador=9;
 198:	99 23       	and	r25, r25
 19a:	34 f4       	brge	.+12     	; 0x1a8 <main+0x62>
 19c:	89 e0       	ldi	r24, 0x09	; 9
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	89 ef       	ldi	r24, 0xF9	; 249
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <main+0x68>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x72>
 1b8:	00 00       	nop
 1ba:	ca cf       	rjmp	.-108    	; 0x150 <main+0xa>

000001bc <__tablejump2__>:
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	05 90       	lpm	r0, Z+
 1c2:	f4 91       	lpm	r31, Z
 1c4:	e0 2d       	mov	r30, r0
 1c6:	09 94       	ijmp

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
