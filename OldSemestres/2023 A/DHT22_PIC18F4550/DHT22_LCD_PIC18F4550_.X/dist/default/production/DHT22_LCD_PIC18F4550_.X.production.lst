

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Mar 27 01:01:11 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    44  0000                     
    45                           ; Version 1.45
    46                           ; Generated 16/11/2017 GMT
    47                           ; 
    48                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F4550 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     
    80                           	psect	smallconst
    81  000800                     __psmallconst:
    82                           	opt stack 0
    83  000800  00                 	db	0
    84  000801                     _dpowers:
    85                           	opt stack 0
    86  000801  0001               	dw	1
    87  000803  0000               	dw	0
    88  000805  000A               	dw	10
    89  000807  0000               	dw	0
    90  000809  0064               	dw	100
    91  00080B  0000               	dw	0
    92  00080D  03E8               	dw	1000
    93  00080F  0000               	dw	0
    94  000811  2710               	dw	10000
    95  000813  0000               	dw	0
    96  000815  86A0               	dw	34464
    97  000817  0001               	dw	1
    98  000819  4240               	dw	16960
    99  00081B  000F               	dw	15
   100  00081D  9680               	dw	38528
   101  00081F  0098               	dw	152
   102  000821  E100               	dw	57600
   103  000823  05F5               	dw	1525
   104  000825  CA00               	dw	51712
   105  000827  3B9A               	dw	15258
   106  000829                     __end_of_dpowers:
   107                           	opt stack 0
   108  000829                     __powers_:
   109                           	opt stack 0
   110  000829  00                 	db	0
   111  00082A  80                 	db	128
   112  00082B  3F                 	db	63
   113  00082C  00                 	db	0
   114  00082D  20                 	db	32
   115  00082E  41                 	db	65
   116  00082F  00                 	db	0
   117  000830  C8                 	db	200
   118  000831  42                 	db	66
   119  000832  00                 	db	0
   120  000833  7A                 	db	122
   121  000834  44                 	db	68
   122  000835  40                 	db	64
   123  000836  1C                 	db	28
   124  000837  46                 	db	70
   125  000838  50                 	db	80
   126  000839  C3                 	db	195
   127  00083A  47                 	db	71
   128  00083B  24                 	db	36
   129  00083C  74                 	db	116
   130  00083D  49                 	db	73
   131  00083E  97                 	db	151
   132  00083F  18                 	db	24
   133  000840  4B                 	db	75
   134  000841  BC                 	db	188
   135  000842  BE                 	db	190
   136  000843  4C                 	db	76
   137  000844  6B                 	db	107
   138  000845  6E                 	db	110
   139  000846  4E                 	db	78
   140  000847  03                 	db	3
   141  000848  15                 	db	21
   142  000849  50                 	db	80
   143  00084A  79                 	db	121
   144  00084B  AD                 	db	173
   145  00084C  60                 	db	96
   146  00084D  F3                 	db	243
   147  00084E  49                 	db	73
   148  00084F  71                 	db	113
   149  000850                     __end_of__powers_:
   150                           	opt stack 0
   151  000850                     __npowers_:
   152                           	opt stack 0
   153  000850  00                 	db	0
   154  000851  80                 	db	128
   155  000852  3F                 	db	63
   156  000853  CD                 	db	205
   157  000854  CC                 	db	204
   158  000855  3D                 	db	61
   159  000856  D7                 	db	215
   160  000857  23                 	db	35
   161  000858  3C                 	db	60
   162  000859  12                 	db	18
   163  00085A  83                 	db	131
   164  00085B  3A                 	db	58
   165  00085C  B7                 	db	183
   166  00085D  D1                 	db	209
   167  00085E  38                 	db	56
   168  00085F  C6                 	db	198
   169  000860  27                 	db	39
   170  000861  37                 	db	55
   171  000862  38                 	db	56
   172  000863  86                 	db	134
   173  000864  35                 	db	53
   174  000865  C0                 	db	192
   175  000866  D6                 	db	214
   176  000867  33                 	db	51
   177  000868  CC                 	db	204
   178  000869  2B                 	db	43
   179  00086A  32                 	db	50
   180  00086B  70                 	db	112
   181  00086C  89                 	db	137
   182  00086D  30                 	db	48
   183  00086E  E7                 	db	231
   184  00086F  DB                 	db	219
   185  000870  2E                 	db	46
   186  000871  E5                 	db	229
   187  000872  3C                 	db	60
   188  000873  1E                 	db	30
   189  000874  42                 	db	66
   190  000875  A2                 	db	162
   191  000876  0D                 	db	13
   192  000877                     __end_of__npowers_:
   193                           	opt stack 0
   194  0000                     _LATDbits	set	3980
   195  0000                     _TRISDbits	set	3989
   196  0000                     _PORTCbits	set	3970
   197  0000                     _LATCbits	set	3979
   198  0000                     _TRISCbits	set	3988
   199  000877                     STR_2:
   200  000877  20                 	db	32
   201  000878  20                 	db	32
   202  000879  48                 	db	72	;'H'
   203  00087A  75                 	db	117	;'u'
   204  00087B  6D                 	db	109	;'m'
   205  00087C  65                 	db	101	;'e'
   206  00087D  2E                 	db	46
   207  00087E  20                 	db	32
   208  00087F  25                 	db	37
   209  000880  32                 	db	50	;'2'
   210  000881  2E                 	db	46
   211  000882  32                 	db	50	;'2'
   212  000883  66                 	db	102	;'f'
   213  000884  00                 	db	0
   214  000885                     STR_1:
   215  000885  20                 	db	32
   216  000886  20                 	db	32
   217  000887  54                 	db	84	;'T'
   218  000888  65                 	db	101	;'e'
   219  000889  6D                 	db	109	;'m'
   220  00088A  70                 	db	112	;'p'
   221  00088B  2E                 	db	46
   222  00088C  20                 	db	32
   223  00088D  25                 	db	37
   224  00088E  32                 	db	50	;'2'
   225  00088F  2E                 	db	46
   226  000890  32                 	db	50	;'2'
   227  000891  66                 	db	102	;'f'
   228  000892  00                 	db	0
   229  000893                     STR_3:
   230  000893  65                 	db	101	;'e'
   231  000894  72                 	db	114	;'r'
   232  000895  72                 	db	114	;'r'
   233  000896  6F                 	db	111	;'o'
   234  000897  72                 	db	114	;'r'
   235  000898  00                 	db	0
   236                           
   237                           ; #config settings
   238  000899  00                 	db	0	; dummy byte at the end
   239  0000                     
   240                           	psect	cinit
   241  0025B6                     __pcinit:
   242                           	opt stack 0
   243  0025B6                     start_initialization:
   244                           	opt stack 0
   245  0025B6                     __initialization:
   246                           	opt stack 0
   247                           
   248                           ; Clear objects allocated to BANK0 (8 bytes)
   249  0025B6  EE00  F079         	lfsr	0,__pbssBANK0
   250  0025BA  0E08               	movlw	8
   251  0025BC                     clear_0:
   252  0025BC  6AEE               	clrf	postinc0,c
   253  0025BE  06E8               	decf	wreg,f,c
   254  0025C0  E1FD               	bnz	clear_0
   255  0025C2                     end_of_initialization:
   256                           	opt stack 0
   257  0025C2                     __end_of__initialization:
   258                           	opt stack 0
   259  0025C2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   260  0025C4  6EF8               	movwf	tblptru,c
   261  0025C6  0100               	movlb	0
   262  0025C8  EF92  F010         	goto	_main	;jump to C main() function
   263                           tblptru	equ	0xFF8
   264                           postinc0	equ	0xFEE
   265                           wreg	equ	0xFE8
   266                           
   267                           	psect	bssBANK0
   268  000079                     __pbssBANK0:
   269                           	opt stack 0
   270  000079                     LCD_integer@F3974:
   271                           	opt stack 0
   272  000079                     	ds	8
   273                           tblptru	equ	0xFF8
   274                           postinc0	equ	0xFEE
   275                           wreg	equ	0xFE8
   276                           
   277                           	psect	cstackBANK0
   278  000060                     __pcstackBANK0:
   279                           	opt stack 0
   280  000060                     _printf$1023:
   281                           	opt stack 0
   282                           
   283                           ; 3 bytes @ 0x0
   284  000060                     	ds	3
   285  000063                     printf@ap:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0x3
   289  000063                     	ds	2
   290  000065                     printf@val:
   291                           	opt stack 0
   292                           
   293                           ; 4 bytes @ 0x5
   294  000065                     	ds	4
   295  000069                     printf@flag:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0x9
   299  000069                     	ds	2
   300  00006B                     printf@width:
   301                           	opt stack 0
   302                           
   303                           ; 2 bytes @ 0xB
   304  00006B                     	ds	2
   305  00006D                     printf@tmpval:
   306                           	opt stack 0
   307                           
   308                           ; 4 bytes @ 0xD
   309  00006D                     	ds	4
   310  000071                     printf@exp:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x11
   314  000071                     	ds	2
   315  000073                     printf@fval:
   316                           	opt stack 0
   317                           
   318                           ; 3 bytes @ 0x13
   319  000073                     	ds	3
   320  000076                     printf@prec:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0x16
   324  000076                     	ds	2
   325  000078                     printf@c:
   326                           	opt stack 0
   327                           
   328                           ; 1 bytes @ 0x18
   329  000078                     	ds	1
   330                           tblptru	equ	0xFF8
   331                           postinc0	equ	0xFEE
   332                           wreg	equ	0xFE8
   333                           
   334                           	psect	cstackCOMRAM
   335  000001                     __pcstackCOMRAM:
   336                           	opt stack 0
   337  000001                     ??_isdigit:
   338  000001                     ?___awmod:
   339                           	opt stack 0
   340  000001                     ?___ftpack:
   341                           	opt stack 0
   342  000001                     ?___ftneg:
   343                           	opt stack 0
   344  000001                     ?__tdiv_to_l_:
   345                           	opt stack 0
   346  000001                     ?__div_to_l_:
   347                           	opt stack 0
   348  000001                     ?___lldiv:
   349                           	opt stack 0
   350  000001                     ?___llmod:
   351                           	opt stack 0
   352  000001                     LCD_write@dato:
   353                           	opt stack 0
   354  000001                     ___awmod@dividend:
   355                           	opt stack 0
   356  000001                     __div_to_l_@f1:
   357                           	opt stack 0
   358  000001                     ___ftpack@arg:
   359                           	opt stack 0
   360  000001                     __tdiv_to_l_@f1:
   361                           	opt stack 0
   362  000001                     ___ftge@ff1:
   363                           	opt stack 0
   364  000001                     ___ftneg@f1:
   365                           	opt stack 0
   366  000001                     ___lldiv@dividend:
   367                           	opt stack 0
   368  000001                     ___llmod@dividend:
   369                           	opt stack 0
   370                           
   371                           ; 4 bytes @ 0x0
   372  000001                     	ds	1
   373  000002                     LCD_cmd@dato:
   374                           	opt stack 0
   375  000002                     LCD_dato@dato:
   376                           	opt stack 0
   377  000002                     _isdigit$652:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0x1
   381  000002                     	ds	1
   382  000003                     ??_LCD_init:
   383  000003                     ??_LCD_clear:
   384  000003                     putch@dato:
   385                           	opt stack 0
   386  000003                     isdigit@c:
   387                           	opt stack 0
   388  000003                     LCD_printf@dato:
   389                           	opt stack 0
   390  000003                     ___awmod@divisor:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x2
   394  000003                     	ds	1
   395  000004                     ___ftpack@exp:
   396                           	opt stack 0
   397  000004                     __div_to_l_@f2:
   398                           	opt stack 0
   399  000004                     __tdiv_to_l_@f2:
   400                           	opt stack 0
   401  000004                     ___ftge@ff2:
   402                           	opt stack 0
   403                           
   404                           ; 3 bytes @ 0x3
   405  000004                     	ds	1
   406  000005                     ___awmod@counter:
   407                           	opt stack 0
   408  000005                     ___ftpack@sign:
   409                           	opt stack 0
   410  000005                     ___lldiv@divisor:
   411                           	opt stack 0
   412  000005                     ___llmod@divisor:
   413                           	opt stack 0
   414                           
   415                           ; 4 bytes @ 0x4
   416  000005                     	ds	1
   417  000006                     ??___ftpack:
   418  000006                     ___awmod@sign:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x5
   422  000006                     	ds	1
   423  000007                     ??__tdiv_to_l_:
   424  000007                     ??___ftge:
   425  000007                     ?___awdiv:
   426                           	opt stack 0
   427  000007                     ___awdiv@dividend:
   428                           	opt stack 0
   429  000007                     __div_to_l_@quot:
   430                           	opt stack 0
   431                           
   432                           ; 4 bytes @ 0x6
   433  000007                     	ds	2
   434  000009                     ?___lltoft:
   435                           	opt stack 0
   436  000009                     ?___lwtoft:
   437                           	opt stack 0
   438  000009                     ___llmod@counter:
   439                           	opt stack 0
   440  000009                     ___awdiv@divisor:
   441                           	opt stack 0
   442  000009                     ___lwtoft@c:
   443                           	opt stack 0
   444  000009                     ___lldiv@quotient:
   445                           	opt stack 0
   446  000009                     ___lltoft@c:
   447                           	opt stack 0
   448                           
   449                           ; 4 bytes @ 0x8
   450  000009                     	ds	1
   451  00000A                     __tdiv_to_l_@quot:
   452                           	opt stack 0
   453                           
   454                           ; 4 bytes @ 0x9
   455  00000A                     	ds	1
   456  00000B                     ___awdiv@counter:
   457                           	opt stack 0
   458  00000B                     __div_to_l_@cntr:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0xA
   462  00000B                     	ds	1
   463  00000C                     ?___ftdiv:
   464                           	opt stack 0
   465  00000C                     ___awdiv@sign:
   466                           	opt stack 0
   467  00000C                     __div_to_l_@exp1:
   468                           	opt stack 0
   469  00000C                     ___ftdiv@f1:
   470                           	opt stack 0
   471                           
   472                           ; 3 bytes @ 0xB
   473  00000C                     	ds	1
   474  00000D                     ??___lltoft:
   475  00000D                     ___lldiv@counter:
   476                           	opt stack 0
   477  00000D                     ___awdiv@quotient:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0xC
   481  00000D                     	ds	1
   482  00000E                     __tdiv_to_l_@cntr:
   483                           	opt stack 0
   484                           
   485                           ; 1 bytes @ 0xD
   486  00000E                     	ds	1
   487  00000F                     ?___wmul:
   488                           	opt stack 0
   489  00000F                     __tdiv_to_l_@exp1:
   490                           	opt stack 0
   491  00000F                     ___wmul@multiplier:
   492                           	opt stack 0
   493  00000F                     ___ftdiv@f2:
   494                           	opt stack 0
   495                           
   496                           ; 3 bytes @ 0xE
   497  00000F                     	ds	2
   498  000011                     ___lltoft@exp:
   499                           	opt stack 0
   500  000011                     ___wmul@multiplicand:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x10
   504  000011                     	ds	1
   505  000012                     ??___ftdiv:
   506                           
   507                           ; 1 bytes @ 0x11
   508  000012                     	ds	1
   509  000013                     ___wmul@product:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x12
   513  000013                     	ds	2
   514  000015                     ___ftdiv@cntr:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x14
   518  000015                     	ds	1
   519  000016                     ___ftdiv@f3:
   520                           	opt stack 0
   521                           
   522                           ; 3 bytes @ 0x15
   523  000016                     	ds	3
   524  000019                     ___ftdiv@exp:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x18
   528  000019                     	ds	1
   529  00001A                     ___ftdiv@sign:
   530                           	opt stack 0
   531                           
   532                           ; 1 bytes @ 0x19
   533  00001A                     	ds	1
   534  00001B                     ?___ftmul:
   535                           	opt stack 0
   536  00001B                     ___ftmul@f1:
   537                           	opt stack 0
   538                           
   539                           ; 3 bytes @ 0x1A
   540  00001B                     	ds	3
   541  00001E                     ___ftmul@f2:
   542                           	opt stack 0
   543                           
   544                           ; 3 bytes @ 0x1D
   545  00001E                     	ds	3
   546  000021                     ??___ftmul:
   547                           
   548                           ; 1 bytes @ 0x20
   549  000021                     	ds	3
   550  000024                     ___ftmul@exp:
   551                           	opt stack 0
   552                           
   553                           ; 1 bytes @ 0x23
   554  000024                     	ds	1
   555  000025                     ___ftmul@f3_as_product:
   556                           	opt stack 0
   557                           
   558                           ; 3 bytes @ 0x24
   559  000025                     	ds	3
   560  000028                     ___ftmul@cntr:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0x27
   564  000028                     	ds	1
   565  000029                     ___ftmul@sign:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x28
   569  000029                     	ds	1
   570  00002A                     ?_fround:
   571                           	opt stack 0
   572  00002A                     ?_scale:
   573                           	opt stack 0
   574  00002A                     DHT22_read@dht_temperatura:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x29
   578  00002A                     	ds	2
   579  00002C                     DHT22_read@dht_humedad:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x2B
   583  00002C                     	ds	1
   584  00002D                     _fround$1021:
   585                           	opt stack 0
   586  00002D                     _scale$1022:
   587                           	opt stack 0
   588                           
   589                           ; 3 bytes @ 0x2C
   590  00002D                     	ds	1
   591  00002E                     ??_DHT22_read:
   592                           
   593                           ; 1 bytes @ 0x2D
   594  00002E                     	ds	2
   595  000030                     scale@scl:
   596                           	opt stack 0
   597  000030                     DHT22_read@rawhumidity:
   598                           	opt stack 0
   599  000030                     _fround$1020:
   600                           	opt stack 0
   601                           
   602                           ; 3 bytes @ 0x2F
   603  000030                     	ds	1
   604  000031                     ?___fttol:
   605                           	opt stack 0
   606  000031                     ___fttol@f1:
   607                           	opt stack 0
   608                           
   609                           ; 3 bytes @ 0x30
   610  000031                     	ds	1
   611  000032                     DHT22_read@result:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x31
   615  000032                     	ds	1
   616  000033                     fround@prec:
   617                           	opt stack 0
   618  000033                     DHT22_read@bits:
   619                           	opt stack 0
   620                           
   621                           ; 5 bytes @ 0x32
   622  000033                     	ds	1
   623  000034                     ?___ftadd:
   624                           	opt stack 0
   625  000034                     ___ftadd@f1:
   626                           	opt stack 0
   627                           
   628                           ; 3 bytes @ 0x33
   629  000034                     	ds	1
   630  000035                     ??___fttol:
   631                           
   632                           ; 1 bytes @ 0x34
   633  000035                     	ds	2
   634  000037                     ___ftadd@f2:
   635                           	opt stack 0
   636                           
   637                           ; 3 bytes @ 0x36
   638  000037                     	ds	1
   639  000038                     DHT22_read@rawtemperature:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x37
   643  000038                     	ds	2
   644  00003A                     ??___ftadd:
   645  00003A                     DHT22_read@i:
   646                           	opt stack 0
   647  00003A                     ___fttol@sign1:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0x39
   651  00003A                     	ds	1
   652  00003B                     DHT22_read@j:
   653                           	opt stack 0
   654  00003B                     ___fttol@lval:
   655                           	opt stack 0
   656                           
   657                           ; 4 bytes @ 0x3A
   658  00003B                     	ds	2
   659  00003D                     ___ftadd@sign:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x3C
   663  00003D                     	ds	1
   664  00003E                     ___ftadd@exp2:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x3D
   668  00003E                     	ds	1
   669  00003F                     ___ftadd@exp1:
   670                           	opt stack 0
   671  00003F                     ___fttol@exp1:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x3E
   675  00003F                     	ds	1
   676  000040                     ?___ftsub:
   677                           	opt stack 0
   678  000040                     ___ftsub@f1:
   679                           	opt stack 0
   680                           
   681                           ; 3 bytes @ 0x3F
   682  000040                     	ds	3
   683  000043                     ___ftsub@f2:
   684                           	opt stack 0
   685                           
   686                           ; 3 bytes @ 0x42
   687  000043                     	ds	3
   688  000046                     ?_printf:
   689                           	opt stack 0
   690  000046                     printf@f:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x45
   694  000046                     	ds	5
   695  00004B                     ??_printf:
   696                           
   697                           ; 1 bytes @ 0x4A
   698  00004B                     	ds	6
   699  000051                     ??_main:
   700                           
   701                           ; 1 bytes @ 0x50
   702  000051                     	ds	2
   703  000053                     main@status:
   704                           	opt stack 0
   705                           
   706                           ; 1 bytes @ 0x52
   707  000053                     	ds	1
   708  000054                     main@humedad:
   709                           	opt stack 0
   710                           
   711                           ; 3 bytes @ 0x53
   712  000054                     	ds	3
   713  000057                     main@temperatura:
   714                           	opt stack 0
   715                           
   716                           ; 3 bytes @ 0x56
   717  000057                     	ds	3
   718                           tblptru	equ	0xFF8
   719                           postinc0	equ	0xFEE
   720                           wreg	equ	0xFE8
   721                           
   722 ;;
   723 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   724 ;;
   725 ;; *************** function _main *****************
   726 ;; Defined at:
   727 ;;		line 70 in file "main.c"
   728 ;; Parameters:    Size  Location     Type
   729 ;;		None
   730 ;; Auto vars:     Size  Location     Type
   731 ;;  status          1   82[COMRAM] unsigned char 
   732 ;;  temperatura     3   86[COMRAM] float 
   733 ;;  humedad         3   83[COMRAM] float 
   734 ;; Return value:  Size  Location     Type
   735 ;;                  1    wreg      void 
   736 ;; Registers used:
   737 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   738 ;; Tracked objects:
   739 ;;		On entry : 0/0
   740 ;;		On exit  : 0/0
   741 ;;		Unchanged: 0/0
   742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   743 ;;      Params:         0       0       0       0       0       0       0       0       0
   744 ;;      Locals:         7       0       0       0       0       0       0       0       0
   745 ;;      Temps:          2       0       0       0       0       0       0       0       0
   746 ;;      Totals:         9       0       0       0       0       0       0       0       0
   747 ;;Total ram usage:        9 bytes
   748 ;; Hardware stack levels required when called:    4
   749 ;; This function calls:
   750 ;;		_DHT22_init
   751 ;;		_DHT22_read
   752 ;;		_LCD_clear
   753 ;;		_LCD_init
   754 ;;		_LCD_printf
   755 ;;		_LCD_segunda_linea
   756 ;;		_printf
   757 ;; This function is called by:
   758 ;;		Startup code after reset
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762                           	psect	text0
   763  002124                     __ptext0:
   764                           	opt stack 0
   765  002124                     _main:
   766                           	opt stack 27
   767                           
   768                           ;main.c: 72: float temperatura;
   769                           ;main.c: 73: float humedad;
   770                           ;main.c: 75: DHT22_init();
   771                           
   772                           ;incstack = 0
   773  002124  EC06  F013         	call	_DHT22_init	;wreg free
   774                           
   775                           ;main.c: 76: LCD_init();
   776  002128  EC51  F012         	call	_LCD_init	;wreg free
   777  00212C                     
   778                           ;main.c: 82: uint8_t status = DHT22_read(&temperatura, &humedad);
   779  00212C  0E57               	movlw	low main@temperatura
   780  00212E  6E2A               	movwf	DHT22_read@dht_temperatura,c
   781  002130  0E00               	movlw	high main@temperatura
   782  002132  6E2B               	movwf	DHT22_read@dht_temperatura+1,c
   783  002134  0E54               	movlw	low main@humedad
   784  002136  6E2C               	movwf	DHT22_read@dht_humedad,c
   785  002138  0E00               	movlw	high main@humedad
   786  00213A  6E2D               	movwf	DHT22_read@dht_humedad+1,c
   787  00213C  EC9F  F00B         	call	_DHT22_read	;wreg free
   788  002140  6E53               	movwf	main@status,c
   789                           
   790                           ;main.c: 83: if(status==1){
   791  002142  0453               	decf	main@status,w,c
   792  002144  A4D8               	btfss	status,2,c
   793  002146  D01D               	goto	l46
   794                           
   795                           ;main.c: 84: LCD_clear();
   796  002148  ECE6  F012         	call	_LCD_clear	;wreg free
   797                           
   798                           ;main.c: 85: printf("  Temp. %2.2f", temperatura);
   799  00214C  0E85               	movlw	low STR_1
   800  00214E  6E46               	movwf	printf@f,c
   801  002150  0E08               	movlw	high STR_1
   802  002152  6E47               	movwf	printf@f+1,c
   803  002154  C057  F048         	movff	main@temperatura,?_printf+2
   804  002158  C058  F049         	movff	main@temperatura+1,?_printf+3
   805  00215C  C059  F04A         	movff	main@temperatura+2,?_printf+4
   806  002160  EC4D  F004         	call	_printf	;wreg free
   807                           
   808                           ;main.c: 86: LCD_segunda_linea();
   809  002164  EC02  F013         	call	_LCD_segunda_linea	;wreg free
   810                           
   811                           ;main.c: 87: printf("  Hume. %2.2f", humedad);
   812  002168  0E77               	movlw	low STR_2
   813  00216A  6E46               	movwf	printf@f,c
   814  00216C  0E08               	movlw	high STR_2
   815  00216E  6E47               	movwf	printf@f+1,c
   816  002170  C054  F048         	movff	main@humedad,?_printf+2
   817  002174  C055  F049         	movff	main@humedad+1,?_printf+3
   818  002178  C056  F04A         	movff	main@humedad+2,?_printf+4
   819  00217C  EC4D  F004         	call	_printf	;wreg free
   820                           
   821                           ;main.c: 89: }else{
   822  002180  D008               	goto	l47
   823  002182                     l46:
   824                           
   825                           ;main.c: 90: LCD_clear();
   826  002182  ECE6  F012         	call	_LCD_clear	;wreg free
   827                           
   828                           ;main.c: 91: LCD_printf("error");
   829  002186  0E93               	movlw	low STR_3
   830  002188  6E03               	movwf	LCD_printf@dato,c
   831  00218A  0E08               	movlw	high STR_3
   832  00218C  6E04               	movwf	LCD_printf@dato+1,c
   833  00218E  EC28  F012         	call	_LCD_printf	;wreg free
   834  002192                     l47:
   835                           
   836                           ;main.c: 92: }
   837                           ;main.c: 93: _delay((unsigned long)((2000)*(20000000/4000.0)));
   838  002192  0E33               	movlw	51
   839  002194  6E52               	movwf	(??_main+1)& (0+255),c
   840  002196  0EBB               	movlw	187
   841  002198  6E51               	movwf	??_main& (0+255),c
   842  00219A  0EE0               	movlw	224
   843  00219C                     u3537:
   844  00219C  2EE8               	decfsz	wreg,f,c
   845  00219E  D7FE               	bra	u3537
   846  0021A0  2E51               	decfsz	??_main& (0+255),f,c
   847  0021A2  D7FC               	bra	u3537
   848  0021A4  2E52               	decfsz	(??_main+1)& (0+255),f,c
   849  0021A6  D7FA               	bra	u3537
   850  0021A8  D7C1               	goto	l45
   851  0021AA                     __end_of_main:
   852                           	opt stack 0
   853                           tblptru	equ	0xFF8
   854                           postinc0	equ	0xFEE
   855                           wreg	equ	0xFE8
   856                           status	equ	0xFD8
   857                           
   858 ;; *************** function _printf *****************
   859 ;; Defined at:
   860 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
   861 ;; Parameters:    Size  Location     Type
   862 ;;  f               2   69[COMRAM] PTR const unsigned char 
   863 ;;		 -> STR_2(14), STR_1(14), 
   864 ;; Auto vars:     Size  Location     Type
   865 ;;  tmpval          4   13[BANK0 ] struct .
   866 ;;  val             4    5[BANK0 ] unsigned long 
   867 ;;  fval            3   19[BANK0 ] unsigned long 
   868 ;;  cp              3    0        PTR const unsigned char 
   869 ;;  prec            2   22[BANK0 ] int 
   870 ;;  exp             2   17[BANK0 ] int 
   871 ;;  width           2   11[BANK0 ] int 
   872 ;;  flag            2    9[BANK0 ] unsigned short 
   873 ;;  ap              2    3[BANK0 ] PTR void [1]
   874 ;;		 -> ?_printf(2), 
   875 ;;  len             2    0        unsigned int 
   876 ;;  c               1   24[BANK0 ] char 
   877 ;;  d               1    0        unsigned char 
   878 ;; Return value:  Size  Location     Type
   879 ;;                  2   69[COMRAM] int 
   880 ;; Registers used:
   881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   882 ;; Tracked objects:
   883 ;;		On entry : 0/0
   884 ;;		On exit  : 0/0
   885 ;;		Unchanged: 0/0
   886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   887 ;;      Params:         5       0       0       0       0       0       0       0       0
   888 ;;      Locals:         0      25       0       0       0       0       0       0       0
   889 ;;      Temps:          6       0       0       0       0       0       0       0       0
   890 ;;      Totals:        11      25       0       0       0       0       0       0       0
   891 ;;Total ram usage:       36 bytes
   892 ;; Hardware stack levels used:    1
   893 ;; Hardware stack levels required when called:    3
   894 ;; This function calls:
   895 ;;		___awdiv
   896 ;;		___ftadd
   897 ;;		___ftge
   898 ;;		___ftmul
   899 ;;		___ftneg
   900 ;;		___ftsub
   901 ;;		___fttol
   902 ;;		___lldiv
   903 ;;		___llmod
   904 ;;		___lltoft
   905 ;;		___wmul
   906 ;;		__div_to_l_
   907 ;;		__tdiv_to_l_
   908 ;;		_fround
   909 ;;		_isdigit
   910 ;;		_putch
   911 ;;		_scale
   912 ;; This function is called by:
   913 ;;		_main
   914 ;; This function uses a non-reentrant model
   915 ;;
   916                           
   917                           	psect	text1
   918  00089A                     __ptext1:
   919                           	opt stack 0
   920  00089A                     _printf:
   921                           	opt stack 27
   922                           
   923                           ;doprnt.c: 466: va_list ap;
   924                           ;doprnt.c: 499: signed char c;
   925                           ;doprnt.c: 501: int width;
   926                           ;doprnt.c: 504: int prec;
   927                           ;doprnt.c: 508: unsigned short flag;
   928                           ;doprnt.c: 515: char d;
   929                           ;doprnt.c: 516: double fval;
   930                           ;doprnt.c: 517: int exp;
   931                           ;doprnt.c: 523: union {
   932                           ;doprnt.c: 524: unsigned long vd;
   933                           ;doprnt.c: 525: double integ;
   934                           ;doprnt.c: 526: } tmpval;
   935                           ;doprnt.c: 528: unsigned long val;
   936                           ;doprnt.c: 529: unsigned len;
   937                           ;doprnt.c: 530: const char * cp;
   938                           ;doprnt.c: 533: *ap = __va_start();
   939                           
   940                           ;incstack = 0
   941  00089A  0E48               	movlw	low (?_printf+2)
   942  00089C  0100               	movlb	0	; () banked
   943  00089E  6F63               	movwf	printf@ap& (0+255),b
   944  0008A0  0E00               	movlw	high (?_printf+2)
   945  0008A2  6F64               	movwf	(printf@ap+1)& (0+255),b
   946                           
   947                           ;doprnt.c: 536: while(c = *f++) {
   948  0008A4  EF63  F008         	goto	l246
   949  0008A8                     
   950                           ; BSR set to: 0
   951                           ;doprnt.c: 538: if(c != '%')
   952                           
   953                           ; BSR set to: 0
   954  0008A8  0E25               	movlw	37
   955  0008AA  1978               	xorwf	printf@c& (0+255),w,b
   956  0008AC  B4D8               	btfsc	status,2,c
   957  0008AE  D005               	goto	l175
   958                           
   959                           ; BSR set to: 0
   960                           ;doprnt.c: 540: {
   961                           ;doprnt.c: 541: (putch(c) );
   962  0008B0  5178               	movf	printf@c& (0+255),w,b
   963  0008B2  ECFD  F012         	call	_putch
   964                           
   965                           ;doprnt.c: 542: continue;
   966  0008B6  EF63  F008         	goto	l246
   967  0008BA                     l175:
   968                           
   969                           ;doprnt.c: 543: }
   970                           ;doprnt.c: 546: width = 0;
   971  0008BA  0E00               	movlw	0
   972  0008BC  0100               	movlb	0	; () banked
   973  0008BE  6F6C               	movwf	(printf@width+1)& (0+255),b
   974  0008C0  0E00               	movlw	0
   975  0008C2  6F6B               	movwf	printf@width& (0+255),b
   976                           
   977                           ;doprnt.c: 548: flag = 0;
   978  0008C4  0E00               	movlw	0
   979  0008C6  6F6A               	movwf	(printf@flag+1)& (0+255),b
   980  0008C8  0E00               	movlw	0
   981  0008CA  6F69               	movwf	printf@flag& (0+255),b
   982                           
   983                           ; BSR set to: 0
   984                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   985  0008CC  C046  FFF6         	movff	printf@f,tblptrl
   986  0008D0  C047  FFF7         	movff	printf@f+1,tblptrh
   987  0008D4                     	if	0	;tblptru may be non-zero
   988  0008D4                     	endif
   989  0008D4                     	if	0	;tblptru may be non-zero
   990  0008D4                     	endif
   991  0008D4  0008               	tblrd		*
   992  0008D6  50F5               	movf	tablat,w,c
   993  0008D8  ECCC  F012         	call	_isdigit
   994  0008DC  A0D8               	btfss	status,0,c
   995  0008DE  D034               	goto	u2910
   996                           
   997                           ;doprnt.c: 598: width = 0;
   998  0008E0  0E00               	movlw	0
   999  0008E2  0100               	movlb	0	; () banked
  1000  0008E4  6F6C               	movwf	(printf@width+1)& (0+255),b
  1001  0008E6  0E00               	movlw	0
  1002  0008E8  6F6B               	movwf	printf@width& (0+255),b
  1003  0008EA                     
  1004                           ;doprnt.c: 600: width *= 10;
  1005                           
  1006                           ; BSR set to: 0
  1007  0008EA  C06B  F00F         	movff	printf@width,___wmul@multiplier
  1008  0008EE  C06C  F010         	movff	printf@width+1,___wmul@multiplier+1
  1009  0008F2  0E00               	movlw	0
  1010  0008F4  6E12               	movwf	___wmul@multiplicand+1,c
  1011  0008F6  0E0A               	movlw	10
  1012  0008F8  6E11               	movwf	___wmul@multiplicand,c
  1013  0008FA  EC95  F012         	call	___wmul	;wreg free
  1014  0008FE  C00F  F06B         	movff	?___wmul,printf@width
  1015  000902  C010  F06C         	movff	?___wmul+1,printf@width+1
  1016                           
  1017                           ;doprnt.c: 601: width += *f++ - '0';
  1018  000906  0ED0               	movlw	208
  1019  000908  6E4B               	movwf	??_printf& (0+255),c
  1020  00090A  0EFF               	movlw	255
  1021  00090C  6E4C               	movwf	(??_printf+1)& (0+255),c
  1022  00090E  C046  FFF6         	movff	printf@f,tblptrl
  1023  000912  C047  FFF7         	movff	printf@f+1,tblptrh
  1024  000916                     	if	0	;tblptru may be non-zero
  1025  000916                     	endif
  1026  000916                     	if	0	;tblptru may be non-zero
  1027  000916                     	endif
  1028  000916  0008               	tblrd		*
  1029  000918  50F5               	movf	tablat,w,c
  1030  00091A  6E4D               	movwf	(??_printf+2)& (0+255),c
  1031  00091C  6A4E               	clrf	(??_printf+3)& (0+255),c
  1032  00091E  504B               	movf	??_printf,w,c
  1033  000920  264D               	addwf	??_printf+2,f,c
  1034  000922  504C               	movf	??_printf+1,w,c
  1035  000924  224E               	addwfc	??_printf+3,f,c
  1036  000926  504D               	movf	??_printf+2,w,c
  1037  000928  0100               	movlb	0	; () banked
  1038  00092A  276B               	addwf	printf@width& (0+255),f,b
  1039  00092C  504E               	movf	??_printf+3,w,c
  1040  00092E  236C               	addwfc	(printf@width+1)& (0+255),f,b
  1041                           
  1042                           ; BSR set to: 0
  1043  000930  4A46               	infsnz	printf@f,f,c
  1044  000932  2A47               	incf	printf@f+1,f,c
  1045                           
  1046                           ; BSR set to: 0
  1047                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1048  000934  C046  FFF6         	movff	printf@f,tblptrl
  1049  000938  C047  FFF7         	movff	printf@f+1,tblptrh
  1050  00093C                     	if	0	;tblptru may be non-zero
  1051  00093C                     	endif
  1052  00093C                     	if	0	;tblptru may be non-zero
  1053  00093C                     	endif
  1054  00093C  0008               	tblrd		*
  1055  00093E  50F5               	movf	tablat,w,c
  1056  000940  ECCC  F012         	call	_isdigit
  1057  000944  B0D8               	btfsc	status,0,c
  1058  000946  D7D1               	goto	l177
  1059  000948                     u2910:
  1060                           
  1061                           ;doprnt.c: 608: }
  1062                           ;doprnt.c: 611: if(*f == '.') {
  1063  000948  C046  FFF6         	movff	printf@f,tblptrl
  1064  00094C  C047  FFF7         	movff	printf@f+1,tblptrh
  1065  000950                     	if	0	;tblptru may be non-zero
  1066  000950                     	endif
  1067  000950                     	if	0	;tblptru may be non-zero
  1068  000950                     	endif
  1069  000950  0008               	tblrd		*
  1070  000952  50F5               	movf	tablat,w,c
  1071  000954  0A2E               	xorlw	46
  1072  000956  A4D8               	btfss	status,2,c
  1073  000958  D030               	goto	l179
  1074                           
  1075                           ;doprnt.c: 612: flag |= 0x4000;
  1076  00095A  0100               	movlb	0	; () banked
  1077  00095C  8D6A               	bsf	(printf@flag+1)& (0+255),6,b
  1078                           
  1079                           ;doprnt.c: 613: f++;
  1080  00095E  4A46               	infsnz	printf@f,f,c
  1081  000960  2A47               	incf	printf@f+1,f,c
  1082                           
  1083                           ; BSR set to: 0
  1084                           ;doprnt.c: 620: {
  1085                           ;doprnt.c: 621: prec = 0;
  1086  000962  0E00               	movlw	0
  1087  000964  6F77               	movwf	(printf@prec+1)& (0+255),b
  1088  000966  0E00               	movlw	0
  1089  000968  6F76               	movwf	printf@prec& (0+255),b
  1090                           
  1091                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1092  00096A  D01C               	goto	l180
  1093  00096C                     
  1094                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1095                           
  1096                           ; BSR set to: 0
  1097  00096C  C076  F00F         	movff	printf@prec,___wmul@multiplier
  1098  000970  C077  F010         	movff	printf@prec+1,___wmul@multiplier+1
  1099  000974  0E00               	movlw	0
  1100  000976  6E12               	movwf	___wmul@multiplicand+1,c
  1101  000978  0E0A               	movlw	10
  1102  00097A  6E11               	movwf	___wmul@multiplicand,c
  1103  00097C  EC95  F012         	call	___wmul	;wreg free
  1104  000980  C046  FFF6         	movff	printf@f,tblptrl
  1105  000984  C047  FFF7         	movff	printf@f+1,tblptrh
  1106  000988                     	if	0	;tblptru may be non-zero
  1107  000988                     	endif
  1108  000988                     	if	0	;tblptru may be non-zero
  1109  000988                     	endif
  1110  000988  0008               	tblrd		*
  1111  00098A  50F5               	movf	tablat,w,c
  1112  00098C  260F               	addwf	?___wmul,f,c
  1113  00098E  0E00               	movlw	0
  1114  000990  2210               	addwfc	?___wmul+1,f,c
  1115  000992  0ED0               	movlw	208
  1116  000994  240F               	addwf	?___wmul,w,c
  1117  000996  0100               	movlb	0	; () banked
  1118  000998  6F76               	movwf	printf@prec& (0+255),b
  1119  00099A  0EFF               	movlw	255
  1120  00099C  2010               	addwfc	?___wmul+1,w,c
  1121  00099E  6F77               	movwf	(printf@prec+1)& (0+255),b
  1122                           
  1123                           ; BSR set to: 0
  1124  0009A0  4A46               	infsnz	printf@f,f,c
  1125  0009A2  2A47               	incf	printf@f+1,f,c
  1126  0009A4                     l180:
  1127                           
  1128                           ; BSR set to: 0
  1129                           
  1130                           ; BSR set to: 0
  1131  0009A4  C046  FFF6         	movff	printf@f,tblptrl
  1132  0009A8  C047  FFF7         	movff	printf@f+1,tblptrh
  1133  0009AC                     	if	0	;tblptru may be non-zero
  1134  0009AC                     	endif
  1135  0009AC                     	if	0	;tblptru may be non-zero
  1136  0009AC                     	endif
  1137  0009AC  0008               	tblrd		*
  1138  0009AE  50F5               	movf	tablat,w,c
  1139  0009B0  ECCC  F012         	call	_isdigit
  1140  0009B4  A0D8               	btfss	status,0,c
  1141  0009B6  D00A               	goto	l184
  1142  0009B8  D7D9               	goto	l181
  1143  0009BA                     l179:
  1144                           
  1145                           ;doprnt.c: 626: prec = 0;
  1146  0009BA  0E00               	movlw	0
  1147  0009BC  0100               	movlb	0	; () banked
  1148  0009BE  6F77               	movwf	(printf@prec+1)& (0+255),b
  1149  0009C0  0E00               	movlw	0
  1150  0009C2  6F76               	movwf	printf@prec& (0+255),b
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;doprnt.c: 628: flag |= 0x1000;
  1154  0009C4  896A               	bsf	(printf@flag+1)& (0+255),4,b
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;doprnt.c: 630: }
  1158                           ;doprnt.c: 635: switch(c = *f++) {
  1159  0009C6  D002               	goto	l184
  1160  0009C8                     
  1161                           ; BSR set to: 0
  1162                           ;doprnt.c: 663: flag |= 0x400;
  1163                           
  1164                           ; BSR set to: 0
  1165  0009C8  856A               	bsf	(printf@flag+1)& (0+255),2,b
  1166                           
  1167                           ;doprnt.c: 664: break;
  1168  0009CA  D012               	goto	l188
  1169  0009CC                     l184:
  1170                           
  1171                           ; BSR set to: 0
  1172  0009CC  C046  FFF6         	movff	printf@f,tblptrl
  1173  0009D0  C047  FFF7         	movff	printf@f+1,tblptrh
  1174  0009D4  4A46               	infsnz	printf@f,f,c
  1175  0009D6  2A47               	incf	printf@f+1,f,c
  1176  0009D8                     	if	0	;tblptru may be non-zero
  1177  0009D8                     	endif
  1178  0009D8                     	if	0	;tblptru may be non-zero
  1179  0009D8                     	endif
  1180  0009D8  0008               	tblrd		*
  1181  0009DA  CFF5 F078          	movff	tablat,printf@c
  1182  0009DE  0100               	movlb	0	; () banked
  1183  0009E0  5178               	movf	printf@c& (0+255),w,b
  1184                           
  1185                           ; Switch size 1, requested type "space"
  1186                           ; Number of cases is 2, Range of values is 0 to 102
  1187                           ; switch strategies available:
  1188                           ; Name         Instructions Cycles
  1189                           ; simple_byte            7     4 (average)
  1190                           ;	Chosen strategy is simple_byte
  1191  0009E2  0A00               	xorlw	0	; case 0
  1192  0009E4  B4D8               	btfsc	status,2,c
  1193  0009E6  0012               	return	
  1194  0009E8  0A66               	xorlw	102	; case 102
  1195  0009EA  B4D8               	btfsc	status,2,c
  1196  0009EC  D7ED               	goto	l187
  1197  0009EE  D36B               	goto	l246
  1198  0009F0                     l188:
  1199                           
  1200                           ; BSR set to: 0
  1201                           ;doprnt.c: 825: if(flag & (0x700)) {
  1202                           
  1203                           ; BSR set to: 0
  1204  0009F0  0E07               	movlw	7
  1205  0009F2  156A               	andwf	(printf@flag+1)& (0+255),w,b
  1206  0009F4  B4D8               	btfsc	status,2,c
  1207  0009F6  D2E5               	goto	l190
  1208                           
  1209                           ; BSR set to: 0
  1210                           ;doprnt.c: 827: if(flag & 0x1000)
  1211  0009F8  A96A               	btfss	(printf@flag+1)& (0+255),4,b
  1212  0009FA  D004               	goto	l191
  1213                           
  1214                           ; BSR set to: 0
  1215                           ;doprnt.c: 829: prec = 6;
  1216  0009FC  0E00               	movlw	0
  1217  0009FE  6F77               	movwf	(printf@prec+1)& (0+255),b
  1218  000A00  0E06               	movlw	6
  1219  000A02  6F76               	movwf	printf@prec& (0+255),b
  1220  000A04                     l191:
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1224                           
  1225                           ; BSR set to: 0
  1226  000A04  C063  FFD9         	movff	printf@ap,fsr2l
  1227  000A08  C064  FFDA         	movff	printf@ap+1,fsr2h
  1228  000A0C  CFDE F073          	movff	postinc2,printf@fval
  1229  000A10  CFDE F074          	movff	postinc2,printf@fval+1
  1230  000A14  CFDD F075          	movff	postdec2,printf@fval+2
  1231                           
  1232                           ; BSR set to: 0
  1233  000A18  0E03               	movlw	3
  1234  000A1A  2763               	addwf	printf@ap& (0+255),f,b
  1235  000A1C  0E00               	movlw	0
  1236  000A1E  2364               	addwfc	(printf@ap+1)& (0+255),f,b
  1237                           
  1238                           ; BSR set to: 0
  1239                           ;doprnt.c: 831: if(fval < 0.0) {
  1240  000A20  AF75               	btfss	(printf@fval+2)& (0+255),7,b
  1241  000A22  D011               	goto	l192
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;doprnt.c: 832: fval = -fval;
  1245  000A24  C073  F001         	movff	printf@fval,___ftneg@f1
  1246  000A28  C074  F002         	movff	printf@fval+1,___ftneg@f1+1
  1247  000A2C  C075  F003         	movff	printf@fval+2,___ftneg@f1+2
  1248  000A30  ECA8  F012         	call	___ftneg	;wreg free
  1249  000A34  C001  F073         	movff	?___ftneg,printf@fval
  1250  000A38  C002  F074         	movff	?___ftneg+1,printf@fval+1
  1251  000A3C  C003  F075         	movff	?___ftneg+2,printf@fval+2
  1252                           
  1253                           ;doprnt.c: 833: flag |= 0x03;
  1254  000A40  0E03               	movlw	3
  1255  000A42  0100               	movlb	0	; () banked
  1256  000A44  1369               	iorwf	printf@flag& (0+255),f,b
  1257  000A46                     l192:
  1258                           
  1259                           ; BSR set to: 0
  1260                           ;doprnt.c: 834: }
  1261                           ;doprnt.c: 835: exp = 0;
  1262                           
  1263                           ; BSR set to: 0
  1264  000A46  0E00               	movlw	0
  1265  000A48  6F72               	movwf	(printf@exp+1)& (0+255),b
  1266  000A4A  0E00               	movlw	0
  1267  000A4C  6F71               	movwf	printf@exp& (0+255),b
  1268                           
  1269                           ; BSR set to: 0
  1270                           ;doprnt.c: 836: if( fval!=0) {
  1271  000A4E  5173               	movf	printf@fval& (0+255),w,b
  1272  000A50  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  1273  000A52  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  1274  000A54  B4D8               	btfsc	status,2,c
  1275  000A56  D086               	goto	l197
  1276                           
  1277                           ; BSR set to: 0
  1278                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1279  000A58  0E82               	movlw	130
  1280  000A5A  6E4B               	movwf	??_printf& (0+255),c
  1281  000A5C  0EFF               	movlw	255
  1282  000A5E  6E4C               	movwf	(??_printf+1)& (0+255),c
  1283  000A60  C073  F04D         	movff	printf@fval,??_printf+2
  1284  000A64  C074  F04E         	movff	printf@fval+1,??_printf+3
  1285  000A68  C075  F04F         	movff	printf@fval+2,??_printf+4
  1286  000A6C  C076  F050         	movff	printf@fval+3,??_printf+5
  1287  000A70  0E10               	movlw	16
  1288  000A72  D005               	goto	u2980
  1289  000A74                     u2985:
  1290  000A74  90D8               	bcf	status,0,c
  1291  000A76  3250               	rrcf	??_printf+5,f,c
  1292  000A78  324F               	rrcf	??_printf+4,f,c
  1293  000A7A  324E               	rrcf	??_printf+3,f,c
  1294  000A7C  324D               	rrcf	??_printf+2,f,c
  1295  000A7E                     u2980:
  1296  000A7E  2EE8               	decfsz	wreg,f,c
  1297  000A80  D7F9               	goto	u2985
  1298  000A82  504D               	movf	??_printf+2,w,c
  1299  000A84  244B               	addwf	??_printf,w,c
  1300  000A86  6F71               	movwf	printf@exp& (0+255),b
  1301  000A88  0E00               	movlw	0
  1302  000A8A  204C               	addwfc	??_printf+1,w,c
  1303  000A8C  6F72               	movwf	(printf@exp+1)& (0+255),b
  1304                           
  1305                           ; BSR set to: 0
  1306                           ;doprnt.c: 838: exp--;
  1307  000A8E  0771               	decf	printf@exp& (0+255),f,b
  1308  000A90  A0D8               	btfss	status,0,c
  1309  000A92  0772               	decf	(printf@exp+1)& (0+255),f,b
  1310                           
  1311                           ; BSR set to: 0
  1312                           ;doprnt.c: 839: exp *= 3;
  1313  000A94  C071  F00F         	movff	printf@exp,___wmul@multiplier
  1314  000A98  C072  F010         	movff	printf@exp+1,___wmul@multiplier+1
  1315  000A9C  0E00               	movlw	0
  1316  000A9E  6E12               	movwf	___wmul@multiplicand+1,c
  1317  000AA0  0E03               	movlw	3
  1318  000AA2  6E11               	movwf	___wmul@multiplicand,c
  1319  000AA4  EC95  F012         	call	___wmul	;wreg free
  1320  000AA8  C00F  F071         	movff	?___wmul,printf@exp
  1321  000AAC  C010  F072         	movff	?___wmul+1,printf@exp+1
  1322                           
  1323                           ;doprnt.c: 840: exp /= 10;
  1324  000AB0  C071  F007         	movff	printf@exp,___awdiv@dividend
  1325  000AB4  C072  F008         	movff	printf@exp+1,___awdiv@dividend+1
  1326  000AB8  0E00               	movlw	0
  1327  000ABA  6E0A               	movwf	___awdiv@divisor+1,c
  1328  000ABC  0E0A               	movlw	10
  1329  000ABE  6E09               	movwf	___awdiv@divisor,c
  1330  000AC0  ECD5  F010         	call	___awdiv	;wreg free
  1331  000AC4  C007  F071         	movff	?___awdiv,printf@exp
  1332  000AC8  C008  F072         	movff	?___awdiv+1,printf@exp+1
  1333                           
  1334                           ;doprnt.c: 841: if(exp < 0)
  1335  000ACC  0100               	movlb	0	; () banked
  1336  000ACE  AF72               	btfss	(printf@exp+1)& (0+255),7,b
  1337  000AD0  D003               	goto	l194
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;doprnt.c: 842: exp--;
  1341  000AD2  0771               	decf	printf@exp& (0+255),f,b
  1342  000AD4  A0D8               	btfss	status,0,c
  1343  000AD6  0772               	decf	(printf@exp+1)& (0+255),f,b
  1344  000AD8                     l194:
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1348                           
  1349                           ; BSR set to: 0
  1350  000AD8  5171               	movf	printf@exp& (0+255),w,b
  1351  000ADA  0800               	sublw	0
  1352  000ADC  EC72  F008         	call	_scale
  1353  000AE0  C02A  F06D         	movff	?_scale,printf@tmpval
  1354  000AE4  C02B  F06E         	movff	?_scale+1,printf@tmpval+1
  1355  000AE8  C02C  F06F         	movff	?_scale+2,printf@tmpval+2
  1356                           
  1357                           ;doprnt.c: 847: tmpval.integ *= fval;
  1358  000AEC  C06D  F01B         	movff	printf@tmpval,___ftmul@f1
  1359  000AF0  C06E  F01C         	movff	printf@tmpval+1,___ftmul@f1+1
  1360  000AF4  C06F  F01D         	movff	printf@tmpval+2,___ftmul@f1+2
  1361  000AF8  C073  F01E         	movff	printf@fval,___ftmul@f2
  1362  000AFC  C074  F01F         	movff	printf@fval+1,___ftmul@f2+1
  1363  000B00  C075  F020         	movff	printf@fval+2,___ftmul@f2+2
  1364  000B04  EC06  F00F         	call	___ftmul	;wreg free
  1365  000B08  C01B  F06D         	movff	?___ftmul,printf@tmpval
  1366  000B0C  C01C  F06E         	movff	?___ftmul+1,printf@tmpval+1
  1367  000B10  C01D  F06F         	movff	?___ftmul+2,printf@tmpval+2
  1368                           
  1369                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1370  000B14  C06D  F001         	movff	printf@tmpval,___ftge@ff1
  1371  000B18  C06E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1372  000B1C  C06F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1373  000B20  0E00               	movlw	0
  1374  000B22  6E04               	movwf	___ftge@ff2,c
  1375  000B24  0E80               	movlw	128
  1376  000B26  6E05               	movwf	___ftge@ff2+1,c
  1377  000B28  0E3F               	movlw	63
  1378  000B2A  6E06               	movwf	___ftge@ff2+2,c
  1379  000B2C  EC4A  F010         	call	___ftge	;wreg free
  1380  000B30  B0D8               	btfsc	status,0,c
  1381  000B32  D005               	goto	l195
  1382                           
  1383                           ;doprnt.c: 849: exp--;
  1384  000B34  0100               	movlb	0	; () banked
  1385  000B36  0771               	decf	printf@exp& (0+255),f,b
  1386  000B38  A0D8               	btfss	status,0,c
  1387  000B3A  0772               	decf	(printf@exp+1)& (0+255),f,b
  1388  000B3C  D013               	goto	l197
  1389  000B3E                     l195:
  1390                           
  1391                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1392                           
  1393                           ; BSR set to: 0
  1394  000B3E  C06D  F001         	movff	printf@tmpval,___ftge@ff1
  1395  000B42  C06E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1396  000B46  C06F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1397  000B4A  0E00               	movlw	0
  1398  000B4C  6E04               	movwf	___ftge@ff2,c
  1399  000B4E  0E20               	movlw	32
  1400  000B50  6E05               	movwf	___ftge@ff2+1,c
  1401  000B52  0E41               	movlw	65
  1402  000B54  6E06               	movwf	___ftge@ff2+2,c
  1403  000B56  EC4A  F010         	call	___ftge	;wreg free
  1404  000B5A  A0D8               	btfss	status,0,c
  1405  000B5C  D003               	goto	l197
  1406                           
  1407                           ;doprnt.c: 851: exp++;
  1408  000B5E  0100               	movlb	0	; () banked
  1409  000B60  4B71               	infsnz	printf@exp& (0+255),f,b
  1410  000B62  2B72               	incf	(printf@exp+1)& (0+255),f,b
  1411  000B64                     l197:
  1412                           
  1413                           ;doprnt.c: 852: }
  1414                           ;doprnt.c: 1112: if(prec <= 12)
  1415                           
  1416                           ; BSR set to: 0
  1417                           
  1418                           ; BSR set to: 0
  1419                           
  1420                           ; BSR set to: 0
  1421  000B64  0100               	movlb	0	; () banked
  1422  000B66  BF77               	btfsc	(printf@prec+1)& (0+255),7,b
  1423  000B68  D006               	goto	u3020
  1424  000B6A  5177               	movf	(printf@prec+1)& (0+255),w,b
  1425  000B6C  E11B               	bnz	l2823
  1426  000B6E  0E0D               	movlw	13
  1427  000B70  5D76               	subwf	printf@prec& (0+255),w,b
  1428  000B72  B0D8               	btfsc	status,0,c
  1429  000B74  D017               	goto	l198
  1430  000B76                     u3020:
  1431                           
  1432                           ; BSR set to: 0
  1433                           ;doprnt.c: 1113: fval += fround(prec);
  1434  000B76  C073  F034         	movff	printf@fval,___ftadd@f1
  1435  000B7A  C074  F035         	movff	printf@fval+1,___ftadd@f1+1
  1436  000B7E  C075  F036         	movff	printf@fval+2,___ftadd@f1+2
  1437  000B82  5176               	movf	printf@prec& (0+255),w,b
  1438  000B84  EC76  F00A         	call	_fround
  1439  000B88  C02A  F037         	movff	?_fround,___ftadd@f2
  1440  000B8C  C02B  F038         	movff	?_fround+1,___ftadd@f2+1
  1441  000B90  C02C  F039         	movff	?_fround+2,___ftadd@f2+2
  1442  000B94  EC89  F00C         	call	___ftadd	;wreg free
  1443  000B98  C034  F073         	movff	?___ftadd,printf@fval
  1444  000B9C  C035  F074         	movff	?___ftadd+1,printf@fval+1
  1445  000BA0  C036  F075         	movff	?___ftadd+2,printf@fval+2
  1446  000BA4                     l198:
  1447  000BA4                     l2823:
  1448                           
  1449                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1450  000BA4  0100               	movlb	0	; () banked
  1451  000BA6  BF72               	btfsc	(printf@exp+1)& (0+255),7,b
  1452  000BA8  D006               	goto	u3030
  1453  000BAA  5172               	movf	(printf@exp+1)& (0+255),w,b
  1454  000BAC  E120               	bnz	l2831
  1455  000BAE  0E0A               	movlw	10
  1456  000BB0  5D71               	subwf	printf@exp& (0+255),w,b
  1457  000BB2  B0D8               	btfsc	status,0,c
  1458  000BB4  D01C               	goto	u3060
  1459  000BB6                     u3030:
  1460                           
  1461                           ; BSR set to: 0
  1462  000BB6  5173               	movf	printf@fval& (0+255),w,b
  1463  000BB8  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  1464  000BBA  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  1465  000BBC  B4D8               	btfsc	status,2,c
  1466  000BBE  D056               	goto	l199
  1467                           
  1468                           ; BSR set to: 0
  1469  000BC0  C073  F031         	movff	printf@fval,___fttol@f1
  1470  000BC4  C074  F032         	movff	printf@fval+1,___fttol@f1+1
  1471  000BC8  C075  F033         	movff	printf@fval+2,___fttol@f1+2
  1472  000BCC  EC8C  F00E         	call	___fttol	;wreg free
  1473  000BD0  5031               	movf	?___fttol,w,c
  1474  000BD2  1032               	iorwf	?___fttol+1,w,c
  1475  000BD4  1033               	iorwf	?___fttol+2,w,c
  1476  000BD6  1034               	iorwf	?___fttol+3,w,c
  1477  000BD8  A4D8               	btfss	status,2,c
  1478  000BDA  D048               	goto	l199
  1479  000BDC  0100               	movlb	0	; () banked
  1480  000BDE  BF72               	btfsc	(printf@exp+1)& (0+255),7,b
  1481  000BE0  D045               	goto	l199
  1482  000BE2  5172               	movf	(printf@exp+1)& (0+255),w,b
  1483  000BE4  E104               	bnz	l2831
  1484  000BE6  0E02               	movlw	2
  1485  000BE8  5D71               	subwf	printf@exp& (0+255),w,b
  1486  000BEA  A0D8               	btfss	status,0,c
  1487  000BEC  D03F               	goto	l199
  1488  000BEE                     u3060:
  1489  000BEE                     l2831:
  1490                           
  1491                           ; BSR set to: 0
  1492                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1493  000BEE  C06D  F001         	movff	printf@tmpval,___ftge@ff1
  1494  000BF2  C06E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1495  000BF6  C06F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1496  000BFA  0E70               	movlw	112
  1497  000BFC  6E04               	movwf	___ftge@ff2,c
  1498  000BFE  0E89               	movlw	137
  1499  000C00  6E05               	movwf	___ftge@ff2+1,c
  1500  000C02  0E40               	movlw	64
  1501  000C04  6E06               	movwf	___ftge@ff2+2,c
  1502  000C06  EC4A  F010         	call	___ftge	;wreg free
  1503  000C0A  B0D8               	btfsc	status,0,c
  1504  000C0C  D003               	goto	l202
  1505                           
  1506                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1507  000C0E  0100               	movlb	0	; () banked
  1508  000C10  0EF7               	movlw	247
  1509  000C12  D002               	goto	L1
  1510  000C14                     l202:
  1511                           
  1512                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1513                           
  1514                           ; BSR set to: 0
  1515  000C14  0100               	movlb	0	; () banked
  1516  000C16  0EF8               	movlw	248
  1517  000C18                     L1:
  1518  000C18  2771               	addwf	printf@exp& (0+255),f,b
  1519  000C1A  0EFF               	movlw	255
  1520  000C1C  2372               	addwfc	(printf@exp+1)& (0+255),f,b
  1521                           
  1522                           ; BSR set to: 0
  1523                           ;doprnt.c: 1124: }
  1524                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1525                           
  1526                           ; BSR set to: 0
  1527  000C1E  5171               	movf	printf@exp& (0+255),w,b
  1528  000C20  EC72  F008         	call	_scale
  1529  000C24  C02A  F06D         	movff	?_scale,printf@tmpval
  1530  000C28  C02B  F06E         	movff	?_scale+1,printf@tmpval+1
  1531  000C2C  C02C  F06F         	movff	?_scale+2,printf@tmpval+2
  1532                           
  1533                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1534  000C30  C073  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1535  000C34  C074  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1536  000C38  C075  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1537  000C3C  C06D  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1538  000C40  C06E  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1539  000C44  C06F  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1540  000C48  EC5F  F00D         	call	__tdiv_to_l_	;wreg free
  1541  000C4C  C001  F065         	movff	?__tdiv_to_l_,printf@val
  1542  000C50  C002  F066         	movff	?__tdiv_to_l_+1,printf@val+1
  1543  000C54  C003  F067         	movff	?__tdiv_to_l_+2,printf@val+2
  1544  000C58  C004  F068         	movff	?__tdiv_to_l_+3,printf@val+3
  1545                           
  1546                           ;doprnt.c: 1129: fval = 0.0;
  1547  000C5C  0E00               	movlw	0
  1548  000C5E  0100               	movlb	0	; () banked
  1549  000C60  6F73               	movwf	printf@fval& (0+255),b
  1550  000C62  0E00               	movlw	0
  1551  000C64  6F74               	movwf	(printf@fval+1)& (0+255),b
  1552  000C66  0E00               	movlw	0
  1553  000C68  6F75               	movwf	(printf@fval+2)& (0+255),b
  1554                           
  1555                           ;doprnt.c: 1130: } else {
  1556  000C6A  D033               	goto	l208
  1557  000C6C                     l199:
  1558                           
  1559                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1560                           
  1561                           ; BSR set to: 0
  1562  000C6C  C073  F031         	movff	printf@fval,___fttol@f1
  1563  000C70  C074  F032         	movff	printf@fval+1,___fttol@f1+1
  1564  000C74  C075  F033         	movff	printf@fval+2,___fttol@f1+2
  1565  000C78  EC8C  F00E         	call	___fttol	;wreg free
  1566  000C7C  C031  F065         	movff	?___fttol,printf@val
  1567  000C80  C032  F066         	movff	?___fttol+1,printf@val+1
  1568  000C84  C033  F067         	movff	?___fttol+2,printf@val+2
  1569  000C88  C034  F068         	movff	?___fttol+3,printf@val+3
  1570                           
  1571                           ;doprnt.c: 1132: fval -= (double)val;
  1572  000C8C  C073  F040         	movff	printf@fval,___ftsub@f1
  1573  000C90  C074  F041         	movff	printf@fval+1,___ftsub@f1+1
  1574  000C94  C075  F042         	movff	printf@fval+2,___ftsub@f1+2
  1575  000C98  C065  F009         	movff	printf@val,___lltoft@c
  1576  000C9C  C066  F00A         	movff	printf@val+1,___lltoft@c+1
  1577  000CA0  C067  F00B         	movff	printf@val+2,___lltoft@c+2
  1578  000CA4  C068  F00C         	movff	printf@val+3,___lltoft@c+3
  1579  000CA8  ECFA  F011         	call	___lltoft	;wreg free
  1580  000CAC  C009  F043         	movff	?___lltoft,___ftsub@f2
  1581  000CB0  C00A  F044         	movff	?___lltoft+1,___ftsub@f2+1
  1582  000CB4  C00B  F045         	movff	?___lltoft+2,___ftsub@f2+2
  1583  000CB8  EC75  F012         	call	___ftsub	;wreg free
  1584  000CBC  C040  F073         	movff	?___ftsub,printf@fval
  1585  000CC0  C041  F074         	movff	?___ftsub+1,printf@fval+1
  1586  000CC4  C042  F075         	movff	?___ftsub+2,printf@fval+2
  1587                           
  1588                           ;doprnt.c: 1133: exp = 0;
  1589  000CC8  0E00               	movlw	0
  1590  000CCA  0100               	movlb	0	; () banked
  1591  000CCC  6F72               	movwf	(printf@exp+1)& (0+255),b
  1592  000CCE  0E00               	movlw	0
  1593  000CD0  6F71               	movwf	printf@exp& (0+255),b
  1594  000CD2                     l208:
  1595                           
  1596                           ; BSR set to: 0
  1597                           ;doprnt.c: 1134: }
  1598                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1599                           
  1600                           ; BSR set to: 0
  1601  000CD2  0E01               	movlw	1
  1602  000CD4  6F78               	movwf	printf@c& (0+255),b
  1603  000CD6                     l2851:
  1604                           
  1605                           ; BSR set to: 0
  1606  000CD6  0E0A               	movlw	10
  1607  000CD8  1978               	xorwf	printf@c& (0+255),w,b
  1608  000CDA  B4D8               	btfsc	status,2,c
  1609  000CDC  D018               	goto	u3100
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;doprnt.c: 1137: if(val < dpowers[c])
  1613                           
  1614                           ; BSR set to: 0
  1615                           
  1616                           ; BSR set to: 0
  1617  000CDE  5178               	movf	printf@c& (0+255),w,b
  1618  000CE0  0D04               	mullw	4
  1619  000CE2  0E01               	movlw	low _dpowers
  1620  000CE4  24F3               	addwf	prodl,w,c
  1621  000CE6  6EF6               	movwf	tblptrl,c
  1622  000CE8  0E08               	movlw	high _dpowers
  1623  000CEA  20F4               	addwfc	prodh,w,c
  1624  000CEC  6EF7               	movwf	tblptrh,c
  1625  000CEE                     	if	0	;There are less than 3 active tblptr bytes
  1626  000CEE                     	endif
  1627  000CEE  0009               	tblrd		*+
  1628  000CF0  50F5               	movf	tablat,w,c
  1629  000CF2  5D65               	subwf	printf@val& (0+255),w,b
  1630  000CF4  0009               	tblrd		*+
  1631  000CF6  50F5               	movf	tablat,w,c
  1632  000CF8  5966               	subwfb	(printf@val+1)& (0+255),w,b
  1633  000CFA  0009               	tblrd		*+
  1634  000CFC  50F5               	movf	tablat,w,c
  1635  000CFE  5967               	subwfb	(printf@val+2)& (0+255),w,b
  1636  000D00  0009               	tblrd		*+
  1637  000D02  50F5               	movf	tablat,w,c
  1638  000D04  5968               	subwfb	(printf@val+3)& (0+255),w,b
  1639  000D06  A0D8               	btfss	status,0,c
  1640  000D08  D002               	goto	u3100
  1641                           
  1642                           ; BSR set to: 0
  1643                           
  1644                           ; BSR set to: 0
  1645                           
  1646                           ; BSR set to: 0
  1647                           ;doprnt.c: 1138: break;
  1648  000D0A  2B78               	incf	printf@c& (0+255),f,b
  1649  000D0C  D7E4               	goto	l2851
  1650  000D0E                     u3100:
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;doprnt.c: 1142: width -= prec + c + exp;
  1654                           
  1655                           ; BSR set to: 0
  1656  000D0E  C078  F04B         	movff	printf@c,??_printf
  1657  000D12  6A4C               	clrf	(??_printf+1)& (0+255),c
  1658  000D14  BE4B               	btfsc	??_printf& (0+255),7,c
  1659  000D16  064C               	decf	(??_printf+1)& (0+255),f,c
  1660  000D18  5176               	movf	printf@prec& (0+255),w,b
  1661  000D1A  264B               	addwf	??_printf,f,c
  1662  000D1C  5177               	movf	(printf@prec+1)& (0+255),w,b
  1663  000D1E  224C               	addwfc	??_printf+1,f,c
  1664  000D20  5171               	movf	printf@exp& (0+255),w,b
  1665  000D22  264B               	addwf	??_printf,f,c
  1666  000D24  5172               	movf	(printf@exp+1)& (0+255),w,b
  1667  000D26  224C               	addwfc	??_printf+1,f,c
  1668  000D28  504B               	movf	??_printf,w,c
  1669  000D2A  5F6B               	subwf	printf@width& (0+255),f,b
  1670  000D2C  504C               	movf	??_printf+1,w,c
  1671  000D2E  5B6C               	subwfb	(printf@width+1)& (0+255),f,b
  1672                           
  1673                           ;doprnt.c: 1143: if(
  1674                           ;doprnt.c: 1147: prec)
  1675  000D30  5176               	movf	printf@prec& (0+255),w,b
  1676  000D32  1177               	iorwf	(printf@prec+1)& (0+255),w,b
  1677  000D34  B4D8               	btfsc	status,2,c
  1678  000D36  D003               	goto	l212
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;doprnt.c: 1148: width--;
  1682  000D38  076B               	decf	printf@width& (0+255),f,b
  1683  000D3A  A0D8               	btfss	status,0,c
  1684  000D3C  076C               	decf	(printf@width+1)& (0+255),f,b
  1685  000D3E                     l212:
  1686                           
  1687                           ; BSR set to: 0
  1688                           ;doprnt.c: 1149: if(flag & 0x03)
  1689                           
  1690                           ; BSR set to: 0
  1691  000D3E  0E03               	movlw	3
  1692  000D40  1569               	andwf	printf@flag& (0+255),w,b
  1693  000D42  6E4B               	movwf	??_printf& (0+255),c
  1694  000D44  0E00               	movlw	0
  1695  000D46  156A               	andwf	(printf@flag+1)& (0+255),w,b
  1696  000D48  6E4C               	movwf	(??_printf+1)& (0+255),c
  1697  000D4A  504B               	movf	??_printf,w,c
  1698  000D4C  104C               	iorwf	??_printf+1,w,c
  1699  000D4E  B4D8               	btfsc	status,2,c
  1700  000D50  D008               	goto	l214
  1701  000D52  D004               	goto	L2
  1702  000D54                     l2871:
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;doprnt.c: 1181: (putch(' ') );
  1706  000D54  0E20               	movlw	32
  1707  000D56  ECFD  F012         	call	_putch
  1708                           
  1709                           ;doprnt.c: 1182: width--;
  1710  000D5A  0100               	movlb	0	; () banked
  1711  000D5C                     L2:
  1712  000D5C  076B               	decf	printf@width& (0+255),f,b
  1713  000D5E  A0D8               	btfss	status,0,c
  1714  000D60  076C               	decf	(printf@width+1)& (0+255),f,b
  1715  000D62                     l214:
  1716                           
  1717                           ; BSR set to: 0
  1718                           
  1719                           ; BSR set to: 0
  1720  000D62  BF6C               	btfsc	(printf@width+1)& (0+255),7,b
  1721  000D64  D005               	goto	u3130
  1722  000D66  516C               	movf	(printf@width+1)& (0+255),w,b
  1723  000D68  E1F5               	bnz	l2871
  1724  000D6A  056B               	decf	printf@width& (0+255),w,b
  1725  000D6C  B0D8               	btfsc	status,0,c
  1726  000D6E  D7F2               	goto	l215
  1727  000D70                     u3130:
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;doprnt.c: 1183: }
  1731                           ;doprnt.c: 1188: if(flag & 0x03)
  1732                           
  1733                           ; BSR set to: 0
  1734  000D70  0E03               	movlw	3
  1735  000D72  1569               	andwf	printf@flag& (0+255),w,b
  1736  000D74  6E4B               	movwf	??_printf& (0+255),c
  1737  000D76  0E00               	movlw	0
  1738  000D78  156A               	andwf	(printf@flag+1)& (0+255),w,b
  1739  000D7A  6E4C               	movwf	(??_printf+1)& (0+255),c
  1740  000D7C  504B               	movf	??_printf,w,c
  1741  000D7E  104C               	iorwf	??_printf+1,w,c
  1742  000D80  B4D8               	btfsc	status,2,c
  1743  000D82  D04A               	goto	l218
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;doprnt.c: 1190: (putch('-') );
  1747  000D84  0E2D               	movlw	45
  1748  000D86  ECFD  F012         	call	_putch
  1749                           
  1750                           ;doprnt.c: 1195: }
  1751                           ;doprnt.c: 1196: while(c--) {
  1752  000D8A  D046               	goto	l218
  1753  000D8C                     
  1754                           ;doprnt.c: 1200: {
  1755                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1756  000D8C  C065  F001         	movff	printf@val,___lldiv@dividend
  1757  000D90  C066  F002         	movff	printf@val+1,___lldiv@dividend+1
  1758  000D94  C067  F003         	movff	printf@val+2,___lldiv@dividend+2
  1759  000D98  C068  F004         	movff	printf@val+3,___lldiv@dividend+3
  1760  000D9C  0100               	movlb	0	; () banked
  1761  000D9E  5178               	movf	printf@c& (0+255),w,b
  1762  000DA0  0D04               	mullw	4
  1763  000DA2  0E01               	movlw	low _dpowers
  1764  000DA4  24F3               	addwf	prodl,w,c
  1765  000DA6  6EF6               	movwf	tblptrl,c
  1766  000DA8  0E08               	movlw	high _dpowers
  1767  000DAA  20F4               	addwfc	prodh,w,c
  1768  000DAC  6EF7               	movwf	tblptrh,c
  1769  000DAE                     	if	0	;There are less than 3 active tblptr bytes
  1770  000DAE                     	endif
  1771  000DAE  0009               	tblrd		*+
  1772  000DB0  CFF5 F005          	movff	tablat,___lldiv@divisor
  1773  000DB4  0009               	tblrd		*+
  1774  000DB6  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1775  000DBA  0009               	tblrd		*+
  1776  000DBC  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1777  000DC0  000A               	tblrd		*-
  1778  000DC2  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1779  000DC6  EC17  F011         	call	___lldiv	;wreg free
  1780  000DCA  C001  F06D         	movff	?___lldiv,printf@tmpval
  1781  000DCE  C002  F06E         	movff	?___lldiv+1,printf@tmpval+1
  1782  000DD2  C003  F06F         	movff	?___lldiv+2,printf@tmpval+2
  1783  000DD6  C004  F070         	movff	?___lldiv+3,printf@tmpval+3
  1784                           
  1785                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1786  000DDA  C06D  F001         	movff	printf@tmpval,___llmod@dividend
  1787  000DDE  C06E  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1788  000DE2  C06F  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1789  000DE6  C070  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1790  000DEA  0E0A               	movlw	10
  1791  000DEC  6E05               	movwf	___llmod@divisor,c
  1792  000DEE  0E00               	movlw	0
  1793  000DF0  6E06               	movwf	___llmod@divisor+1,c
  1794  000DF2  0E00               	movlw	0
  1795  000DF4  6E07               	movwf	___llmod@divisor+2,c
  1796  000DF6  0E00               	movlw	0
  1797  000DF8  6E08               	movwf	___llmod@divisor+3,c
  1798  000DFA  ECC7  F011         	call	___llmod	;wreg free
  1799  000DFE  C001  F06D         	movff	?___llmod,printf@tmpval
  1800  000E02  C002  F06E         	movff	?___llmod+1,printf@tmpval+1
  1801  000E06  C003  F06F         	movff	?___llmod+2,printf@tmpval+2
  1802  000E0A  C004  F070         	movff	?___llmod+3,printf@tmpval+3
  1803                           
  1804                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1805  000E0E  0100               	movlb	0	; () banked
  1806  000E10  516D               	movf	printf@tmpval& (0+255),w,b
  1807  000E12  0F30               	addlw	48
  1808  000E14  ECFD  F012         	call	_putch
  1809  000E18                     l218:
  1810  000E18  0100               	movlb	0	; () banked
  1811  000E1A  0778               	decf	printf@c& (0+255),f,b
  1812  000E1C  2978               	incf	printf@c& (0+255),w,b
  1813  000E1E  B4D8               	btfsc	status,2,c
  1814  000E20  D008               	goto	l221
  1815  000E22  D7B4               	goto	l219
  1816  000E24                     l2889:
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;doprnt.c: 1208: (putch('0') );
  1820  000E24  0E30               	movlw	48
  1821  000E26  ECFD  F012         	call	_putch
  1822                           
  1823                           ;doprnt.c: 1209: exp--;
  1824  000E2A  0100               	movlb	0	; () banked
  1825  000E2C  0771               	decf	printf@exp& (0+255),f,b
  1826  000E2E  A0D8               	btfss	status,0,c
  1827  000E30  0772               	decf	(printf@exp+1)& (0+255),f,b
  1828  000E32                     l221:
  1829                           
  1830                           ; BSR set to: 0
  1831                           
  1832                           ; BSR set to: 0
  1833  000E32  BF72               	btfsc	(printf@exp+1)& (0+255),7,b
  1834  000E34  D005               	goto	u3160
  1835  000E36  5172               	movf	(printf@exp+1)& (0+255),w,b
  1836  000E38  E1F5               	bnz	l2889
  1837  000E3A  0571               	decf	printf@exp& (0+255),w,b
  1838  000E3C  B0D8               	btfsc	status,0,c
  1839  000E3E  D7F2               	goto	l222
  1840  000E40                     u3160:
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;doprnt.c: 1210: }
  1844                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1845                           
  1846                           ; BSR set to: 0
  1847  000E40  BF77               	btfsc	(printf@prec+1)& (0+255),7,b
  1848  000E42  D009               	goto	l224
  1849  000E44  5177               	movf	(printf@prec+1)& (0+255),w,b
  1850  000E46  E104               	bnz	u3170
  1851  000E48  0E09               	movlw	9
  1852  000E4A  5D76               	subwf	printf@prec& (0+255),w,b
  1853  000E4C  A0D8               	btfss	status,0,c
  1854  000E4E  D003               	goto	l224
  1855  000E50                     u3170:
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1859  000E50  0E08               	movlw	8
  1860  000E52  6F78               	movwf	printf@c& (0+255),b
  1861  000E54  D002               	goto	l225
  1862  000E56                     l224:
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;doprnt.c: 1213: else
  1866                           ;doprnt.c: 1214: c = prec;
  1867  000E56  C076  F078         	movff	printf@prec,printf@c
  1868  000E5A                     l225:
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;doprnt.c: 1215: prec -= c;
  1872                           
  1873                           ; BSR set to: 0
  1874  000E5A  5178               	movf	printf@c& (0+255),w,b
  1875  000E5C  5F76               	subwf	printf@prec& (0+255),f,b
  1876  000E5E  0E00               	movlw	0
  1877  000E60  BF78               	btfsc	printf@c& (0+255),7,b
  1878  000E62  0EFF               	movlw	255
  1879  000E64  5B77               	subwfb	(printf@prec+1)& (0+255),f,b
  1880                           
  1881                           ; BSR set to: 0
  1882                           ;doprnt.c: 1219: if(c)
  1883  000E66  5178               	movf	printf@c& (0+255),w,b
  1884  000E68  B4D8               	btfsc	status,2,c
  1885  000E6A  D003               	goto	l226
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;doprnt.c: 1221: (putch('.') );
  1889  000E6C  0E2E               	movlw	46
  1890  000E6E  ECFD  F012         	call	_putch
  1891  000E72                     l226:
  1892                           
  1893                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1894  000E72  0100               	movlb	0	; () banked
  1895  000E74  5178               	movf	printf@c& (0+255),w,b
  1896  000E76  EC72  F008         	call	_scale
  1897  000E7A  C02A  F060         	movff	?_scale,_printf$1023
  1898  000E7E  C02B  F061         	movff	?_scale+1,_printf$1023+1
  1899  000E82  C02C  F062         	movff	?_scale+2,_printf$1023+2
  1900                           
  1901                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1902  000E86  C073  F01E         	movff	printf@fval,___ftmul@f2
  1903  000E8A  C074  F01F         	movff	printf@fval+1,___ftmul@f2+1
  1904  000E8E  C075  F020         	movff	printf@fval+2,___ftmul@f2+2
  1905  000E92  C060  F01B         	movff	_printf$1023,___ftmul@f1
  1906  000E96  C061  F01C         	movff	_printf$1023+1,___ftmul@f1+1
  1907  000E9A  C062  F01D         	movff	_printf$1023+2,___ftmul@f1+2
  1908  000E9E  EC06  F00F         	call	___ftmul	;wreg free
  1909  000EA2  C01B  F031         	movff	?___ftmul,___fttol@f1
  1910  000EA6  C01C  F032         	movff	?___ftmul+1,___fttol@f1+1
  1911  000EAA  C01D  F033         	movff	?___ftmul+2,___fttol@f1+2
  1912  000EAE  EC8C  F00E         	call	___fttol	;wreg free
  1913  000EB2  C031  F065         	movff	?___fttol,printf@val
  1914  000EB6  C032  F066         	movff	?___fttol+1,printf@val+1
  1915  000EBA  C033  F067         	movff	?___fttol+2,printf@val+2
  1916  000EBE  C034  F068         	movff	?___fttol+3,printf@val+3
  1917                           
  1918                           ;doprnt.c: 1228: while(c--) {
  1919  000EC2  D06D               	goto	l227
  1920  000EC4                     
  1921                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1922  000EC4  C065  F001         	movff	printf@val,___lldiv@dividend
  1923  000EC8  C066  F002         	movff	printf@val+1,___lldiv@dividend+1
  1924  000ECC  C067  F003         	movff	printf@val+2,___lldiv@dividend+2
  1925  000ED0  C068  F004         	movff	printf@val+3,___lldiv@dividend+3
  1926  000ED4  0100               	movlb	0	; () banked
  1927  000ED6  5178               	movf	printf@c& (0+255),w,b
  1928  000ED8  0D04               	mullw	4
  1929  000EDA  0E01               	movlw	low _dpowers
  1930  000EDC  24F3               	addwf	prodl,w,c
  1931  000EDE  6EF6               	movwf	tblptrl,c
  1932  000EE0  0E08               	movlw	high _dpowers
  1933  000EE2  20F4               	addwfc	prodh,w,c
  1934  000EE4  6EF7               	movwf	tblptrh,c
  1935  000EE6                     	if	0	;There are less than 3 active tblptr bytes
  1936  000EE6                     	endif
  1937  000EE6  0009               	tblrd		*+
  1938  000EE8  CFF5 F005          	movff	tablat,___lldiv@divisor
  1939  000EEC  0009               	tblrd		*+
  1940  000EEE  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1941  000EF2  0009               	tblrd		*+
  1942  000EF4  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1943  000EF8  000A               	tblrd		*-
  1944  000EFA  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1945  000EFE  EC17  F011         	call	___lldiv	;wreg free
  1946  000F02  C001  F06D         	movff	?___lldiv,printf@tmpval
  1947  000F06  C002  F06E         	movff	?___lldiv+1,printf@tmpval+1
  1948  000F0A  C003  F06F         	movff	?___lldiv+2,printf@tmpval+2
  1949  000F0E  C004  F070         	movff	?___lldiv+3,printf@tmpval+3
  1950                           
  1951                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1952  000F12  C06D  F001         	movff	printf@tmpval,___llmod@dividend
  1953  000F16  C06E  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1954  000F1A  C06F  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1955  000F1E  C070  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1956  000F22  0E0A               	movlw	10
  1957  000F24  6E05               	movwf	___llmod@divisor,c
  1958  000F26  0E00               	movlw	0
  1959  000F28  6E06               	movwf	___llmod@divisor+1,c
  1960  000F2A  0E00               	movlw	0
  1961  000F2C  6E07               	movwf	___llmod@divisor+2,c
  1962  000F2E  0E00               	movlw	0
  1963  000F30  6E08               	movwf	___llmod@divisor+3,c
  1964  000F32  ECC7  F011         	call	___llmod	;wreg free
  1965  000F36  C001  F06D         	movff	?___llmod,printf@tmpval
  1966  000F3A  C002  F06E         	movff	?___llmod+1,printf@tmpval+1
  1967  000F3E  C003  F06F         	movff	?___llmod+2,printf@tmpval+2
  1968  000F42  C004  F070         	movff	?___llmod+3,printf@tmpval+3
  1969                           
  1970                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  1971  000F46  0100               	movlb	0	; () banked
  1972  000F48  516D               	movf	printf@tmpval& (0+255),w,b
  1973  000F4A  0F30               	addlw	48
  1974  000F4C  ECFD  F012         	call	_putch
  1975                           
  1976                           ;doprnt.c: 1232: val %= dpowers[c];
  1977  000F50  C065  F001         	movff	printf@val,___llmod@dividend
  1978  000F54  C066  F002         	movff	printf@val+1,___llmod@dividend+1
  1979  000F58  C067  F003         	movff	printf@val+2,___llmod@dividend+2
  1980  000F5C  C068  F004         	movff	printf@val+3,___llmod@dividend+3
  1981  000F60  0100               	movlb	0	; () banked
  1982  000F62  5178               	movf	printf@c& (0+255),w,b
  1983  000F64  0D04               	mullw	4
  1984  000F66  0E01               	movlw	low _dpowers
  1985  000F68  24F3               	addwf	prodl,w,c
  1986  000F6A  6EF6               	movwf	tblptrl,c
  1987  000F6C  0E08               	movlw	high _dpowers
  1988  000F6E  20F4               	addwfc	prodh,w,c
  1989  000F70  6EF7               	movwf	tblptrh,c
  1990  000F72                     	if	0	;There are less than 3 active tblptr bytes
  1991  000F72                     	endif
  1992  000F72  0009               	tblrd		*+
  1993  000F74  CFF5 F005          	movff	tablat,___llmod@divisor
  1994  000F78  0009               	tblrd		*+
  1995  000F7A  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1996  000F7E  0009               	tblrd		*+
  1997  000F80  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1998  000F84  000A               	tblrd		*-
  1999  000F86  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2000  000F8A  ECC7  F011         	call	___llmod	;wreg free
  2001  000F8E  C001  F065         	movff	?___llmod,printf@val
  2002  000F92  C002  F066         	movff	?___llmod+1,printf@val+1
  2003  000F96  C003  F067         	movff	?___llmod+2,printf@val+2
  2004  000F9A  C004  F068         	movff	?___llmod+3,printf@val+3
  2005  000F9E                     l227:
  2006  000F9E  0100               	movlb	0	; () banked
  2007  000FA0  0778               	decf	printf@c& (0+255),f,b
  2008  000FA2  2978               	incf	printf@c& (0+255),w,b
  2009  000FA4  B4D8               	btfsc	status,2,c
  2010  000FA6  D008               	goto	l230
  2011  000FA8  D78D               	goto	l228
  2012  000FAA                     
  2013                           ; BSR set to: 0
  2014                           ;doprnt.c: 1236: (putch('0') );
  2015                           
  2016                           ; BSR set to: 0
  2017  000FAA  0E30               	movlw	48
  2018  000FAC  ECFD  F012         	call	_putch
  2019                           
  2020                           ;doprnt.c: 1237: prec--;
  2021  000FB0  0100               	movlb	0	; () banked
  2022  000FB2  0776               	decf	printf@prec& (0+255),f,b
  2023  000FB4  A0D8               	btfss	status,0,c
  2024  000FB6  0777               	decf	(printf@prec+1)& (0+255),f,b
  2025  000FB8                     l230:
  2026                           
  2027                           ; BSR set to: 0
  2028                           
  2029                           ; BSR set to: 0
  2030  000FB8  5176               	movf	printf@prec& (0+255),w,b
  2031  000FBA  1177               	iorwf	(printf@prec+1)& (0+255),w,b
  2032  000FBC  B4D8               	btfsc	status,2,c
  2033  000FBE  D083               	goto	l246
  2034  000FC0  D7F4               	goto	l231
  2035  000FC2                     l190:
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;doprnt.c: 1246: }
  2039                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2040                           
  2041                           ; BSR set to: 0
  2042  000FC2  5176               	movf	printf@prec& (0+255),w,b
  2043  000FC4  1177               	iorwf	(printf@prec+1)& (0+255),w,b
  2044  000FC6  A4D8               	btfss	status,2,c
  2045  000FC8  D008               	goto	l233
  2046                           
  2047                           ; BSR set to: 0
  2048  000FCA  5165               	movf	printf@val& (0+255),w,b
  2049  000FCC  1166               	iorwf	(printf@val+1)& (0+255),w,b
  2050  000FCE  1167               	iorwf	(printf@val+2)& (0+255),w,b
  2051  000FD0  1168               	iorwf	(printf@val+3)& (0+255),w,b
  2052  000FD2  A4D8               	btfss	status,2,c
  2053  000FD4  D002               	goto	l233
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;doprnt.c: 1291: prec++;
  2057  000FD6  4B76               	infsnz	printf@prec& (0+255),f,b
  2058  000FD8  2B77               	incf	(printf@prec+1)& (0+255),f,b
  2059  000FDA                     l233:
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;doprnt.c: 1339: if(c < prec)
  2063                           
  2064                           ; BSR set to: 0
  2065  000FDA  0E80               	movlw	128
  2066  000FDC  BF78               	btfsc	printf@c& (0+255),7,b
  2067  000FDE  0E7F               	movlw	127
  2068  000FE0  6E4B               	movwf	??_printf& (0+255),c
  2069  000FE2  5176               	movf	printf@prec& (0+255),w,b
  2070  000FE4  5D78               	subwf	printf@c& (0+255),w,b
  2071  000FE6  5177               	movf	(printf@prec+1)& (0+255),w,b
  2072  000FE8  0A80               	xorlw	128
  2073  000FEA  584B               	subwfb	??_printf& (0+255),w,c
  2074  000FEC  B0D8               	btfsc	status,0,c
  2075  000FEE  D003               	goto	l234
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;doprnt.c: 1340: c = prec;
  2079  000FF0  C076  F078         	movff	printf@prec,printf@c
  2080  000FF4  D010               	goto	l236
  2081  000FF6                     l234:
  2082                           
  2083                           ; BSR set to: 0
  2084                           ;doprnt.c: 1341: else if(prec < c)
  2085                           
  2086                           ; BSR set to: 0
  2087  000FF6  5177               	movf	(printf@prec+1)& (0+255),w,b
  2088  000FF8  0A80               	xorlw	128
  2089  000FFA  6E4B               	movwf	??_printf& (0+255),c
  2090  000FFC  5178               	movf	printf@c& (0+255),w,b
  2091  000FFE  5D76               	subwf	printf@prec& (0+255),w,b
  2092  001000  0E80               	movlw	128
  2093  001002  BF78               	btfsc	printf@c& (0+255),7,b
  2094  001004  0E7F               	movlw	127
  2095  001006  584B               	subwfb	??_printf& (0+255),w,c
  2096  001008  B0D8               	btfsc	status,0,c
  2097  00100A  D005               	goto	l236
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;doprnt.c: 1342: prec = c;
  2101  00100C  5178               	movf	printf@c& (0+255),w,b
  2102  00100E  6F76               	movwf	printf@prec& (0+255),b
  2103  001010  6B77               	clrf	(printf@prec+1)& (0+255),b
  2104  001012  BF76               	btfsc	printf@prec& (0+255),7,b
  2105  001014  0777               	decf	(printf@prec+1)& (0+255),f,b
  2106  001016                     l236:
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2110                           
  2111                           ; BSR set to: 0
  2112                           
  2113                           ; BSR set to: 0
  2114  001016  516B               	movf	printf@width& (0+255),w,b
  2115  001018  116C               	iorwf	(printf@width+1)& (0+255),w,b
  2116  00101A  B4D8               	btfsc	status,2,c
  2117  00101C  D00D               	goto	l237
  2118                           
  2119                           ; BSR set to: 0
  2120  00101E  0E03               	movlw	3
  2121  001020  1569               	andwf	printf@flag& (0+255),w,b
  2122  001022  6E4B               	movwf	??_printf& (0+255),c
  2123  001024  0E00               	movlw	0
  2124  001026  156A               	andwf	(printf@flag+1)& (0+255),w,b
  2125  001028  6E4C               	movwf	(??_printf+1)& (0+255),c
  2126  00102A  504B               	movf	??_printf,w,c
  2127  00102C  104C               	iorwf	??_printf+1,w,c
  2128  00102E  B4D8               	btfsc	status,2,c
  2129  001030  D003               	goto	l237
  2130                           
  2131                           ; BSR set to: 0
  2132                           ;doprnt.c: 1346: width--;
  2133  001032  076B               	decf	printf@width& (0+255),f,b
  2134  001034  A0D8               	btfss	status,0,c
  2135  001036  076C               	decf	(printf@width+1)& (0+255),f,b
  2136  001038                     l237:
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2140                           
  2141                           ; BSR set to: 0
  2142  001038  AD6A               	btfss	(printf@flag+1)& (0+255),6,b
  2143  00103A  D013               	goto	l240
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;doprnt.c: 1349: if(width > prec)
  2147  00103C  516B               	movf	printf@width& (0+255),w,b
  2148  00103E  5D76               	subwf	printf@prec& (0+255),w,b
  2149  001040  5177               	movf	(printf@prec+1)& (0+255),w,b
  2150  001042  0A80               	xorlw	128
  2151  001044  6E4B               	movwf	??_printf& (0+255),c
  2152  001046  516C               	movf	(printf@width+1)& (0+255),w,b
  2153  001048  0A80               	xorlw	128
  2154  00104A  584B               	subwfb	??_printf& (0+255),w,c
  2155  00104C  B0D8               	btfsc	status,0,c
  2156  00104E  D005               	goto	l239
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;doprnt.c: 1350: width -= prec;
  2160  001050  5176               	movf	printf@prec& (0+255),w,b
  2161  001052  5F6B               	subwf	printf@width& (0+255),f,b
  2162  001054  5177               	movf	(printf@prec+1)& (0+255),w,b
  2163  001056  5B6C               	subwfb	(printf@width+1)& (0+255),f,b
  2164  001058  D004               	goto	l240
  2165  00105A                     l239:
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;doprnt.c: 1351: else
  2169                           ;doprnt.c: 1352: width = 0;
  2170                           
  2171                           ; BSR set to: 0
  2172  00105A  0E00               	movlw	0
  2173  00105C  6F6C               	movwf	(printf@width+1)& (0+255),b
  2174  00105E  0E00               	movlw	0
  2175  001060  6F6B               	movwf	printf@width& (0+255),b
  2176  001062                     l240:
  2177                           
  2178                           ; BSR set to: 0
  2179                           ;doprnt.c: 1353: }
  2180                           ;doprnt.c: 1381: if(width > c)
  2181                           
  2182                           ; BSR set to: 0
  2183                           
  2184                           ; BSR set to: 0
  2185  001062  0E80               	movlw	128
  2186  001064  BF78               	btfsc	printf@c& (0+255),7,b
  2187  001066  0E7F               	movlw	127
  2188  001068  6E4B               	movwf	??_printf& (0+255),c
  2189  00106A  516B               	movf	printf@width& (0+255),w,b
  2190  00106C  5D78               	subwf	printf@c& (0+255),w,b
  2191  00106E  516C               	movf	(printf@width+1)& (0+255),w,b
  2192  001070  0A80               	xorlw	128
  2193  001072  584B               	subwfb	??_printf& (0+255),w,c
  2194  001074  B0D8               	btfsc	status,0,c
  2195  001076  D007               	goto	l241
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;doprnt.c: 1382: width -= c;
  2199  001078  5178               	movf	printf@c& (0+255),w,b
  2200  00107A  5F6B               	subwf	printf@width& (0+255),f,b
  2201  00107C  0E00               	movlw	0
  2202  00107E  BF78               	btfsc	printf@c& (0+255),7,b
  2203  001080  0EFF               	movlw	255
  2204  001082  5B6C               	subwfb	(printf@width+1)& (0+255),f,b
  2205  001084  D004               	goto	l242
  2206  001086                     l241:
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;doprnt.c: 1383: else
  2210                           ;doprnt.c: 1384: width = 0;
  2211                           
  2212                           ; BSR set to: 0
  2213  001086  0E00               	movlw	0
  2214  001088  6F6C               	movwf	(printf@width+1)& (0+255),b
  2215  00108A  0E00               	movlw	0
  2216  00108C  6F6B               	movwf	printf@width& (0+255),b
  2217  00108E                     l242:
  2218                           
  2219                           ; BSR set to: 0
  2220                           ;doprnt.c: 1422: {
  2221                           ;doprnt.c: 1424: if(width
  2222                           ;doprnt.c: 1428: )
  2223                           
  2224                           ; BSR set to: 0
  2225  00108E  516B               	movf	printf@width& (0+255),w,b
  2226  001090  116C               	iorwf	(printf@width+1)& (0+255),w,b
  2227  001092  B4D8               	btfsc	status,2,c
  2228  001094  D00B               	goto	u3310
  2229  001096                     u3300:
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;doprnt.c: 1430: (putch(' ') );
  2233                           
  2234                           ; BSR set to: 0
  2235                           
  2236                           ;doprnt.c: 1429: do
  2237  001096  0E20               	movlw	32
  2238  001098  ECFD  F012         	call	_putch
  2239                           
  2240                           ;doprnt.c: 1431: while(--width);
  2241  00109C  0100               	movlb	0	; () banked
  2242  00109E  076B               	decf	printf@width& (0+255),f,b
  2243  0010A0  A0D8               	btfss	status,0,c
  2244  0010A2  076C               	decf	(printf@width+1)& (0+255),f,b
  2245  0010A4  516B               	movf	printf@width& (0+255),w,b
  2246  0010A6  116C               	iorwf	(printf@width+1)& (0+255),w,b
  2247  0010A8  A4D8               	btfss	status,2,c
  2248  0010AA  D7F5               	goto	u3300
  2249  0010AC                     u3310:
  2250                           
  2251                           ; BSR set to: 0
  2252                           ;doprnt.c: 1438: if(flag & 0x03)
  2253                           
  2254                           ; BSR set to: 0
  2255                           
  2256                           ; BSR set to: 0
  2257  0010AC  0E03               	movlw	3
  2258  0010AE  1569               	andwf	printf@flag& (0+255),w,b
  2259  0010B0  6E4B               	movwf	??_printf& (0+255),c
  2260  0010B2  0E00               	movlw	0
  2261  0010B4  156A               	andwf	(printf@flag+1)& (0+255),w,b
  2262  0010B6  6E4C               	movwf	(??_printf+1)& (0+255),c
  2263  0010B8  504B               	movf	??_printf,w,c
  2264  0010BA  104C               	iorwf	??_printf+1,w,c
  2265  0010BC  B4D8               	btfsc	status,2,c
  2266  0010BE  D003               	goto	l246
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;doprnt.c: 1439: (putch('-') );
  2270  0010C0  0E2D               	movlw	45
  2271  0010C2  ECFD  F012         	call	_putch
  2272  0010C6                     l246:
  2273  0010C6  C046  FFF6         	movff	printf@f,tblptrl
  2274  0010CA  C047  FFF7         	movff	printf@f+1,tblptrh
  2275  0010CE  4A46               	infsnz	printf@f,f,c
  2276  0010D0  2A47               	incf	printf@f+1,f,c
  2277  0010D2                     	if	0	;tblptru may be non-zero
  2278  0010D2                     	endif
  2279  0010D2                     	if	0	;tblptru may be non-zero
  2280  0010D2                     	endif
  2281  0010D2  0008               	tblrd		*
  2282  0010D4  CFF5 F078          	movff	tablat,printf@c
  2283  0010D8  0100               	movlb	0	; () banked
  2284  0010DA  5178               	movf	printf@c& (0+255),w,b
  2285  0010DC  B4D8               	btfsc	status,2,c
  2286  0010DE  0012               	return	
  2287  0010E0  EF54  F004         	goto	l174
  2288  0010E4                     __end_of_printf:
  2289                           	opt stack 0
  2290                           tblptru	equ	0xFF8
  2291                           tblptrh	equ	0xFF7
  2292                           tblptrl	equ	0xFF6
  2293                           tablat	equ	0xFF5
  2294                           prodh	equ	0xFF4
  2295                           prodl	equ	0xFF3
  2296                           postinc0	equ	0xFEE
  2297                           wreg	equ	0xFE8
  2298                           postinc2	equ	0xFDE
  2299                           postdec2	equ	0xFDD
  2300                           fsr2h	equ	0xFDA
  2301                           fsr2l	equ	0xFD9
  2302                           status	equ	0xFD8
  2303                           
  2304 ;; *************** function _scale *****************
  2305 ;; Defined at:
  2306 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;  scl             1    wreg     char 
  2309 ;; Auto vars:     Size  Location     Type
  2310 ;;  scl             1   47[COMRAM] char 
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  3   41[COMRAM] char 
  2313 ;; Registers used:
  2314 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2320 ;;      Params:         3       0       0       0       0       0       0       0       0
  2321 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2322 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2323 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2324 ;;Total ram usage:        7 bytes
  2325 ;; Hardware stack levels used:    1
  2326 ;; Hardware stack levels required when called:    2
  2327 ;; This function calls:
  2328 ;;		___awdiv
  2329 ;;		___awmod
  2330 ;;		___ftmul
  2331 ;;		___wmul
  2332 ;; This function is called by:
  2333 ;;		_printf
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           	psect	text2
  2338  0010E4                     __ptext2:
  2339                           	opt stack 0
  2340  0010E4                     _scale:
  2341                           	opt stack 27
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;incstack = 0
  2345                           ;scale@scl stored from wreg
  2346  0010E4  6E30               	movwf	scale@scl,c
  2347                           
  2348                           ;doprnt.c: 428: if(scl < 0) {
  2349  0010E6  AE30               	btfss	scale@scl,7,c
  2350  0010E8  D101               	goto	l163
  2351                           
  2352                           ;doprnt.c: 429: scl = -scl;
  2353  0010EA  6C30               	negf	scale@scl,c
  2354                           
  2355                           ;doprnt.c: 430: if(scl>=110)
  2356  0010EC  5030               	movf	scale@scl,w,c
  2357  0010EE  0A80               	xorlw	128
  2358  0010F0  0F12               	addlw	-238
  2359  0010F2  A0D8               	btfss	status,0,c
  2360  0010F4  D091               	goto	l164
  2361                           
  2362                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2363  0010F6  0E00               	movlw	0
  2364  0010F8  6E12               	movwf	___wmul@multiplicand+1,c
  2365  0010FA  0E03               	movlw	3
  2366  0010FC  6E11               	movwf	___wmul@multiplicand,c
  2367  0010FE  0E00               	movlw	0
  2368  001100  6E0A               	movwf	___awdiv@divisor+1,c
  2369  001102  0E0A               	movlw	10
  2370  001104  6E09               	movwf	___awdiv@divisor,c
  2371  001106  0E00               	movlw	0
  2372  001108  6E04               	movwf	___awmod@divisor+1,c
  2373  00110A  0E64               	movlw	100
  2374  00110C  6E03               	movwf	___awmod@divisor,c
  2375  00110E  5030               	movf	scale@scl,w,c
  2376  001110  6E01               	movwf	___awmod@dividend,c
  2377  001112  6A02               	clrf	___awmod@dividend+1,c
  2378  001114  BE01               	btfsc	___awmod@dividend,7,c
  2379  001116  0602               	decf	___awmod@dividend+1,f,c
  2380  001118  EC58  F011         	call	___awmod	;wreg free
  2381  00111C  C001  F007         	movff	?___awmod,___awdiv@dividend
  2382  001120  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2383  001124  ECD5  F010         	call	___awdiv	;wreg free
  2384  001128  0E09               	movlw	9
  2385  00112A  2407               	addwf	?___awdiv,w,c
  2386  00112C  6E0F               	movwf	___wmul@multiplier,c
  2387  00112E  0E00               	movlw	0
  2388  001130  2008               	addwfc	?___awdiv+1,w,c
  2389  001132  6E10               	movwf	___wmul@multiplier+1,c
  2390  001134  EC95  F012         	call	___wmul	;wreg free
  2391  001138  0E50               	movlw	low __npowers_
  2392  00113A  240F               	addwf	?___wmul,w,c
  2393  00113C  6EF6               	movwf	tblptrl,c
  2394  00113E  0E08               	movlw	high __npowers_
  2395  001140  2010               	addwfc	?___wmul+1,w,c
  2396  001142  6EF7               	movwf	tblptrh,c
  2397  001144                     	if	0	;There are less than 3 active tblptr bytes
  2398  001144                     	endif
  2399  001144  0009               	tblrd		*+
  2400  001146  CFF5 F01E          	movff	tablat,___ftmul@f2
  2401  00114A  0009               	tblrd		*+
  2402  00114C  CFF5 F01F          	movff	tablat,___ftmul@f2+1
  2403  001150  000A               	tblrd		*-
  2404  001152  CFF5 F020          	movff	tablat,___ftmul@f2+2
  2405  001156  0E00               	movlw	0
  2406  001158  6E0A               	movwf	___awdiv@divisor+1,c
  2407  00115A  0E64               	movlw	100
  2408  00115C  6E09               	movwf	___awdiv@divisor,c
  2409  00115E  5030               	movf	scale@scl,w,c
  2410  001160  6E07               	movwf	___awdiv@dividend,c
  2411  001162  6A08               	clrf	___awdiv@dividend+1,c
  2412  001164  BE07               	btfsc	___awdiv@dividend,7,c
  2413  001166  0608               	decf	___awdiv@dividend+1,f,c
  2414  001168  ECD5  F010         	call	___awdiv	;wreg free
  2415  00116C  0E12               	movlw	18
  2416  00116E  2407               	addwf	?___awdiv,w,c
  2417  001170  6E0F               	movwf	___wmul@multiplier,c
  2418  001172  0E00               	movlw	0
  2419  001174  2008               	addwfc	?___awdiv+1,w,c
  2420  001176  6E10               	movwf	___wmul@multiplier+1,c
  2421  001178  0E00               	movlw	0
  2422  00117A  6E12               	movwf	___wmul@multiplicand+1,c
  2423  00117C  0E03               	movlw	3
  2424  00117E  6E11               	movwf	___wmul@multiplicand,c
  2425  001180  EC95  F012         	call	___wmul	;wreg free
  2426  001184  0E50               	movlw	low __npowers_
  2427  001186  240F               	addwf	?___wmul,w,c
  2428  001188  6EF6               	movwf	tblptrl,c
  2429  00118A  0E08               	movlw	high __npowers_
  2430  00118C  2010               	addwfc	?___wmul+1,w,c
  2431  00118E  6EF7               	movwf	tblptrh,c
  2432  001190                     	if	0	;There are less than 3 active tblptr bytes
  2433  001190                     	endif
  2434  001190  0009               	tblrd		*+
  2435  001192  CFF5 F01B          	movff	tablat,___ftmul@f1
  2436  001196  0009               	tblrd		*+
  2437  001198  CFF5 F01C          	movff	tablat,___ftmul@f1+1
  2438  00119C  000A               	tblrd		*-
  2439  00119E  CFF5 F01D          	movff	tablat,___ftmul@f1+2
  2440  0011A2  EC06  F00F         	call	___ftmul	;wreg free
  2441  0011A6  C01B  F02D         	movff	?___ftmul,_scale$1022
  2442  0011AA  C01C  F02E         	movff	?___ftmul+1,_scale$1022+1
  2443  0011AE  C01D  F02F         	movff	?___ftmul+2,_scale$1022+2
  2444                           
  2445                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2446  0011B2  C02D  F01B         	movff	_scale$1022,___ftmul@f1
  2447  0011B6  C02E  F01C         	movff	_scale$1022+1,___ftmul@f1+1
  2448  0011BA  C02F  F01D         	movff	_scale$1022+2,___ftmul@f1+2
  2449  0011BE  0E00               	movlw	0
  2450  0011C0  6E12               	movwf	___wmul@multiplicand+1,c
  2451  0011C2  0E03               	movlw	3
  2452  0011C4  6E11               	movwf	___wmul@multiplicand,c
  2453  0011C6  0E00               	movlw	0
  2454  0011C8  6E04               	movwf	___awmod@divisor+1,c
  2455  0011CA  0E0A               	movlw	10
  2456  0011CC  6E03               	movwf	___awmod@divisor,c
  2457  0011CE  5030               	movf	scale@scl,w,c
  2458  0011D0  6E01               	movwf	___awmod@dividend,c
  2459  0011D2  6A02               	clrf	___awmod@dividend+1,c
  2460  0011D4  BE01               	btfsc	___awmod@dividend,7,c
  2461  0011D6  0602               	decf	___awmod@dividend+1,f,c
  2462  0011D8  EC58  F011         	call	___awmod	;wreg free
  2463  0011DC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2464  0011E0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2465  0011E4  EC95  F012         	call	___wmul	;wreg free
  2466  0011E8  0E50               	movlw	low __npowers_
  2467  0011EA  240F               	addwf	?___wmul,w,c
  2468  0011EC  6EF6               	movwf	tblptrl,c
  2469  0011EE  0E08               	movlw	high __npowers_
  2470  0011F0  2010               	addwfc	?___wmul+1,w,c
  2471  0011F2  6EF7               	movwf	tblptrh,c
  2472  0011F4                     	if	0	;There are less than 3 active tblptr bytes
  2473  0011F4                     	endif
  2474  0011F4  0009               	tblrd		*+
  2475  0011F6  CFF5 F01E          	movff	tablat,___ftmul@f2
  2476  0011FA  0009               	tblrd		*+
  2477  0011FC  CFF5 F01F          	movff	tablat,___ftmul@f2+1
  2478  001200  000A               	tblrd		*-
  2479  001202  CFF5 F020          	movff	tablat,___ftmul@f2+2
  2480  001206  EC06  F00F         	call	___ftmul	;wreg free
  2481  00120A  C01B  F02A         	movff	?___ftmul,?_scale
  2482  00120E  C01C  F02B         	movff	?___ftmul+1,?_scale+1
  2483  001212  C01D  F02C         	movff	?___ftmul+2,?_scale+2
  2484  001216  0012               	return	
  2485  001218                     l164:
  2486                           
  2487                           ;doprnt.c: 432: else if(scl > 10)
  2488  001218  5030               	movf	scale@scl,w,c
  2489  00121A  0A80               	xorlw	128
  2490  00121C  0F75               	addlw	-139
  2491  00121E  A0D8               	btfss	status,0,c
  2492  001220  D053               	goto	l167
  2493                           
  2494                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2495  001222  0E00               	movlw	0
  2496  001224  6E0A               	movwf	___awdiv@divisor+1,c
  2497  001226  0E0A               	movlw	10
  2498  001228  6E09               	movwf	___awdiv@divisor,c
  2499  00122A  5030               	movf	scale@scl,w,c
  2500  00122C  6E07               	movwf	___awdiv@dividend,c
  2501  00122E  6A08               	clrf	___awdiv@dividend+1,c
  2502  001230  BE07               	btfsc	___awdiv@dividend,7,c
  2503  001232  0608               	decf	___awdiv@dividend+1,f,c
  2504  001234  ECD5  F010         	call	___awdiv	;wreg free
  2505  001238  0E09               	movlw	9
  2506  00123A  2407               	addwf	?___awdiv,w,c
  2507  00123C  6E0F               	movwf	___wmul@multiplier,c
  2508  00123E  0E00               	movlw	0
  2509  001240  2008               	addwfc	?___awdiv+1,w,c
  2510  001242  6E10               	movwf	___wmul@multiplier+1,c
  2511  001244  0E00               	movlw	0
  2512  001246  6E12               	movwf	___wmul@multiplicand+1,c
  2513  001248  0E03               	movlw	3
  2514  00124A  6E11               	movwf	___wmul@multiplicand,c
  2515  00124C  EC95  F012         	call	___wmul	;wreg free
  2516  001250  0E50               	movlw	low __npowers_
  2517  001252  240F               	addwf	?___wmul,w,c
  2518  001254  6EF6               	movwf	tblptrl,c
  2519  001256  0E08               	movlw	high __npowers_
  2520  001258  2010               	addwfc	?___wmul+1,w,c
  2521  00125A  6EF7               	movwf	tblptrh,c
  2522  00125C                     	if	0	;There are less than 3 active tblptr bytes
  2523  00125C                     	endif
  2524  00125C  0009               	tblrd		*+
  2525  00125E  CFF5 F01B          	movff	tablat,___ftmul@f1
  2526  001262  0009               	tblrd		*+
  2527  001264  CFF5 F01C          	movff	tablat,___ftmul@f1+1
  2528  001268  000A               	tblrd		*-
  2529  00126A  CFF5 F01D          	movff	tablat,___ftmul@f1+2
  2530  00126E  0E00               	movlw	0
  2531  001270  6E12               	movwf	___wmul@multiplicand+1,c
  2532  001272  0E03               	movlw	3
  2533  001274  6E11               	movwf	___wmul@multiplicand,c
  2534  001276  0E00               	movlw	0
  2535  001278  6E04               	movwf	___awmod@divisor+1,c
  2536  00127A  0E0A               	movlw	10
  2537  00127C  6E03               	movwf	___awmod@divisor,c
  2538  00127E  5030               	movf	scale@scl,w,c
  2539  001280  6E01               	movwf	___awmod@dividend,c
  2540  001282  6A02               	clrf	___awmod@dividend+1,c
  2541  001284  BE01               	btfsc	___awmod@dividend,7,c
  2542  001286  0602               	decf	___awmod@dividend+1,f,c
  2543  001288  EC58  F011         	call	___awmod	;wreg free
  2544  00128C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2545  001290  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2546  001294  EC95  F012         	call	___wmul	;wreg free
  2547  001298  0E50               	movlw	low __npowers_
  2548  00129A  240F               	addwf	?___wmul,w,c
  2549  00129C  6EF6               	movwf	tblptrl,c
  2550  00129E  0E08               	movlw	high __npowers_
  2551  0012A0  2010               	addwfc	?___wmul+1,w,c
  2552  0012A2  6EF7               	movwf	tblptrh,c
  2553  0012A4                     	if	0	;There are less than 3 active tblptr bytes
  2554  0012A4                     	endif
  2555  0012A4  0009               	tblrd		*+
  2556  0012A6  CFF5 F01E          	movff	tablat,___ftmul@f2
  2557  0012AA  0009               	tblrd		*+
  2558  0012AC  CFF5 F01F          	movff	tablat,___ftmul@f2+1
  2559  0012B0  000A               	tblrd		*-
  2560  0012B2  CFF5 F020          	movff	tablat,___ftmul@f2+2
  2561  0012B6  EC06  F00F         	call	___ftmul	;wreg free
  2562  0012BA  C01B  F02A         	movff	?___ftmul,?_scale
  2563  0012BE  C01C  F02B         	movff	?___ftmul+1,?_scale+1
  2564  0012C2  C01D  F02C         	movff	?___ftmul+2,?_scale+2
  2565  0012C6  0012               	return	
  2566  0012C8                     l167:
  2567                           
  2568                           ;doprnt.c: 434: return _npowers_[scl];
  2569  0012C8  5030               	movf	scale@scl,w,c
  2570  0012CA  0D03               	mullw	3
  2571  0012CC  0E50               	movlw	low __npowers_
  2572  0012CE  24F3               	addwf	prodl,w,c
  2573  0012D0  6EF6               	movwf	tblptrl,c
  2574  0012D2  0E08               	movlw	high __npowers_
  2575  0012D4  20F4               	addwfc	prodh,w,c
  2576  0012D6  6EF7               	movwf	tblptrh,c
  2577  0012D8                     	if	0	;There are less than 3 active tblptr bytes
  2578  0012D8                     	endif
  2579  0012D8  0009               	tblrd		*+
  2580  0012DA  CFF5 F02A          	movff	tablat,?_scale
  2581  0012DE  0009               	tblrd		*+
  2582  0012E0  CFF5 F02B          	movff	tablat,?_scale+1
  2583  0012E4  000A               	tblrd		*-
  2584  0012E6  CFF5 F02C          	movff	tablat,?_scale+2
  2585  0012EA  0012               	return	
  2586  0012EC                     l163:
  2587                           
  2588                           ;doprnt.c: 435: }
  2589                           ;doprnt.c: 436: if(scl>=110)
  2590  0012EC  5030               	movf	scale@scl,w,c
  2591  0012EE  0A80               	xorlw	128
  2592  0012F0  0F12               	addlw	-238
  2593  0012F2  A0D8               	btfss	status,0,c
  2594  0012F4  D091               	goto	l168
  2595                           
  2596                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2597  0012F6  0E00               	movlw	0
  2598  0012F8  6E12               	movwf	___wmul@multiplicand+1,c
  2599  0012FA  0E03               	movlw	3
  2600  0012FC  6E11               	movwf	___wmul@multiplicand,c
  2601  0012FE  0E00               	movlw	0
  2602  001300  6E0A               	movwf	___awdiv@divisor+1,c
  2603  001302  0E0A               	movlw	10
  2604  001304  6E09               	movwf	___awdiv@divisor,c
  2605  001306  0E00               	movlw	0
  2606  001308  6E04               	movwf	___awmod@divisor+1,c
  2607  00130A  0E64               	movlw	100
  2608  00130C  6E03               	movwf	___awmod@divisor,c
  2609  00130E  5030               	movf	scale@scl,w,c
  2610  001310  6E01               	movwf	___awmod@dividend,c
  2611  001312  6A02               	clrf	___awmod@dividend+1,c
  2612  001314  BE01               	btfsc	___awmod@dividend,7,c
  2613  001316  0602               	decf	___awmod@dividend+1,f,c
  2614  001318  EC58  F011         	call	___awmod	;wreg free
  2615  00131C  C001  F007         	movff	?___awmod,___awdiv@dividend
  2616  001320  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2617  001324  ECD5  F010         	call	___awdiv	;wreg free
  2618  001328  0E09               	movlw	9
  2619  00132A  2407               	addwf	?___awdiv,w,c
  2620  00132C  6E0F               	movwf	___wmul@multiplier,c
  2621  00132E  0E00               	movlw	0
  2622  001330  2008               	addwfc	?___awdiv+1,w,c
  2623  001332  6E10               	movwf	___wmul@multiplier+1,c
  2624  001334  EC95  F012         	call	___wmul	;wreg free
  2625  001338  0E29               	movlw	low __powers_
  2626  00133A  240F               	addwf	?___wmul,w,c
  2627  00133C  6EF6               	movwf	tblptrl,c
  2628  00133E  0E08               	movlw	high __powers_
  2629  001340  2010               	addwfc	?___wmul+1,w,c
  2630  001342  6EF7               	movwf	tblptrh,c
  2631  001344                     	if	0	;There are less than 3 active tblptr bytes
  2632  001344                     	endif
  2633  001344  0009               	tblrd		*+
  2634  001346  CFF5 F01E          	movff	tablat,___ftmul@f2
  2635  00134A  0009               	tblrd		*+
  2636  00134C  CFF5 F01F          	movff	tablat,___ftmul@f2+1
  2637  001350  000A               	tblrd		*-
  2638  001352  CFF5 F020          	movff	tablat,___ftmul@f2+2
  2639  001356  0E00               	movlw	0
  2640  001358  6E0A               	movwf	___awdiv@divisor+1,c
  2641  00135A  0E64               	movlw	100
  2642  00135C  6E09               	movwf	___awdiv@divisor,c
  2643  00135E  5030               	movf	scale@scl,w,c
  2644  001360  6E07               	movwf	___awdiv@dividend,c
  2645  001362  6A08               	clrf	___awdiv@dividend+1,c
  2646  001364  BE07               	btfsc	___awdiv@dividend,7,c
  2647  001366  0608               	decf	___awdiv@dividend+1,f,c
  2648  001368  ECD5  F010         	call	___awdiv	;wreg free
  2649  00136C  0E12               	movlw	18
  2650  00136E  2407               	addwf	?___awdiv,w,c
  2651  001370  6E0F               	movwf	___wmul@multiplier,c
  2652  001372  0E00               	movlw	0
  2653  001374  2008               	addwfc	?___awdiv+1,w,c
  2654  001376  6E10               	movwf	___wmul@multiplier+1,c
  2655  001378  0E00               	movlw	0
  2656  00137A  6E12               	movwf	___wmul@multiplicand+1,c
  2657  00137C  0E03               	movlw	3
  2658  00137E  6E11               	movwf	___wmul@multiplicand,c
  2659  001380  EC95  F012         	call	___wmul	;wreg free
  2660  001384  0E29               	movlw	low __powers_
  2661  001386  240F               	addwf	?___wmul,w,c
  2662  001388  6EF6               	movwf	tblptrl,c
  2663  00138A  0E08               	movlw	high __powers_
  2664  00138C  2010               	addwfc	?___wmul+1,w,c
  2665  00138E  6EF7               	movwf	tblptrh,c
  2666  001390                     	if	0	;There are less than 3 active tblptr bytes
  2667  001390                     	endif
  2668  001390  0009               	tblrd		*+
  2669  001392  CFF5 F01B          	movff	tablat,___ftmul@f1
  2670  001396  0009               	tblrd		*+
  2671  001398  CFF5 F01C          	movff	tablat,___ftmul@f1+1
  2672  00139C  000A               	tblrd		*-
  2673  00139E  CFF5 F01D          	movff	tablat,___ftmul@f1+2
  2674  0013A2  EC06  F00F         	call	___ftmul	;wreg free
  2675  0013A6  C01B  F02D         	movff	?___ftmul,_scale$1022
  2676  0013AA  C01C  F02E         	movff	?___ftmul+1,_scale$1022+1
  2677  0013AE  C01D  F02F         	movff	?___ftmul+2,_scale$1022+2
  2678                           
  2679                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2680  0013B2  C02D  F01B         	movff	_scale$1022,___ftmul@f1
  2681  0013B6  C02E  F01C         	movff	_scale$1022+1,___ftmul@f1+1
  2682  0013BA  C02F  F01D         	movff	_scale$1022+2,___ftmul@f1+2
  2683  0013BE  0E00               	movlw	0
  2684  0013C0  6E12               	movwf	___wmul@multiplicand+1,c
  2685  0013C2  0E03               	movlw	3
  2686  0013C4  6E11               	movwf	___wmul@multiplicand,c
  2687  0013C6  0E00               	movlw	0
  2688  0013C8  6E04               	movwf	___awmod@divisor+1,c
  2689  0013CA  0E0A               	movlw	10
  2690  0013CC  6E03               	movwf	___awmod@divisor,c
  2691  0013CE  5030               	movf	scale@scl,w,c
  2692  0013D0  6E01               	movwf	___awmod@dividend,c
  2693  0013D2  6A02               	clrf	___awmod@dividend+1,c
  2694  0013D4  BE01               	btfsc	___awmod@dividend,7,c
  2695  0013D6  0602               	decf	___awmod@dividend+1,f,c
  2696  0013D8  EC58  F011         	call	___awmod	;wreg free
  2697  0013DC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2698  0013E0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2699  0013E4  EC95  F012         	call	___wmul	;wreg free
  2700  0013E8  0E29               	movlw	low __powers_
  2701  0013EA  240F               	addwf	?___wmul,w,c
  2702  0013EC  6EF6               	movwf	tblptrl,c
  2703  0013EE  0E08               	movlw	high __powers_
  2704  0013F0  2010               	addwfc	?___wmul+1,w,c
  2705  0013F2  6EF7               	movwf	tblptrh,c
  2706  0013F4                     	if	0	;There are less than 3 active tblptr bytes
  2707  0013F4                     	endif
  2708  0013F4  0009               	tblrd		*+
  2709  0013F6  CFF5 F01E          	movff	tablat,___ftmul@f2
  2710  0013FA  0009               	tblrd		*+
  2711  0013FC  CFF5 F01F          	movff	tablat,___ftmul@f2+1
  2712  001400  000A               	tblrd		*-
  2713  001402  CFF5 F020          	movff	tablat,___ftmul@f2+2
  2714  001406  EC06  F00F         	call	___ftmul	;wreg free
  2715  00140A  C01B  F02A         	movff	?___ftmul,?_scale
  2716  00140E  C01C  F02B         	movff	?___ftmul+1,?_scale+1
  2717  001412  C01D  F02C         	movff	?___ftmul+2,?_scale+2
  2718  001416  0012               	return	
  2719  001418                     l168:
  2720                           
  2721                           ;doprnt.c: 438: else if(scl > 10)
  2722  001418  5030               	movf	scale@scl,w,c
  2723  00141A  0A80               	xorlw	128
  2724  00141C  0F75               	addlw	-139
  2725  00141E  A0D8               	btfss	status,0,c
  2726  001420  D053               	goto	l170
  2727                           
  2728                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2729  001422  0E00               	movlw	0
  2730  001424  6E0A               	movwf	___awdiv@divisor+1,c
  2731  001426  0E0A               	movlw	10
  2732  001428  6E09               	movwf	___awdiv@divisor,c
  2733  00142A  5030               	movf	scale@scl,w,c
  2734  00142C  6E07               	movwf	___awdiv@dividend,c
  2735  00142E  6A08               	clrf	___awdiv@dividend+1,c
  2736  001430  BE07               	btfsc	___awdiv@dividend,7,c
  2737  001432  0608               	decf	___awdiv@dividend+1,f,c
  2738  001434  ECD5  F010         	call	___awdiv	;wreg free
  2739  001438  0E09               	movlw	9
  2740  00143A  2407               	addwf	?___awdiv,w,c
  2741  00143C  6E0F               	movwf	___wmul@multiplier,c
  2742  00143E  0E00               	movlw	0
  2743  001440  2008               	addwfc	?___awdiv+1,w,c
  2744  001442  6E10               	movwf	___wmul@multiplier+1,c
  2745  001444  0E00               	movlw	0
  2746  001446  6E12               	movwf	___wmul@multiplicand+1,c
  2747  001448  0E03               	movlw	3
  2748  00144A  6E11               	movwf	___wmul@multiplicand,c
  2749  00144C  EC95  F012         	call	___wmul	;wreg free
  2750  001450  0E29               	movlw	low __powers_
  2751  001452  240F               	addwf	?___wmul,w,c
  2752  001454  6EF6               	movwf	tblptrl,c
  2753  001456  0E08               	movlw	high __powers_
  2754  001458  2010               	addwfc	?___wmul+1,w,c
  2755  00145A  6EF7               	movwf	tblptrh,c
  2756  00145C                     	if	0	;There are less than 3 active tblptr bytes
  2757  00145C                     	endif
  2758  00145C  0009               	tblrd		*+
  2759  00145E  CFF5 F01B          	movff	tablat,___ftmul@f1
  2760  001462  0009               	tblrd		*+
  2761  001464  CFF5 F01C          	movff	tablat,___ftmul@f1+1
  2762  001468  000A               	tblrd		*-
  2763  00146A  CFF5 F01D          	movff	tablat,___ftmul@f1+2
  2764  00146E  0E00               	movlw	0
  2765  001470  6E12               	movwf	___wmul@multiplicand+1,c
  2766  001472  0E03               	movlw	3
  2767  001474  6E11               	movwf	___wmul@multiplicand,c
  2768  001476  0E00               	movlw	0
  2769  001478  6E04               	movwf	___awmod@divisor+1,c
  2770  00147A  0E0A               	movlw	10
  2771  00147C  6E03               	movwf	___awmod@divisor,c
  2772  00147E  5030               	movf	scale@scl,w,c
  2773  001480  6E01               	movwf	___awmod@dividend,c
  2774  001482  6A02               	clrf	___awmod@dividend+1,c
  2775  001484  BE01               	btfsc	___awmod@dividend,7,c
  2776  001486  0602               	decf	___awmod@dividend+1,f,c
  2777  001488  EC58  F011         	call	___awmod	;wreg free
  2778  00148C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2779  001490  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2780  001494  EC95  F012         	call	___wmul	;wreg free
  2781  001498  0E29               	movlw	low __powers_
  2782  00149A  240F               	addwf	?___wmul,w,c
  2783  00149C  6EF6               	movwf	tblptrl,c
  2784  00149E  0E08               	movlw	high __powers_
  2785  0014A0  2010               	addwfc	?___wmul+1,w,c
  2786  0014A2  6EF7               	movwf	tblptrh,c
  2787  0014A4                     	if	0	;There are less than 3 active tblptr bytes
  2788  0014A4                     	endif
  2789  0014A4  0009               	tblrd		*+
  2790  0014A6  CFF5 F01E          	movff	tablat,___ftmul@f2
  2791  0014AA  0009               	tblrd		*+
  2792  0014AC  CFF5 F01F          	movff	tablat,___ftmul@f2+1
  2793  0014B0  000A               	tblrd		*-
  2794  0014B2  CFF5 F020          	movff	tablat,___ftmul@f2+2
  2795  0014B6  EC06  F00F         	call	___ftmul	;wreg free
  2796  0014BA  C01B  F02A         	movff	?___ftmul,?_scale
  2797  0014BE  C01C  F02B         	movff	?___ftmul+1,?_scale+1
  2798  0014C2  C01D  F02C         	movff	?___ftmul+2,?_scale+2
  2799  0014C6  0012               	return	
  2800  0014C8                     l170:
  2801                           
  2802                           ;doprnt.c: 440: return _powers_[scl];
  2803  0014C8  5030               	movf	scale@scl,w,c
  2804  0014CA  0D03               	mullw	3
  2805  0014CC  0E29               	movlw	low __powers_
  2806  0014CE  24F3               	addwf	prodl,w,c
  2807  0014D0  6EF6               	movwf	tblptrl,c
  2808  0014D2  0E08               	movlw	high __powers_
  2809  0014D4  20F4               	addwfc	prodh,w,c
  2810  0014D6  6EF7               	movwf	tblptrh,c
  2811  0014D8                     	if	0	;There are less than 3 active tblptr bytes
  2812  0014D8                     	endif
  2813  0014D8  0009               	tblrd		*+
  2814  0014DA  CFF5 F02A          	movff	tablat,?_scale
  2815  0014DE  0009               	tblrd		*+
  2816  0014E0  CFF5 F02B          	movff	tablat,?_scale+1
  2817  0014E4  000A               	tblrd		*-
  2818  0014E6  CFF5 F02C          	movff	tablat,?_scale+2
  2819  0014EA  0012               	return	
  2820  0014EC                     __end_of_scale:
  2821                           	opt stack 0
  2822                           tblptru	equ	0xFF8
  2823                           tblptrh	equ	0xFF7
  2824                           tblptrl	equ	0xFF6
  2825                           tablat	equ	0xFF5
  2826                           prodh	equ	0xFF4
  2827                           prodl	equ	0xFF3
  2828                           postinc0	equ	0xFEE
  2829                           wreg	equ	0xFE8
  2830                           postinc2	equ	0xFDE
  2831                           postdec2	equ	0xFDD
  2832                           fsr2h	equ	0xFDA
  2833                           fsr2l	equ	0xFD9
  2834                           status	equ	0xFD8
  2835                           
  2836 ;; *************** function _putch *****************
  2837 ;; Defined at:
  2838 ;;		line 82 in file "LCD.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;  dato            1    wreg     unsigned char 
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;  dato            1    2[COMRAM] unsigned char 
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  1    wreg      void 
  2845 ;; Registers used:
  2846 ;;		wreg, status,2, status,0, cstack
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2852 ;;      Params:         0       0       0       0       0       0       0       0       0
  2853 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2854 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2855 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2856 ;;Total ram usage:        1 bytes
  2857 ;; Hardware stack levels used:    1
  2858 ;; Hardware stack levels required when called:    2
  2859 ;; This function calls:
  2860 ;;		_LCD_dato
  2861 ;; This function is called by:
  2862 ;;		_printf
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866                           	psect	text3
  2867  0025FA                     __ptext3:
  2868                           	opt stack 0
  2869  0025FA                     _putch:
  2870                           	opt stack 27
  2871                           
  2872                           ;incstack = 0
  2873                           ;putch@dato stored from wreg
  2874  0025FA  6E03               	movwf	putch@dato,c
  2875                           
  2876                           ;LCD.c: 83: LCD_dato(dato);
  2877  0025FC  5003               	movf	putch@dato,w,c
  2878  0025FE  ECF1  F012         	call	_LCD_dato
  2879  002602  0012               	return		;funcret
  2880  002604                     __end_of_putch:
  2881                           	opt stack 0
  2882                           tblptru	equ	0xFF8
  2883                           tblptrh	equ	0xFF7
  2884                           tblptrl	equ	0xFF6
  2885                           tablat	equ	0xFF5
  2886                           prodh	equ	0xFF4
  2887                           prodl	equ	0xFF3
  2888                           postinc0	equ	0xFEE
  2889                           wreg	equ	0xFE8
  2890                           postinc2	equ	0xFDE
  2891                           postdec2	equ	0xFDD
  2892                           fsr2h	equ	0xFDA
  2893                           fsr2l	equ	0xFD9
  2894                           status	equ	0xFD8
  2895                           
  2896 ;; *************** function _isdigit *****************
  2897 ;; Defined at:
  2898 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;  c               1    wreg     unsigned char 
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;  c               1    2[COMRAM] unsigned char 
  2903 ;; Return value:  Size  Location     Type
  2904 ;;		None               void
  2905 ;; Registers used:
  2906 ;;		wreg, status,2, status,0
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2912 ;;      Params:         0       0       0       0       0       0       0       0       0
  2913 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2914 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2915 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2916 ;;Total ram usage:        3 bytes
  2917 ;; Hardware stack levels used:    1
  2918 ;; This function calls:
  2919 ;;		Nothing
  2920 ;; This function is called by:
  2921 ;;		_printf
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925                           	psect	text4
  2926  002598                     __ptext4:
  2927                           	opt stack 0
  2928  002598                     _isdigit:
  2929                           	opt stack 29
  2930                           
  2931                           ;incstack = 0
  2932                           ;isdigit@c stored from wreg
  2933  002598  6E03               	movwf	isdigit@c,c
  2934  00259A  0E00               	movlw	0
  2935  00259C  6E02               	movwf	_isdigit$652,c
  2936  00259E  0E3A               	movlw	58
  2937  0025A0  6003               	cpfslt	isdigit@c,c
  2938  0025A2  D005               	goto	l612
  2939  0025A4  0E2F               	movlw	47
  2940  0025A6  6403               	cpfsgt	isdigit@c,c
  2941  0025A8  D002               	goto	l612
  2942  0025AA  0E01               	movlw	1
  2943  0025AC  6E02               	movwf	_isdigit$652,c
  2944  0025AE                     l612:
  2945  0025AE  C002  F001         	movff	_isdigit$652,??_isdigit
  2946  0025B2  3001               	rrcf	??_isdigit,w,c
  2947  0025B4  0012               	return	
  2948  0025B6                     __end_of_isdigit:
  2949                           	opt stack 0
  2950                           tblptru	equ	0xFF8
  2951                           tblptrh	equ	0xFF7
  2952                           tblptrl	equ	0xFF6
  2953                           tablat	equ	0xFF5
  2954                           prodh	equ	0xFF4
  2955                           prodl	equ	0xFF3
  2956                           postinc0	equ	0xFEE
  2957                           wreg	equ	0xFE8
  2958                           postinc2	equ	0xFDE
  2959                           postdec2	equ	0xFDD
  2960                           fsr2h	equ	0xFDA
  2961                           fsr2l	equ	0xFD9
  2962                           status	equ	0xFD8
  2963                           
  2964 ;; *************** function _fround *****************
  2965 ;; Defined at:
  2966 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2967 ;; Parameters:    Size  Location     Type
  2968 ;;  prec            1    wreg     unsigned char 
  2969 ;; Auto vars:     Size  Location     Type
  2970 ;;  prec            1   50[COMRAM] unsigned char 
  2971 ;; Return value:  Size  Location     Type
  2972 ;;                  3   41[COMRAM] unsigned char 
  2973 ;; Registers used:
  2974 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2975 ;; Tracked objects:
  2976 ;;		On entry : 0/0
  2977 ;;		On exit  : 0/0
  2978 ;;		Unchanged: 0/0
  2979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2980 ;;      Params:         3       0       0       0       0       0       0       0       0
  2981 ;;      Locals:         7       0       0       0       0       0       0       0       0
  2982 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2983 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2984 ;;Total ram usage:       10 bytes
  2985 ;; Hardware stack levels used:    1
  2986 ;; Hardware stack levels required when called:    2
  2987 ;; This function calls:
  2988 ;;		___awdiv
  2989 ;;		___awmod
  2990 ;;		___ftmul
  2991 ;;		___wmul
  2992 ;; This function is called by:
  2993 ;;		_printf
  2994 ;; This function uses a non-reentrant model
  2995 ;;
  2996                           
  2997                           	psect	text5
  2998  0014EC                     __ptext5:
  2999                           	opt stack 0
  3000  0014EC                     _fround:
  3001                           	opt stack 27
  3002                           
  3003                           ;incstack = 0
  3004                           ;fround@prec stored from wreg
  3005  0014EC  6E33               	movwf	fround@prec,c
  3006                           
  3007                           ;doprnt.c: 413: if(prec>=110)
  3008  0014EE  0E6D               	movlw	109
  3009  0014F0  6433               	cpfsgt	fround@prec,c
  3010  0014F2  D09F               	goto	l157
  3011                           
  3012                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3013  0014F4  0E00               	movlw	0
  3014  0014F6  6E12               	movwf	___wmul@multiplicand+1,c
  3015  0014F8  0E03               	movlw	3
  3016  0014FA  6E11               	movwf	___wmul@multiplicand,c
  3017  0014FC  0E00               	movlw	0
  3018  0014FE  6E0A               	movwf	___awdiv@divisor+1,c
  3019  001500  0E0A               	movlw	10
  3020  001502  6E09               	movwf	___awdiv@divisor,c
  3021  001504  0E00               	movlw	0
  3022  001506  6E04               	movwf	___awmod@divisor+1,c
  3023  001508  0E64               	movlw	100
  3024  00150A  6E03               	movwf	___awmod@divisor,c
  3025  00150C  C033  F001         	movff	fround@prec,___awmod@dividend
  3026  001510  6A02               	clrf	___awmod@dividend+1,c
  3027  001512  EC58  F011         	call	___awmod	;wreg free
  3028  001516  C001  F007         	movff	?___awmod,___awdiv@dividend
  3029  00151A  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3030  00151E  ECD5  F010         	call	___awdiv	;wreg free
  3031  001522  0E09               	movlw	9
  3032  001524  2407               	addwf	?___awdiv,w,c
  3033  001526  6E0F               	movwf	___wmul@multiplier,c
  3034  001528  0E00               	movlw	0
  3035  00152A  2008               	addwfc	?___awdiv+1,w,c
  3036  00152C  6E10               	movwf	___wmul@multiplier+1,c
  3037  00152E  EC95  F012         	call	___wmul	;wreg free
  3038  001532  0E50               	movlw	low __npowers_
  3039  001534  240F               	addwf	?___wmul,w,c
  3040  001536  6EF6               	movwf	tblptrl,c
  3041  001538  0E08               	movlw	high __npowers_
  3042  00153A  2010               	addwfc	?___wmul+1,w,c
  3043  00153C  6EF7               	movwf	tblptrh,c
  3044  00153E                     	if	0	;There are less than 3 active tblptr bytes
  3045  00153E                     	endif
  3046  00153E  0009               	tblrd		*+
  3047  001540  CFF5 F01E          	movff	tablat,___ftmul@f2
  3048  001544  0009               	tblrd		*+
  3049  001546  CFF5 F01F          	movff	tablat,___ftmul@f2+1
  3050  00154A  000A               	tblrd		*-
  3051  00154C  CFF5 F020          	movff	tablat,___ftmul@f2+2
  3052  001550  0E00               	movlw	0
  3053  001552  6E0A               	movwf	___awdiv@divisor+1,c
  3054  001554  0E64               	movlw	100
  3055  001556  6E09               	movwf	___awdiv@divisor,c
  3056  001558  C033  F007         	movff	fround@prec,___awdiv@dividend
  3057  00155C  6A08               	clrf	___awdiv@dividend+1,c
  3058  00155E  ECD5  F010         	call	___awdiv	;wreg free
  3059  001562  0E12               	movlw	18
  3060  001564  2407               	addwf	?___awdiv,w,c
  3061  001566  6E0F               	movwf	___wmul@multiplier,c
  3062  001568  0E00               	movlw	0
  3063  00156A  2008               	addwfc	?___awdiv+1,w,c
  3064  00156C  6E10               	movwf	___wmul@multiplier+1,c
  3065  00156E  0E00               	movlw	0
  3066  001570  6E12               	movwf	___wmul@multiplicand+1,c
  3067  001572  0E03               	movlw	3
  3068  001574  6E11               	movwf	___wmul@multiplicand,c
  3069  001576  EC95  F012         	call	___wmul	;wreg free
  3070  00157A  0E50               	movlw	low __npowers_
  3071  00157C  240F               	addwf	?___wmul,w,c
  3072  00157E  6EF6               	movwf	tblptrl,c
  3073  001580  0E08               	movlw	high __npowers_
  3074  001582  2010               	addwfc	?___wmul+1,w,c
  3075  001584  6EF7               	movwf	tblptrh,c
  3076  001586                     	if	0	;There are less than 3 active tblptr bytes
  3077  001586                     	endif
  3078  001586  0009               	tblrd		*+
  3079  001588  CFF5 F01B          	movff	tablat,___ftmul@f1
  3080  00158C  0009               	tblrd		*+
  3081  00158E  CFF5 F01C          	movff	tablat,___ftmul@f1+1
  3082  001592  000A               	tblrd		*-
  3083  001594  CFF5 F01D          	movff	tablat,___ftmul@f1+2
  3084  001598  EC06  F00F         	call	___ftmul	;wreg free
  3085  00159C  C01B  F030         	movff	?___ftmul,_fround$1020
  3086  0015A0  C01C  F031         	movff	?___ftmul+1,_fround$1020+1
  3087  0015A4  C01D  F032         	movff	?___ftmul+2,_fround$1020+2
  3088                           
  3089                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3090  0015A8  0E00               	movlw	0
  3091  0015AA  6E12               	movwf	___wmul@multiplicand+1,c
  3092  0015AC  0E03               	movlw	3
  3093  0015AE  6E11               	movwf	___wmul@multiplicand,c
  3094  0015B0  0E00               	movlw	0
  3095  0015B2  6E04               	movwf	___awmod@divisor+1,c
  3096  0015B4  0E0A               	movlw	10
  3097  0015B6  6E03               	movwf	___awmod@divisor,c
  3098  0015B8  C033  F001         	movff	fround@prec,___awmod@dividend
  3099  0015BC  6A02               	clrf	___awmod@dividend+1,c
  3100  0015BE  EC58  F011         	call	___awmod	;wreg free
  3101  0015C2  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3102  0015C6  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3103  0015CA  EC95  F012         	call	___wmul	;wreg free
  3104  0015CE  0E50               	movlw	low __npowers_
  3105  0015D0  240F               	addwf	?___wmul,w,c
  3106  0015D2  6EF6               	movwf	tblptrl,c
  3107  0015D4  0E08               	movlw	high __npowers_
  3108  0015D6  2010               	addwfc	?___wmul+1,w,c
  3109  0015D8  6EF7               	movwf	tblptrh,c
  3110  0015DA                     	if	0	;There are less than 3 active tblptr bytes
  3111  0015DA                     	endif
  3112  0015DA  0009               	tblrd		*+
  3113  0015DC  CFF5 F01E          	movff	tablat,___ftmul@f2
  3114  0015E0  0009               	tblrd		*+
  3115  0015E2  CFF5 F01F          	movff	tablat,___ftmul@f2+1
  3116  0015E6  000A               	tblrd		*-
  3117  0015E8  CFF5 F020          	movff	tablat,___ftmul@f2+2
  3118  0015EC  C030  F01B         	movff	_fround$1020,___ftmul@f1
  3119  0015F0  C031  F01C         	movff	_fround$1020+1,___ftmul@f1+1
  3120  0015F4  C032  F01D         	movff	_fround$1020+2,___ftmul@f1+2
  3121  0015F8  EC06  F00F         	call	___ftmul	;wreg free
  3122  0015FC  C01B  F02D         	movff	?___ftmul,_fround$1021
  3123  001600  C01C  F02E         	movff	?___ftmul+1,_fround$1021+1
  3124  001604  C01D  F02F         	movff	?___ftmul+2,_fround$1021+2
  3125                           
  3126                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3127  001608  C02D  F01B         	movff	_fround$1021,___ftmul@f1
  3128  00160C  C02E  F01C         	movff	_fround$1021+1,___ftmul@f1+1
  3129  001610  C02F  F01D         	movff	_fround$1021+2,___ftmul@f1+2
  3130  001614  0E00               	movlw	0
  3131  001616  6E1E               	movwf	___ftmul@f2,c
  3132  001618  0E00               	movlw	0
  3133  00161A  6E1F               	movwf	___ftmul@f2+1,c
  3134  00161C  0E3F               	movlw	63
  3135  00161E  6E20               	movwf	___ftmul@f2+2,c
  3136  001620  EC06  F00F         	call	___ftmul	;wreg free
  3137  001624  C01B  F02A         	movff	?___ftmul,?_fround
  3138  001628  C01C  F02B         	movff	?___ftmul+1,?_fround+1
  3139  00162C  C01D  F02C         	movff	?___ftmul+2,?_fround+2
  3140  001630  0012               	return	
  3141  001632                     l157:
  3142                           
  3143                           ;doprnt.c: 415: else if(prec > 10)
  3144  001632  0E0A               	movlw	10
  3145  001634  6433               	cpfsgt	fround@prec,c
  3146  001636  D063               	goto	l160
  3147                           
  3148                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3149  001638  0E00               	movlw	0
  3150  00163A  6E12               	movwf	___wmul@multiplicand+1,c
  3151  00163C  0E03               	movlw	3
  3152  00163E  6E11               	movwf	___wmul@multiplicand,c
  3153  001640  0E00               	movlw	0
  3154  001642  6E04               	movwf	___awmod@divisor+1,c
  3155  001644  0E0A               	movlw	10
  3156  001646  6E03               	movwf	___awmod@divisor,c
  3157  001648  C033  F001         	movff	fround@prec,___awmod@dividend
  3158  00164C  6A02               	clrf	___awmod@dividend+1,c
  3159  00164E  EC58  F011         	call	___awmod	;wreg free
  3160  001652  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3161  001656  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3162  00165A  EC95  F012         	call	___wmul	;wreg free
  3163  00165E  0E50               	movlw	low __npowers_
  3164  001660  240F               	addwf	?___wmul,w,c
  3165  001662  6EF6               	movwf	tblptrl,c
  3166  001664  0E08               	movlw	high __npowers_
  3167  001666  2010               	addwfc	?___wmul+1,w,c
  3168  001668  6EF7               	movwf	tblptrh,c
  3169  00166A                     	if	0	;There are less than 3 active tblptr bytes
  3170  00166A                     	endif
  3171  00166A  0009               	tblrd		*+
  3172  00166C  CFF5 F01E          	movff	tablat,___ftmul@f2
  3173  001670  0009               	tblrd		*+
  3174  001672  CFF5 F01F          	movff	tablat,___ftmul@f2+1
  3175  001676  000A               	tblrd		*-
  3176  001678  CFF5 F020          	movff	tablat,___ftmul@f2+2
  3177  00167C  0E00               	movlw	0
  3178  00167E  6E0A               	movwf	___awdiv@divisor+1,c
  3179  001680  0E0A               	movlw	10
  3180  001682  6E09               	movwf	___awdiv@divisor,c
  3181  001684  C033  F007         	movff	fround@prec,___awdiv@dividend
  3182  001688  6A08               	clrf	___awdiv@dividend+1,c
  3183  00168A  ECD5  F010         	call	___awdiv	;wreg free
  3184  00168E  0E09               	movlw	9
  3185  001690  2407               	addwf	?___awdiv,w,c
  3186  001692  6E0F               	movwf	___wmul@multiplier,c
  3187  001694  0E00               	movlw	0
  3188  001696  2008               	addwfc	?___awdiv+1,w,c
  3189  001698  6E10               	movwf	___wmul@multiplier+1,c
  3190  00169A  0E00               	movlw	0
  3191  00169C  6E12               	movwf	___wmul@multiplicand+1,c
  3192  00169E  0E03               	movlw	3
  3193  0016A0  6E11               	movwf	___wmul@multiplicand,c
  3194  0016A2  EC95  F012         	call	___wmul	;wreg free
  3195  0016A6  0E50               	movlw	low __npowers_
  3196  0016A8  240F               	addwf	?___wmul,w,c
  3197  0016AA  6EF6               	movwf	tblptrl,c
  3198  0016AC  0E08               	movlw	high __npowers_
  3199  0016AE  2010               	addwfc	?___wmul+1,w,c
  3200  0016B0  6EF7               	movwf	tblptrh,c
  3201  0016B2                     	if	0	;There are less than 3 active tblptr bytes
  3202  0016B2                     	endif
  3203  0016B2  0009               	tblrd		*+
  3204  0016B4  CFF5 F01B          	movff	tablat,___ftmul@f1
  3205  0016B8  0009               	tblrd		*+
  3206  0016BA  CFF5 F01C          	movff	tablat,___ftmul@f1+1
  3207  0016BE  000A               	tblrd		*-
  3208  0016C0  CFF5 F01D          	movff	tablat,___ftmul@f1+2
  3209  0016C4  EC06  F00F         	call	___ftmul	;wreg free
  3210  0016C8  C01B  F030         	movff	?___ftmul,_fround$1020
  3211  0016CC  C01C  F031         	movff	?___ftmul+1,_fround$1020+1
  3212  0016D0  C01D  F032         	movff	?___ftmul+2,_fround$1020+2
  3213                           
  3214                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3215  0016D4  C030  F01B         	movff	_fround$1020,___ftmul@f1
  3216  0016D8  C031  F01C         	movff	_fround$1020+1,___ftmul@f1+1
  3217  0016DC  C032  F01D         	movff	_fround$1020+2,___ftmul@f1+2
  3218  0016E0  0E00               	movlw	0
  3219  0016E2  6E1E               	movwf	___ftmul@f2,c
  3220  0016E4  0E00               	movlw	0
  3221  0016E6  6E1F               	movwf	___ftmul@f2+1,c
  3222  0016E8  0E3F               	movlw	63
  3223  0016EA  6E20               	movwf	___ftmul@f2+2,c
  3224  0016EC  EC06  F00F         	call	___ftmul	;wreg free
  3225  0016F0  C01B  F02A         	movff	?___ftmul,?_fround
  3226  0016F4  C01C  F02B         	movff	?___ftmul+1,?_fround+1
  3227  0016F8  C01D  F02C         	movff	?___ftmul+2,?_fround+2
  3228  0016FC  0012               	return	
  3229  0016FE                     l160:
  3230                           
  3231                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3232  0016FE  5033               	movf	fround@prec,w,c
  3233  001700  0D03               	mullw	3
  3234  001702  0E50               	movlw	low __npowers_
  3235  001704  24F3               	addwf	prodl,w,c
  3236  001706  6EF6               	movwf	tblptrl,c
  3237  001708  0E08               	movlw	high __npowers_
  3238  00170A  20F4               	addwfc	prodh,w,c
  3239  00170C  6EF7               	movwf	tblptrh,c
  3240  00170E                     	if	0	;There are less than 3 active tblptr bytes
  3241  00170E                     	endif
  3242  00170E  0009               	tblrd		*+
  3243  001710  CFF5 F01B          	movff	tablat,___ftmul@f1
  3244  001714  0009               	tblrd		*+
  3245  001716  CFF5 F01C          	movff	tablat,___ftmul@f1+1
  3246  00171A  000A               	tblrd		*-
  3247  00171C  CFF5 F01D          	movff	tablat,___ftmul@f1+2
  3248  001720  0E00               	movlw	0
  3249  001722  6E1E               	movwf	___ftmul@f2,c
  3250  001724  0E00               	movlw	0
  3251  001726  6E1F               	movwf	___ftmul@f2+1,c
  3252  001728  0E3F               	movlw	63
  3253  00172A  6E20               	movwf	___ftmul@f2+2,c
  3254  00172C  EC06  F00F         	call	___ftmul	;wreg free
  3255  001730  C01B  F02A         	movff	?___ftmul,?_fround
  3256  001734  C01C  F02B         	movff	?___ftmul+1,?_fround+1
  3257  001738  C01D  F02C         	movff	?___ftmul+2,?_fround+2
  3258  00173C  0012               	return	
  3259  00173E                     __end_of_fround:
  3260                           	opt stack 0
  3261                           tblptru	equ	0xFF8
  3262                           tblptrh	equ	0xFF7
  3263                           tblptrl	equ	0xFF6
  3264                           tablat	equ	0xFF5
  3265                           prodh	equ	0xFF4
  3266                           prodl	equ	0xFF3
  3267                           postinc0	equ	0xFEE
  3268                           wreg	equ	0xFE8
  3269                           postinc2	equ	0xFDE
  3270                           postdec2	equ	0xFDD
  3271                           fsr2h	equ	0xFDA
  3272                           fsr2l	equ	0xFD9
  3273                           status	equ	0xFD8
  3274                           
  3275 ;; *************** function ___wmul *****************
  3276 ;; Defined at:
  3277 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;  multiplier      2   14[COMRAM] unsigned int 
  3280 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3281 ;; Auto vars:     Size  Location     Type
  3282 ;;  product         2   18[COMRAM] unsigned int 
  3283 ;; Return value:  Size  Location     Type
  3284 ;;                  2   14[COMRAM] unsigned int 
  3285 ;; Registers used:
  3286 ;;		wreg, status,2, status,0, prodl, prodh
  3287 ;; Tracked objects:
  3288 ;;		On entry : 0/0
  3289 ;;		On exit  : 0/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3292 ;;      Params:         4       0       0       0       0       0       0       0       0
  3293 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3294 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3295 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3296 ;;Total ram usage:        6 bytes
  3297 ;; Hardware stack levels used:    1
  3298 ;; This function calls:
  3299 ;;		Nothing
  3300 ;; This function is called by:
  3301 ;;		_fround
  3302 ;;		_scale
  3303 ;;		_printf
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307                           	psect	text6
  3308  00252A                     __ptext6:
  3309                           	opt stack 0
  3310  00252A                     ___wmul:
  3311                           	opt stack 28
  3312                           
  3313                           ;incstack = 0
  3314  00252A  500F               	movf	___wmul@multiplier,w,c
  3315  00252C  0211               	mulwf	___wmul@multiplicand,c
  3316  00252E  CFF3 F013          	movff	prodl,___wmul@product
  3317  002532  CFF4 F014          	movff	prodh,___wmul@product+1
  3318  002536  500F               	movf	___wmul@multiplier,w,c
  3319  002538  0212               	mulwf	___wmul@multiplicand+1,c
  3320  00253A  50F3               	movf	prodl,w,c
  3321  00253C  2614               	addwf	___wmul@product+1,f,c
  3322  00253E  5010               	movf	___wmul@multiplier+1,w,c
  3323  002540  0211               	mulwf	___wmul@multiplicand,c
  3324  002542  50F3               	movf	prodl,w,c
  3325  002544  2614               	addwf	___wmul@product+1,f,c
  3326  002546  C013  F00F         	movff	___wmul@product,?___wmul
  3327  00254A  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3328  00254E  0012               	return	
  3329  002550                     __end_of___wmul:
  3330                           	opt stack 0
  3331                           tblptru	equ	0xFF8
  3332                           tblptrh	equ	0xFF7
  3333                           tblptrl	equ	0xFF6
  3334                           tablat	equ	0xFF5
  3335                           prodh	equ	0xFF4
  3336                           prodl	equ	0xFF3
  3337                           postinc0	equ	0xFEE
  3338                           wreg	equ	0xFE8
  3339                           postinc2	equ	0xFDE
  3340                           postdec2	equ	0xFDD
  3341                           fsr2h	equ	0xFDA
  3342                           fsr2l	equ	0xFD9
  3343                           status	equ	0xFD8
  3344                           
  3345 ;; *************** function ___awmod *****************
  3346 ;; Defined at:
  3347 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;  dividend        2    0[COMRAM] int 
  3350 ;;  divisor         2    2[COMRAM] int 
  3351 ;; Auto vars:     Size  Location     Type
  3352 ;;  sign            1    5[COMRAM] unsigned char 
  3353 ;;  counter         1    4[COMRAM] unsigned char 
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  2    0[COMRAM] int 
  3356 ;; Registers used:
  3357 ;;		wreg, status,2, status,0
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3363 ;;      Params:         4       0       0       0       0       0       0       0       0
  3364 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3365 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3366 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3367 ;;Total ram usage:        6 bytes
  3368 ;; Hardware stack levels used:    1
  3369 ;; This function calls:
  3370 ;;		Nothing
  3371 ;; This function is called by:
  3372 ;;		_fround
  3373 ;;		_scale
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           	psect	text7
  3378  0022B0                     __ptext7:
  3379                           	opt stack 0
  3380  0022B0                     ___awmod:
  3381                           	opt stack 28
  3382                           
  3383                           ;incstack = 0
  3384  0022B0  0E00               	movlw	0
  3385  0022B2  6E06               	movwf	___awmod@sign,c
  3386  0022B4  AE02               	btfss	___awmod@dividend+1,7,c
  3387  0022B6  D006               	goto	l429
  3388  0022B8  6C01               	negf	___awmod@dividend,c
  3389  0022BA  1E02               	comf	___awmod@dividend+1,f,c
  3390  0022BC  B0D8               	btfsc	status,0,c
  3391  0022BE  2A02               	incf	___awmod@dividend+1,f,c
  3392  0022C0  0E01               	movlw	1
  3393  0022C2  6E06               	movwf	___awmod@sign,c
  3394  0022C4                     l429:
  3395  0022C4  AE04               	btfss	___awmod@divisor+1,7,c
  3396  0022C6  D004               	goto	l430
  3397  0022C8  6C03               	negf	___awmod@divisor,c
  3398  0022CA  1E04               	comf	___awmod@divisor+1,f,c
  3399  0022CC  B0D8               	btfsc	status,0,c
  3400  0022CE  2A04               	incf	___awmod@divisor+1,f,c
  3401  0022D0                     l430:
  3402  0022D0  5003               	movf	___awmod@divisor,w,c
  3403  0022D2  1004               	iorwf	___awmod@divisor+1,w,c
  3404  0022D4  B4D8               	btfsc	status,2,c
  3405  0022D6  D018               	goto	l437
  3406  0022D8  0E01               	movlw	1
  3407  0022DA  6E05               	movwf	___awmod@counter,c
  3408  0022DC  D004               	goto	l432
  3409  0022DE  90D8               	bcf	status,0,c
  3410  0022E0  3603               	rlcf	___awmod@divisor,f,c
  3411  0022E2  3604               	rlcf	___awmod@divisor+1,f,c
  3412  0022E4  2A05               	incf	___awmod@counter,f,c
  3413  0022E6                     l432:
  3414  0022E6  AE04               	btfss	___awmod@divisor+1,7,c
  3415  0022E8  D7FA               	goto	l433
  3416  0022EA                     u2240:
  3417  0022EA  5003               	movf	___awmod@divisor,w,c
  3418  0022EC  5C01               	subwf	___awmod@dividend,w,c
  3419  0022EE  5004               	movf	___awmod@divisor+1,w,c
  3420  0022F0  5802               	subwfb	___awmod@dividend+1,w,c
  3421  0022F2  A0D8               	btfss	status,0,c
  3422  0022F4  D004               	goto	l436
  3423  0022F6  5003               	movf	___awmod@divisor,w,c
  3424  0022F8  5E01               	subwf	___awmod@dividend,f,c
  3425  0022FA  5004               	movf	___awmod@divisor+1,w,c
  3426  0022FC  5A02               	subwfb	___awmod@dividend+1,f,c
  3427  0022FE                     l436:
  3428  0022FE  90D8               	bcf	status,0,c
  3429  002300  3204               	rrcf	___awmod@divisor+1,f,c
  3430  002302  3203               	rrcf	___awmod@divisor,f,c
  3431  002304  2E05               	decfsz	___awmod@counter,f,c
  3432  002306  D7F1               	goto	u2240
  3433  002308                     l437:
  3434  002308  5006               	movf	___awmod@sign,w,c
  3435  00230A  B4D8               	btfsc	status,2,c
  3436  00230C  D004               	goto	l438
  3437  00230E  6C01               	negf	___awmod@dividend,c
  3438  002310  1E02               	comf	___awmod@dividend+1,f,c
  3439  002312  B0D8               	btfsc	status,0,c
  3440  002314  2A02               	incf	___awmod@dividend+1,f,c
  3441  002316                     l438:
  3442  002316  C001  F001         	movff	___awmod@dividend,?___awmod
  3443  00231A  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3444  00231E  0012               	return	
  3445  002320                     __end_of___awmod:
  3446                           	opt stack 0
  3447                           tblptru	equ	0xFF8
  3448                           tblptrh	equ	0xFF7
  3449                           tblptrl	equ	0xFF6
  3450                           tablat	equ	0xFF5
  3451                           prodh	equ	0xFF4
  3452                           prodl	equ	0xFF3
  3453                           postinc0	equ	0xFEE
  3454                           wreg	equ	0xFE8
  3455                           postinc2	equ	0xFDE
  3456                           postdec2	equ	0xFDD
  3457                           fsr2h	equ	0xFDA
  3458                           fsr2l	equ	0xFD9
  3459                           status	equ	0xFD8
  3460                           
  3461 ;; *************** function ___awdiv *****************
  3462 ;; Defined at:
  3463 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3464 ;; Parameters:    Size  Location     Type
  3465 ;;  dividend        2    6[COMRAM] int 
  3466 ;;  divisor         2    8[COMRAM] int 
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;  quotient        2   12[COMRAM] int 
  3469 ;;  sign            1   11[COMRAM] unsigned char 
  3470 ;;  counter         1   10[COMRAM] unsigned char 
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  2    6[COMRAM] int 
  3473 ;; Registers used:
  3474 ;;		wreg, status,2, status,0
  3475 ;; Tracked objects:
  3476 ;;		On entry : 0/0
  3477 ;;		On exit  : 0/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3480 ;;      Params:         4       0       0       0       0       0       0       0       0
  3481 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3482 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3483 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3484 ;;Total ram usage:        8 bytes
  3485 ;; Hardware stack levels used:    1
  3486 ;; This function calls:
  3487 ;;		Nothing
  3488 ;; This function is called by:
  3489 ;;		_fround
  3490 ;;		_scale
  3491 ;;		_printf
  3492 ;; This function uses a non-reentrant model
  3493 ;;
  3494                           
  3495                           	psect	text8
  3496  0021AA                     __ptext8:
  3497                           	opt stack 0
  3498  0021AA                     ___awdiv:
  3499                           	opt stack 28
  3500                           
  3501                           ;incstack = 0
  3502  0021AA  0E00               	movlw	0
  3503  0021AC  6E0C               	movwf	___awdiv@sign,c
  3504  0021AE  AE0A               	btfss	___awdiv@divisor+1,7,c
  3505  0021B0  D006               	goto	l416
  3506  0021B2  6C09               	negf	___awdiv@divisor,c
  3507  0021B4  1E0A               	comf	___awdiv@divisor+1,f,c
  3508  0021B6  B0D8               	btfsc	status,0,c
  3509  0021B8  2A0A               	incf	___awdiv@divisor+1,f,c
  3510  0021BA  0E01               	movlw	1
  3511  0021BC  6E0C               	movwf	___awdiv@sign,c
  3512  0021BE                     l416:
  3513  0021BE  AE08               	btfss	___awdiv@dividend+1,7,c
  3514  0021C0  D006               	goto	l417
  3515  0021C2  6C07               	negf	___awdiv@dividend,c
  3516  0021C4  1E08               	comf	___awdiv@dividend+1,f,c
  3517  0021C6  B0D8               	btfsc	status,0,c
  3518  0021C8  2A08               	incf	___awdiv@dividend+1,f,c
  3519  0021CA  0E01               	movlw	1
  3520  0021CC  1A0C               	xorwf	___awdiv@sign,f,c
  3521  0021CE                     l417:
  3522  0021CE  0E00               	movlw	0
  3523  0021D0  6E0E               	movwf	___awdiv@quotient+1,c
  3524  0021D2  0E00               	movlw	0
  3525  0021D4  6E0D               	movwf	___awdiv@quotient,c
  3526  0021D6  5009               	movf	___awdiv@divisor,w,c
  3527  0021D8  100A               	iorwf	___awdiv@divisor+1,w,c
  3528  0021DA  B4D8               	btfsc	status,2,c
  3529  0021DC  D01C               	goto	l424
  3530  0021DE  0E01               	movlw	1
  3531  0021E0  6E0B               	movwf	___awdiv@counter,c
  3532  0021E2  D004               	goto	l419
  3533  0021E4  90D8               	bcf	status,0,c
  3534  0021E6  3609               	rlcf	___awdiv@divisor,f,c
  3535  0021E8  360A               	rlcf	___awdiv@divisor+1,f,c
  3536  0021EA  2A0B               	incf	___awdiv@counter,f,c
  3537  0021EC                     l419:
  3538  0021EC  AE0A               	btfss	___awdiv@divisor+1,7,c
  3539  0021EE  D7FA               	goto	l420
  3540  0021F0                     u2180:
  3541  0021F0  90D8               	bcf	status,0,c
  3542  0021F2  360D               	rlcf	___awdiv@quotient,f,c
  3543  0021F4  360E               	rlcf	___awdiv@quotient+1,f,c
  3544  0021F6  5009               	movf	___awdiv@divisor,w,c
  3545  0021F8  5C07               	subwf	___awdiv@dividend,w,c
  3546  0021FA  500A               	movf	___awdiv@divisor+1,w,c
  3547  0021FC  5808               	subwfb	___awdiv@dividend+1,w,c
  3548  0021FE  A0D8               	btfss	status,0,c
  3549  002200  D005               	goto	l423
  3550  002202  5009               	movf	___awdiv@divisor,w,c
  3551  002204  5E07               	subwf	___awdiv@dividend,f,c
  3552  002206  500A               	movf	___awdiv@divisor+1,w,c
  3553  002208  5A08               	subwfb	___awdiv@dividend+1,f,c
  3554  00220A  800D               	bsf	___awdiv@quotient,0,c
  3555  00220C                     l423:
  3556  00220C  90D8               	bcf	status,0,c
  3557  00220E  320A               	rrcf	___awdiv@divisor+1,f,c
  3558  002210  3209               	rrcf	___awdiv@divisor,f,c
  3559  002212  2E0B               	decfsz	___awdiv@counter,f,c
  3560  002214  D7ED               	goto	u2180
  3561  002216                     l424:
  3562  002216  500C               	movf	___awdiv@sign,w,c
  3563  002218  B4D8               	btfsc	status,2,c
  3564  00221A  D004               	goto	l425
  3565  00221C  6C0D               	negf	___awdiv@quotient,c
  3566  00221E  1E0E               	comf	___awdiv@quotient+1,f,c
  3567  002220  B0D8               	btfsc	status,0,c
  3568  002222  2A0E               	incf	___awdiv@quotient+1,f,c
  3569  002224                     l425:
  3570  002224  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3571  002228  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3572  00222C  0012               	return	
  3573  00222E                     __end_of___awdiv:
  3574                           	opt stack 0
  3575                           tblptru	equ	0xFF8
  3576                           tblptrh	equ	0xFF7
  3577                           tblptrl	equ	0xFF6
  3578                           tablat	equ	0xFF5
  3579                           prodh	equ	0xFF4
  3580                           prodl	equ	0xFF3
  3581                           postinc0	equ	0xFEE
  3582                           wreg	equ	0xFE8
  3583                           postinc2	equ	0xFDE
  3584                           postdec2	equ	0xFDD
  3585                           fsr2h	equ	0xFDA
  3586                           fsr2l	equ	0xFD9
  3587                           status	equ	0xFD8
  3588                           
  3589 ;; *************** function __tdiv_to_l_ *****************
  3590 ;; Defined at:
  3591 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  3592 ;; Parameters:    Size  Location     Type
  3593 ;;  f1              3    0[COMRAM] float 
  3594 ;;  f2              3    3[COMRAM] float 
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;  quot            4    9[COMRAM] unsigned long 
  3597 ;;  exp1            1   14[COMRAM] unsigned char 
  3598 ;;  cntr            1   13[COMRAM] unsigned char 
  3599 ;; Return value:  Size  Location     Type
  3600 ;;                  4    0[COMRAM] unsigned long 
  3601 ;; Registers used:
  3602 ;;		wreg, status,2, status,0
  3603 ;; Tracked objects:
  3604 ;;		On entry : 0/0
  3605 ;;		On exit  : 0/0
  3606 ;;		Unchanged: 0/0
  3607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3608 ;;      Params:         6       0       0       0       0       0       0       0       0
  3609 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3610 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3611 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3612 ;;Total ram usage:       15 bytes
  3613 ;; Hardware stack levels used:    1
  3614 ;; This function calls:
  3615 ;;		Nothing
  3616 ;; This function is called by:
  3617 ;;		_printf
  3618 ;; This function uses a non-reentrant model
  3619 ;;
  3620                           
  3621                           	psect	text9
  3622  001ABE                     __ptext9:
  3623                           	opt stack 0
  3624  001ABE                     __tdiv_to_l_:
  3625                           	opt stack 29
  3626                           
  3627                           ;incstack = 0
  3628  001ABE  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3629  001AC2  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3630  001AC4  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3631  001AC6  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3632  001AC8  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3633  001ACA  E301               	bnc	u2361
  3634  001ACC  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3635  001ACE                     u2361:
  3636  001ACE  5007               	movf	??__tdiv_to_l_,w,c
  3637  001AD0  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3638  001AD2  500F               	movf	__tdiv_to_l_@exp1,w,c
  3639  001AD4  A4D8               	btfss	status,2,c
  3640  001AD6  D009               	goto	l552
  3641  001AD8  0E00               	movlw	0
  3642  001ADA  6E01               	movwf	?__tdiv_to_l_,c
  3643  001ADC  0E00               	movlw	0
  3644  001ADE  6E02               	movwf	?__tdiv_to_l_+1,c
  3645  001AE0  0E00               	movlw	0
  3646  001AE2  6E03               	movwf	?__tdiv_to_l_+2,c
  3647  001AE4  0E00               	movlw	0
  3648  001AE6  6E04               	movwf	?__tdiv_to_l_+3,c
  3649  001AE8  0012               	return	
  3650  001AEA                     l552:
  3651  001AEA  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3652  001AEE  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3653  001AF0  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3654  001AF2  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3655  001AF4  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3656  001AF6  E301               	bnc	u2381
  3657  001AF8  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3658  001AFA                     u2381:
  3659  001AFA  5007               	movf	??__tdiv_to_l_,w,c
  3660  001AFC  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3661  001AFE  500E               	movf	__tdiv_to_l_@cntr,w,c
  3662  001B00  A4D8               	btfss	status,2,c
  3663  001B02  D009               	goto	l554
  3664  001B04  0E00               	movlw	0
  3665  001B06  6E01               	movwf	?__tdiv_to_l_,c
  3666  001B08  0E00               	movlw	0
  3667  001B0A  6E02               	movwf	?__tdiv_to_l_+1,c
  3668  001B0C  0E00               	movlw	0
  3669  001B0E  6E03               	movwf	?__tdiv_to_l_+2,c
  3670  001B10  0E00               	movlw	0
  3671  001B12  6E04               	movwf	?__tdiv_to_l_+3,c
  3672  001B14  0012               	return	
  3673  001B16                     l554:
  3674  001B16  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3675  001B18  0EFF               	movlw	255
  3676  001B1A  1601               	andwf	__tdiv_to_l_@f1,f,c
  3677  001B1C  0EFF               	movlw	255
  3678  001B1E  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3679  001B20  0E00               	movlw	0
  3680  001B22  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3681  001B24  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3682  001B26  0EFF               	movlw	255
  3683  001B28  1604               	andwf	__tdiv_to_l_@f2,f,c
  3684  001B2A  0EFF               	movlw	255
  3685  001B2C  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3686  001B2E  0E00               	movlw	0
  3687  001B30  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3688  001B32  0E00               	movlw	0
  3689  001B34  6E0A               	movwf	__tdiv_to_l_@quot,c
  3690  001B36  0E00               	movlw	0
  3691  001B38  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3692  001B3A  0E00               	movlw	0
  3693  001B3C  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3694  001B3E  0E00               	movlw	0
  3695  001B40  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3696  001B42  0E7F               	movlw	127
  3697  001B44  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3698  001B46  500E               	movf	__tdiv_to_l_@cntr,w,c
  3699  001B48  0F98               	addlw	152
  3700  001B4A  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3701  001B4C  0E18               	movlw	24
  3702  001B4E  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3703  001B50                     l555:
  3704  001B50  90D8               	bcf	status,0,c
  3705  001B52  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3706  001B54  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3707  001B56  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3708  001B58  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3709  001B5A  5004               	movf	__tdiv_to_l_@f2,w,c
  3710  001B5C  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3711  001B5E  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3712  001B60  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3713  001B62  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3714  001B64  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3715  001B66  A0D8               	btfss	status,0,c
  3716  001B68  D007               	goto	l556
  3717  001B6A  5004               	movf	__tdiv_to_l_@f2,w,c
  3718  001B6C  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3719  001B6E  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3720  001B70  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3721  001B72  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3722  001B74  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3723  001B76  800A               	bsf	__tdiv_to_l_@quot,0,c
  3724  001B78                     l556:
  3725  001B78  90D8               	bcf	status,0,c
  3726  001B7A  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3727  001B7C  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3728  001B7E  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3729  001B80  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3730  001B82  D7E6               	goto	l555
  3731  001B84  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3732  001B86  D016               	goto	l558
  3733  001B88  500F               	movf	__tdiv_to_l_@exp1,w,c
  3734  001B8A  0A80               	xorlw	128
  3735  001B8C  0F97               	addlw	151
  3736  001B8E  B0D8               	btfsc	status,0,c
  3737  001B90  D009               	goto	l559
  3738  001B92  0E00               	movlw	0
  3739  001B94  6E01               	movwf	?__tdiv_to_l_,c
  3740  001B96  0E00               	movlw	0
  3741  001B98  6E02               	movwf	?__tdiv_to_l_+1,c
  3742  001B9A  0E00               	movlw	0
  3743  001B9C  6E03               	movwf	?__tdiv_to_l_+2,c
  3744  001B9E  0E00               	movlw	0
  3745  001BA0  6E04               	movwf	?__tdiv_to_l_+3,c
  3746  001BA2  0012               	return	
  3747  001BA4                     l559:
  3748  001BA4  90D8               	bcf	status,0,c
  3749  001BA6  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3750  001BA8  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3751  001BAA  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3752  001BAC  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3753  001BAE  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3754  001BB0  D7F9               	goto	l559
  3755  001BB2  D015               	goto	u2440
  3756  001BB4                     l558:
  3757  001BB4  0E17               	movlw	23
  3758  001BB6  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3759  001BB8  D00F               	goto	l564
  3760  001BBA  0E00               	movlw	0
  3761  001BBC  6E01               	movwf	?__tdiv_to_l_,c
  3762  001BBE  0E00               	movlw	0
  3763  001BC0  6E02               	movwf	?__tdiv_to_l_+1,c
  3764  001BC2  0E00               	movlw	0
  3765  001BC4  6E03               	movwf	?__tdiv_to_l_+2,c
  3766  001BC6  0E00               	movlw	0
  3767  001BC8  6E04               	movwf	?__tdiv_to_l_+3,c
  3768  001BCA  0012               	return	
  3769  001BCC  90D8               	bcf	status,0,c
  3770  001BCE  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3771  001BD0  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3772  001BD2  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3773  001BD4  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3774  001BD6  060F               	decf	__tdiv_to_l_@exp1,f,c
  3775  001BD8                     l564:
  3776  001BD8  500F               	movf	__tdiv_to_l_@exp1,w,c
  3777  001BDA  A4D8               	btfss	status,2,c
  3778  001BDC  D7F7               	goto	l565
  3779  001BDE                     u2440:
  3780  001BDE  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3781  001BE2  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3782  001BE6  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3783  001BEA  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3784  001BEE  0012               	return		;funcret
  3785  001BF0                     __end_of__tdiv_to_l_:
  3786                           	opt stack 0
  3787                           tblptru	equ	0xFF8
  3788                           tblptrh	equ	0xFF7
  3789                           tblptrl	equ	0xFF6
  3790                           tablat	equ	0xFF5
  3791                           prodh	equ	0xFF4
  3792                           prodl	equ	0xFF3
  3793                           postinc0	equ	0xFEE
  3794                           wreg	equ	0xFE8
  3795                           postinc2	equ	0xFDE
  3796                           postdec2	equ	0xFDD
  3797                           fsr2h	equ	0xFDA
  3798                           fsr2l	equ	0xFD9
  3799                           status	equ	0xFD8
  3800                           
  3801 ;; *************** function __div_to_l_ *****************
  3802 ;; Defined at:
  3803 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;  f1              3    0[COMRAM] unsigned long 
  3806 ;;  f2              3    3[COMRAM] unsigned long 
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;  quot            4    6[COMRAM] unsigned long 
  3809 ;;  exp1            1   11[COMRAM] unsigned char 
  3810 ;;  cntr            1   10[COMRAM] unsigned char 
  3811 ;; Return value:  Size  Location     Type
  3812 ;;                  4    0[COMRAM] unsigned long 
  3813 ;; Registers used:
  3814 ;;		wreg, status,2, status,0
  3815 ;; Tracked objects:
  3816 ;;		On entry : 0/0
  3817 ;;		On exit  : 0/0
  3818 ;;		Unchanged: 0/0
  3819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3820 ;;      Params:         6       0       0       0       0       0       0       0       0
  3821 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3822 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3823 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3824 ;;Total ram usage:       12 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; This function calls:
  3827 ;;		Nothing
  3828 ;; This function is called by:
  3829 ;;		_printf
  3830 ;; This function uses a non-reentrant model
  3831 ;;
  3832                           
  3833                           	psect	text10
  3834  001BF0                     __ptext10:
  3835                           	opt stack 0
  3836  001BF0                     __div_to_l_:
  3837                           	opt stack 29
  3838                           
  3839                           ;incstack = 0
  3840  001BF0  3403               	rlcf	__div_to_l_@f1+2,w,c
  3841  001BF2  3404               	rlcf	__div_to_l_@f1+3,w,c
  3842  001BF4  6E0C               	movwf	__div_to_l_@exp1,c
  3843  001BF6  500C               	movf	__div_to_l_@exp1,w,c
  3844  001BF8  A4D8               	btfss	status,2,c
  3845  001BFA  D009               	goto	l448
  3846  001BFC  0E00               	movlw	0
  3847  001BFE  6E01               	movwf	?__div_to_l_,c
  3848  001C00  0E00               	movlw	0
  3849  001C02  6E02               	movwf	?__div_to_l_+1,c
  3850  001C04  0E00               	movlw	0
  3851  001C06  6E03               	movwf	?__div_to_l_+2,c
  3852  001C08  0E00               	movlw	0
  3853  001C0A  6E04               	movwf	?__div_to_l_+3,c
  3854  001C0C  0012               	return	
  3855  001C0E                     l448:
  3856  001C0E  3406               	rlcf	__div_to_l_@f2+2,w,c
  3857  001C10  3407               	rlcf	__div_to_l_@f2+3,w,c
  3858  001C12  6E0B               	movwf	__div_to_l_@cntr,c
  3859  001C14  500B               	movf	__div_to_l_@cntr,w,c
  3860  001C16  A4D8               	btfss	status,2,c
  3861  001C18  D009               	goto	l450
  3862  001C1A  0E00               	movlw	0
  3863  001C1C  6E01               	movwf	?__div_to_l_,c
  3864  001C1E  0E00               	movlw	0
  3865  001C20  6E02               	movwf	?__div_to_l_+1,c
  3866  001C22  0E00               	movlw	0
  3867  001C24  6E03               	movwf	?__div_to_l_+2,c
  3868  001C26  0E00               	movlw	0
  3869  001C28  6E04               	movwf	?__div_to_l_+3,c
  3870  001C2A  0012               	return	
  3871  001C2C                     l450:
  3872  001C2C  8E03               	bsf	__div_to_l_@f1+2,7,c
  3873  001C2E  0EFF               	movlw	255
  3874  001C30  1601               	andwf	__div_to_l_@f1,f,c
  3875  001C32  0EFF               	movlw	255
  3876  001C34  1602               	andwf	__div_to_l_@f1+1,f,c
  3877  001C36  0EFF               	movlw	255
  3878  001C38  1603               	andwf	__div_to_l_@f1+2,f,c
  3879  001C3A  0E00               	movlw	0
  3880  001C3C  1604               	andwf	__div_to_l_@f1+3,f,c
  3881  001C3E  8E06               	bsf	__div_to_l_@f2+2,7,c
  3882  001C40  0EFF               	movlw	255
  3883  001C42  1604               	andwf	__div_to_l_@f2,f,c
  3884  001C44  0EFF               	movlw	255
  3885  001C46  1605               	andwf	__div_to_l_@f2+1,f,c
  3886  001C48  0EFF               	movlw	255
  3887  001C4A  1606               	andwf	__div_to_l_@f2+2,f,c
  3888  001C4C  0E00               	movlw	0
  3889  001C4E  1607               	andwf	__div_to_l_@f2+3,f,c
  3890  001C50  0E00               	movlw	0
  3891  001C52  6E07               	movwf	__div_to_l_@quot,c
  3892  001C54  0E00               	movlw	0
  3893  001C56  6E08               	movwf	__div_to_l_@quot+1,c
  3894  001C58  0E00               	movlw	0
  3895  001C5A  6E09               	movwf	__div_to_l_@quot+2,c
  3896  001C5C  0E00               	movlw	0
  3897  001C5E  6E0A               	movwf	__div_to_l_@quot+3,c
  3898  001C60  0E7F               	movlw	127
  3899  001C62  5E0C               	subwf	__div_to_l_@exp1,f,c
  3900  001C64  500B               	movf	__div_to_l_@cntr,w,c
  3901  001C66  0FA0               	addlw	160
  3902  001C68  5E0C               	subwf	__div_to_l_@exp1,f,c
  3903  001C6A  0E20               	movlw	32
  3904  001C6C  6E0B               	movwf	__div_to_l_@cntr,c
  3905  001C6E  90D8               	bcf	status,0,c
  3906  001C70  3607               	rlcf	__div_to_l_@quot,f,c
  3907  001C72  3608               	rlcf	__div_to_l_@quot+1,f,c
  3908  001C74  3609               	rlcf	__div_to_l_@quot+2,f,c
  3909  001C76  360A               	rlcf	__div_to_l_@quot+3,f,c
  3910  001C78  5004               	movf	__div_to_l_@f2,w,c
  3911  001C7A  5C01               	subwf	__div_to_l_@f1,w,c
  3912  001C7C  5005               	movf	__div_to_l_@f2+1,w,c
  3913  001C7E  5802               	subwfb	__div_to_l_@f1+1,w,c
  3914  001C80  5006               	movf	__div_to_l_@f2+2,w,c
  3915  001C82  5803               	subwfb	__div_to_l_@f1+2,w,c
  3916  001C84  5007               	movf	__div_to_l_@f2+3,w,c
  3917  001C86  5804               	subwfb	__div_to_l_@f1+3,w,c
  3918  001C88  A0D8               	btfss	status,0,c
  3919  001C8A  D009               	goto	l452
  3920  001C8C  5004               	movf	__div_to_l_@f2,w,c
  3921  001C8E  5E01               	subwf	__div_to_l_@f1,f,c
  3922  001C90  5005               	movf	__div_to_l_@f2+1,w,c
  3923  001C92  5A02               	subwfb	__div_to_l_@f1+1,f,c
  3924  001C94  5006               	movf	__div_to_l_@f2+2,w,c
  3925  001C96  5A03               	subwfb	__div_to_l_@f1+2,f,c
  3926  001C98  5007               	movf	__div_to_l_@f2+3,w,c
  3927  001C9A  5A04               	subwfb	__div_to_l_@f1+3,f,c
  3928  001C9C  8007               	bsf	__div_to_l_@quot,0,c
  3929  001C9E                     l452:
  3930  001C9E  90D8               	bcf	status,0,c
  3931  001CA0  3601               	rlcf	__div_to_l_@f1,f,c
  3932  001CA2  3602               	rlcf	__div_to_l_@f1+1,f,c
  3933  001CA4  3603               	rlcf	__div_to_l_@f1+2,f,c
  3934  001CA6  3604               	rlcf	__div_to_l_@f1+3,f,c
  3935  001CA8  2E0B               	decfsz	__div_to_l_@cntr,f,c
  3936  001CAA  D7E1               	goto	l451
  3937  001CAC  AE0C               	btfss	__div_to_l_@exp1,7,c
  3938  001CAE  D016               	goto	l454
  3939  001CB0  500C               	movf	__div_to_l_@exp1,w,c
  3940  001CB2  0A80               	xorlw	128
  3941  001CB4  0F9F               	addlw	159
  3942  001CB6  B0D8               	btfsc	status,0,c
  3943  001CB8  D009               	goto	l455
  3944  001CBA  0E00               	movlw	0
  3945  001CBC  6E01               	movwf	?__div_to_l_,c
  3946  001CBE  0E00               	movlw	0
  3947  001CC0  6E02               	movwf	?__div_to_l_+1,c
  3948  001CC2  0E00               	movlw	0
  3949  001CC4  6E03               	movwf	?__div_to_l_+2,c
  3950  001CC6  0E00               	movlw	0
  3951  001CC8  6E04               	movwf	?__div_to_l_+3,c
  3952  001CCA  0012               	return	
  3953  001CCC                     l455:
  3954  001CCC  90D8               	bcf	status,0,c
  3955  001CCE  320A               	rrcf	__div_to_l_@quot+3,f,c
  3956  001CD0  3209               	rrcf	__div_to_l_@quot+2,f,c
  3957  001CD2  3208               	rrcf	__div_to_l_@quot+1,f,c
  3958  001CD4  3207               	rrcf	__div_to_l_@quot,f,c
  3959  001CD6  3E0C               	incfsz	__div_to_l_@exp1,f,c
  3960  001CD8  D7F9               	goto	l455
  3961  001CDA  D015               	goto	u2510
  3962  001CDC                     l454:
  3963  001CDC  0E1F               	movlw	31
  3964  001CDE  640C               	cpfsgt	__div_to_l_@exp1,c
  3965  001CE0  D00F               	goto	l460
  3966  001CE2  0E00               	movlw	0
  3967  001CE4  6E01               	movwf	?__div_to_l_,c
  3968  001CE6  0E00               	movlw	0
  3969  001CE8  6E02               	movwf	?__div_to_l_+1,c
  3970  001CEA  0E00               	movlw	0
  3971  001CEC  6E03               	movwf	?__div_to_l_+2,c
  3972  001CEE  0E00               	movlw	0
  3973  001CF0  6E04               	movwf	?__div_to_l_+3,c
  3974  001CF2  0012               	return	
  3975  001CF4  90D8               	bcf	status,0,c
  3976  001CF6  3607               	rlcf	__div_to_l_@quot,f,c
  3977  001CF8  3608               	rlcf	__div_to_l_@quot+1,f,c
  3978  001CFA  3609               	rlcf	__div_to_l_@quot+2,f,c
  3979  001CFC  360A               	rlcf	__div_to_l_@quot+3,f,c
  3980  001CFE  060C               	decf	__div_to_l_@exp1,f,c
  3981  001D00                     l460:
  3982  001D00  500C               	movf	__div_to_l_@exp1,w,c
  3983  001D02  A4D8               	btfss	status,2,c
  3984  001D04  D7F7               	goto	l461
  3985  001D06                     u2510:
  3986  001D06  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  3987  001D0A  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  3988  001D0E  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  3989  001D12  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  3990  001D16  0012               	return		;funcret
  3991  001D18                     __end_of__div_to_l_:
  3992                           	opt stack 0
  3993                           tblptru	equ	0xFF8
  3994                           tblptrh	equ	0xFF7
  3995                           tblptrl	equ	0xFF6
  3996                           tablat	equ	0xFF5
  3997                           prodh	equ	0xFF4
  3998                           prodl	equ	0xFF3
  3999                           postinc0	equ	0xFEE
  4000                           wreg	equ	0xFE8
  4001                           postinc2	equ	0xFDE
  4002                           postdec2	equ	0xFDD
  4003                           fsr2h	equ	0xFDA
  4004                           fsr2l	equ	0xFD9
  4005                           status	equ	0xFD8
  4006                           
  4007 ;; *************** function ___lltoft *****************
  4008 ;; Defined at:
  4009 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4010 ;; Parameters:    Size  Location     Type
  4011 ;;  c               4    8[COMRAM] unsigned long 
  4012 ;; Auto vars:     Size  Location     Type
  4013 ;;  exp             1   16[COMRAM] unsigned char 
  4014 ;; Return value:  Size  Location     Type
  4015 ;;                  3    8[COMRAM] float 
  4016 ;; Registers used:
  4017 ;;		wreg, status,2, status,0, cstack
  4018 ;; Tracked objects:
  4019 ;;		On entry : 0/0
  4020 ;;		On exit  : 0/0
  4021 ;;		Unchanged: 0/0
  4022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4023 ;;      Params:         4       0       0       0       0       0       0       0       0
  4024 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4025 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4026 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4027 ;;Total ram usage:        9 bytes
  4028 ;; Hardware stack levels used:    1
  4029 ;; Hardware stack levels required when called:    1
  4030 ;; This function calls:
  4031 ;;		___ftpack
  4032 ;; This function is called by:
  4033 ;;		_printf
  4034 ;; This function uses a non-reentrant model
  4035 ;;
  4036                           
  4037                           	psect	text11
  4038  0023F4                     __ptext11:
  4039                           	opt stack 0
  4040  0023F4                     ___lltoft:
  4041                           	opt stack 28
  4042                           
  4043                           ;incstack = 0
  4044  0023F4  0E8E               	movlw	142
  4045  0023F6  6E11               	movwf	___lltoft@exp,c
  4046  0023F8  D006               	goto	l673
  4047  0023FA  90D8               	bcf	status,0,c
  4048  0023FC  320C               	rrcf	___lltoft@c+3,f,c
  4049  0023FE  320B               	rrcf	___lltoft@c+2,f,c
  4050  002400  320A               	rrcf	___lltoft@c+1,f,c
  4051  002402  3209               	rrcf	___lltoft@c,f,c
  4052  002404  2A11               	incf	___lltoft@exp,f,c
  4053  002406                     l673:
  4054  002406  0E00               	movlw	0
  4055  002408  1409               	andwf	___lltoft@c,w,c
  4056  00240A  6E0D               	movwf	??___lltoft& (0+255),c
  4057  00240C  0E00               	movlw	0
  4058  00240E  140A               	andwf	___lltoft@c+1,w,c
  4059  002410  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4060  002412  0E00               	movlw	0
  4061  002414  140B               	andwf	___lltoft@c+2,w,c
  4062  002416  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4063  002418  0EFF               	movlw	255
  4064  00241A  140C               	andwf	___lltoft@c+3,w,c
  4065  00241C  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4066  00241E  500D               	movf	??___lltoft,w,c
  4067  002420  100E               	iorwf	??___lltoft+1,w,c
  4068  002422  100F               	iorwf	??___lltoft+2,w,c
  4069  002424  1010               	iorwf	??___lltoft+3,w,c
  4070  002426  A4D8               	btfss	status,2,c
  4071  002428  D7E8               	goto	l674
  4072  00242A  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4073  00242E  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4074  002432  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4075  002436  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4076  00243A  0E00               	movlw	0
  4077  00243C  6E05               	movwf	___ftpack@sign,c
  4078  00243E  ECF3  F00F         	call	___ftpack	;wreg free
  4079  002442  C001  F009         	movff	?___ftpack,?___lltoft
  4080  002446  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4081  00244A  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4082  00244E  0012               	return	
  4083  002450                     __end_of___lltoft:
  4084                           	opt stack 0
  4085                           tblptru	equ	0xFF8
  4086                           tblptrh	equ	0xFF7
  4087                           tblptrl	equ	0xFF6
  4088                           tablat	equ	0xFF5
  4089                           prodh	equ	0xFF4
  4090                           prodl	equ	0xFF3
  4091                           postinc0	equ	0xFEE
  4092                           wreg	equ	0xFE8
  4093                           postinc2	equ	0xFDE
  4094                           postdec2	equ	0xFDD
  4095                           fsr2h	equ	0xFDA
  4096                           fsr2l	equ	0xFD9
  4097                           status	equ	0xFD8
  4098                           
  4099 ;; *************** function ___llmod *****************
  4100 ;; Defined at:
  4101 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;  dividend        4    0[COMRAM] unsigned long 
  4104 ;;  divisor         4    4[COMRAM] unsigned long 
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;  counter         1    8[COMRAM] unsigned char 
  4107 ;; Return value:  Size  Location     Type
  4108 ;;                  4    0[COMRAM] unsigned long 
  4109 ;; Registers used:
  4110 ;;		wreg, status,2, status,0
  4111 ;; Tracked objects:
  4112 ;;		On entry : 0/0
  4113 ;;		On exit  : 0/0
  4114 ;;		Unchanged: 0/0
  4115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4116 ;;      Params:         8       0       0       0       0       0       0       0       0
  4117 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4118 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4119 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4120 ;;Total ram usage:        9 bytes
  4121 ;; Hardware stack levels used:    1
  4122 ;; This function calls:
  4123 ;;		Nothing
  4124 ;; This function is called by:
  4125 ;;		_printf
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           	psect	text12
  4130  00238E                     __ptext12:
  4131                           	opt stack 0
  4132  00238E                     ___llmod:
  4133                           	opt stack 29
  4134                           
  4135                           ;incstack = 0
  4136  00238E  5005               	movf	___llmod@divisor,w,c
  4137  002390  1006               	iorwf	___llmod@divisor+1,w,c
  4138  002392  1007               	iorwf	___llmod@divisor+2,w,c
  4139  002394  1008               	iorwf	___llmod@divisor+3,w,c
  4140  002396  B4D8               	btfsc	status,2,c
  4141  002398  D024               	goto	l667
  4142  00239A  0E01               	movlw	1
  4143  00239C  6E09               	movwf	___llmod@counter,c
  4144  00239E  D006               	goto	l662
  4145  0023A0  90D8               	bcf	status,0,c
  4146  0023A2  3605               	rlcf	___llmod@divisor,f,c
  4147  0023A4  3606               	rlcf	___llmod@divisor+1,f,c
  4148  0023A6  3607               	rlcf	___llmod@divisor+2,f,c
  4149  0023A8  3608               	rlcf	___llmod@divisor+3,f,c
  4150  0023AA  2A09               	incf	___llmod@counter,f,c
  4151  0023AC                     l662:
  4152  0023AC  AE08               	btfss	___llmod@divisor+3,7,c
  4153  0023AE  D7F8               	goto	l663
  4154  0023B0                     u2740:
  4155  0023B0  5005               	movf	___llmod@divisor,w,c
  4156  0023B2  5C01               	subwf	___llmod@dividend,w,c
  4157  0023B4  5006               	movf	___llmod@divisor+1,w,c
  4158  0023B6  5802               	subwfb	___llmod@dividend+1,w,c
  4159  0023B8  5007               	movf	___llmod@divisor+2,w,c
  4160  0023BA  5803               	subwfb	___llmod@dividend+2,w,c
  4161  0023BC  5008               	movf	___llmod@divisor+3,w,c
  4162  0023BE  5804               	subwfb	___llmod@dividend+3,w,c
  4163  0023C0  A0D8               	btfss	status,0,c
  4164  0023C2  D008               	goto	l666
  4165  0023C4  5005               	movf	___llmod@divisor,w,c
  4166  0023C6  5E01               	subwf	___llmod@dividend,f,c
  4167  0023C8  5006               	movf	___llmod@divisor+1,w,c
  4168  0023CA  5A02               	subwfb	___llmod@dividend+1,f,c
  4169  0023CC  5007               	movf	___llmod@divisor+2,w,c
  4170  0023CE  5A03               	subwfb	___llmod@dividend+2,f,c
  4171  0023D0  5008               	movf	___llmod@divisor+3,w,c
  4172  0023D2  5A04               	subwfb	___llmod@dividend+3,f,c
  4173  0023D4                     l666:
  4174  0023D4  90D8               	bcf	status,0,c
  4175  0023D6  3208               	rrcf	___llmod@divisor+3,f,c
  4176  0023D8  3207               	rrcf	___llmod@divisor+2,f,c
  4177  0023DA  3206               	rrcf	___llmod@divisor+1,f,c
  4178  0023DC  3205               	rrcf	___llmod@divisor,f,c
  4179  0023DE  2E09               	decfsz	___llmod@counter,f,c
  4180  0023E0  D7E7               	goto	u2740
  4181  0023E2                     l667:
  4182  0023E2  C001  F001         	movff	___llmod@dividend,?___llmod
  4183  0023E6  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4184  0023EA  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4185  0023EE  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4186  0023F2  0012               	return		;funcret
  4187  0023F4                     __end_of___llmod:
  4188                           	opt stack 0
  4189                           tblptru	equ	0xFF8
  4190                           tblptrh	equ	0xFF7
  4191                           tblptrl	equ	0xFF6
  4192                           tablat	equ	0xFF5
  4193                           prodh	equ	0xFF4
  4194                           prodl	equ	0xFF3
  4195                           postinc0	equ	0xFEE
  4196                           wreg	equ	0xFE8
  4197                           postinc2	equ	0xFDE
  4198                           postdec2	equ	0xFDD
  4199                           fsr2h	equ	0xFDA
  4200                           fsr2l	equ	0xFD9
  4201                           status	equ	0xFD8
  4202                           
  4203 ;; *************** function ___lldiv *****************
  4204 ;; Defined at:
  4205 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;  dividend        4    0[COMRAM] unsigned long 
  4208 ;;  divisor         4    4[COMRAM] unsigned long 
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;  quotient        4    8[COMRAM] unsigned long 
  4211 ;;  counter         1   12[COMRAM] unsigned char 
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  4    0[COMRAM] unsigned long 
  4214 ;; Registers used:
  4215 ;;		wreg, status,2, status,0
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4221 ;;      Params:         8       0       0       0       0       0       0       0       0
  4222 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4223 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4224 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4225 ;;Total ram usage:       13 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; This function calls:
  4228 ;;		Nothing
  4229 ;; This function is called by:
  4230 ;;		_printf
  4231 ;; This function uses a non-reentrant model
  4232 ;;
  4233                           
  4234                           	psect	text13
  4235  00222E                     __ptext13:
  4236                           	opt stack 0
  4237  00222E                     ___lldiv:
  4238                           	opt stack 29
  4239                           
  4240                           ;incstack = 0
  4241  00222E  0E00               	movlw	0
  4242  002230  6E09               	movwf	___lldiv@quotient,c
  4243  002232  0E00               	movlw	0
  4244  002234  6E0A               	movwf	___lldiv@quotient+1,c
  4245  002236  0E00               	movlw	0
  4246  002238  6E0B               	movwf	___lldiv@quotient+2,c
  4247  00223A  0E00               	movlw	0
  4248  00223C  6E0C               	movwf	___lldiv@quotient+3,c
  4249  00223E  5005               	movf	___lldiv@divisor,w,c
  4250  002240  1006               	iorwf	___lldiv@divisor+1,w,c
  4251  002242  1007               	iorwf	___lldiv@divisor+2,w,c
  4252  002244  1008               	iorwf	___lldiv@divisor+3,w,c
  4253  002246  B4D8               	btfsc	status,2,c
  4254  002248  D02A               	goto	l657
  4255  00224A  0E01               	movlw	1
  4256  00224C  6E0D               	movwf	___lldiv@counter,c
  4257  00224E  D006               	goto	l652
  4258  002250  90D8               	bcf	status,0,c
  4259  002252  3605               	rlcf	___lldiv@divisor,f,c
  4260  002254  3606               	rlcf	___lldiv@divisor+1,f,c
  4261  002256  3607               	rlcf	___lldiv@divisor+2,f,c
  4262  002258  3608               	rlcf	___lldiv@divisor+3,f,c
  4263  00225A  2A0D               	incf	___lldiv@counter,f,c
  4264  00225C                     l652:
  4265  00225C  AE08               	btfss	___lldiv@divisor+3,7,c
  4266  00225E  D7F8               	goto	l653
  4267  002260                     u2710:
  4268  002260  90D8               	bcf	status,0,c
  4269  002262  3609               	rlcf	___lldiv@quotient,f,c
  4270  002264  360A               	rlcf	___lldiv@quotient+1,f,c
  4271  002266  360B               	rlcf	___lldiv@quotient+2,f,c
  4272  002268  360C               	rlcf	___lldiv@quotient+3,f,c
  4273  00226A  5005               	movf	___lldiv@divisor,w,c
  4274  00226C  5C01               	subwf	___lldiv@dividend,w,c
  4275  00226E  5006               	movf	___lldiv@divisor+1,w,c
  4276  002270  5802               	subwfb	___lldiv@dividend+1,w,c
  4277  002272  5007               	movf	___lldiv@divisor+2,w,c
  4278  002274  5803               	subwfb	___lldiv@dividend+2,w,c
  4279  002276  5008               	movf	___lldiv@divisor+3,w,c
  4280  002278  5804               	subwfb	___lldiv@dividend+3,w,c
  4281  00227A  A0D8               	btfss	status,0,c
  4282  00227C  D009               	goto	l656
  4283  00227E  5005               	movf	___lldiv@divisor,w,c
  4284  002280  5E01               	subwf	___lldiv@dividend,f,c
  4285  002282  5006               	movf	___lldiv@divisor+1,w,c
  4286  002284  5A02               	subwfb	___lldiv@dividend+1,f,c
  4287  002286  5007               	movf	___lldiv@divisor+2,w,c
  4288  002288  5A03               	subwfb	___lldiv@dividend+2,f,c
  4289  00228A  5008               	movf	___lldiv@divisor+3,w,c
  4290  00228C  5A04               	subwfb	___lldiv@dividend+3,f,c
  4291  00228E  8009               	bsf	___lldiv@quotient,0,c
  4292  002290                     l656:
  4293  002290  90D8               	bcf	status,0,c
  4294  002292  3208               	rrcf	___lldiv@divisor+3,f,c
  4295  002294  3207               	rrcf	___lldiv@divisor+2,f,c
  4296  002296  3206               	rrcf	___lldiv@divisor+1,f,c
  4297  002298  3205               	rrcf	___lldiv@divisor,f,c
  4298  00229A  2E0D               	decfsz	___lldiv@counter,f,c
  4299  00229C  D7E1               	goto	u2710
  4300  00229E                     l657:
  4301  00229E  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4302  0022A2  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4303  0022A6  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4304  0022AA  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4305  0022AE  0012               	return		;funcret
  4306  0022B0                     __end_of___lldiv:
  4307                           	opt stack 0
  4308                           tblptru	equ	0xFF8
  4309                           tblptrh	equ	0xFF7
  4310                           tblptrl	equ	0xFF6
  4311                           tablat	equ	0xFF5
  4312                           prodh	equ	0xFF4
  4313                           prodl	equ	0xFF3
  4314                           postinc0	equ	0xFEE
  4315                           wreg	equ	0xFE8
  4316                           postinc2	equ	0xFDE
  4317                           postdec2	equ	0xFDD
  4318                           fsr2h	equ	0xFDA
  4319                           fsr2l	equ	0xFD9
  4320                           status	equ	0xFD8
  4321                           
  4322 ;; *************** function ___fttol *****************
  4323 ;; Defined at:
  4324 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4325 ;; Parameters:    Size  Location     Type
  4326 ;;  f1              3   48[COMRAM] float 
  4327 ;; Auto vars:     Size  Location     Type
  4328 ;;  lval            4   58[COMRAM] unsigned long 
  4329 ;;  exp1            1   62[COMRAM] unsigned char 
  4330 ;;  sign1           1   57[COMRAM] unsigned char 
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  4   48[COMRAM] long 
  4333 ;; Registers used:
  4334 ;;		wreg, status,2, status,0
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4340 ;;      Params:         4       0       0       0       0       0       0       0       0
  4341 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4342 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4343 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4344 ;;Total ram usage:       15 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; This function calls:
  4347 ;;		Nothing
  4348 ;; This function is called by:
  4349 ;;		_printf
  4350 ;; This function uses a non-reentrant model
  4351 ;;
  4352                           
  4353                           	psect	text14
  4354  001D18                     __ptext14:
  4355                           	opt stack 0
  4356  001D18                     ___fttol:
  4357                           	opt stack 29
  4358                           
  4359                           ;incstack = 0
  4360  001D18  C033  F035         	movff	___fttol@f1+2,??___fttol
  4361  001D1C  6A36               	clrf	(??___fttol+1)& (0+255),c
  4362  001D1E  6A37               	clrf	(??___fttol+2)& (0+255),c
  4363  001D20  3432               	rlcf	___fttol@f1+1,w,c
  4364  001D22  3635               	rlcf	??___fttol& (0+255),f,c
  4365  001D24  E301               	bnc	u2621
  4366  001D26  8036               	bsf	(??___fttol+1)& (0+255),0,c
  4367  001D28                     u2621:
  4368  001D28  5035               	movf	??___fttol,w,c
  4369  001D2A  6E3F               	movwf	___fttol@exp1,c
  4370  001D2C  503F               	movf	___fttol@exp1,w,c
  4371  001D2E  A4D8               	btfss	status,2,c
  4372  001D30  D009               	goto	l597
  4373  001D32  0E00               	movlw	0
  4374  001D34  6E31               	movwf	?___fttol,c
  4375  001D36  0E00               	movlw	0
  4376  001D38  6E32               	movwf	?___fttol+1,c
  4377  001D3A  0E00               	movlw	0
  4378  001D3C  6E33               	movwf	?___fttol+2,c
  4379  001D3E  0E00               	movlw	0
  4380  001D40  6E34               	movwf	?___fttol+3,c
  4381  001D42  0012               	return	
  4382  001D44                     l597:
  4383  001D44  0E17               	movlw	23
  4384  001D46  6E35               	movwf	??___fttol& (0+255),c
  4385  001D48  C031  F036         	movff	___fttol@f1,??___fttol+1
  4386  001D4C  C032  F037         	movff	___fttol@f1+1,??___fttol+2
  4387  001D50  C033  F038         	movff	___fttol@f1+2,??___fttol+3
  4388  001D54  2835               	incf	??___fttol,w,c
  4389  001D56  6E39               	movwf	(??___fttol+4)& (0+255),c
  4390  001D58  D004               	goto	u2640
  4391  001D5A                     u2645:
  4392  001D5A  90D8               	bcf	status,0,c
  4393  001D5C  3238               	rrcf	??___fttol+3,f,c
  4394  001D5E  3237               	rrcf	??___fttol+2,f,c
  4395  001D60  3236               	rrcf	??___fttol+1,f,c
  4396  001D62                     u2640:
  4397  001D62  2E39               	decfsz	(??___fttol+4)& (0+255),f,c
  4398  001D64  D7FA               	goto	u2645
  4399  001D66  5036               	movf	??___fttol+1,w,c
  4400  001D68  6E3A               	movwf	___fttol@sign1,c
  4401  001D6A  8E32               	bsf	___fttol@f1+1,7,c
  4402  001D6C  0EFF               	movlw	255
  4403  001D6E  1631               	andwf	___fttol@f1,f,c
  4404  001D70  0EFF               	movlw	255
  4405  001D72  1632               	andwf	___fttol@f1+1,f,c
  4406  001D74  0E00               	movlw	0
  4407  001D76  1633               	andwf	___fttol@f1+2,f,c
  4408  001D78  5031               	movf	___fttol@f1,w,c
  4409  001D7A  6E3B               	movwf	___fttol@lval,c
  4410  001D7C  5032               	movf	___fttol@f1+1,w,c
  4411  001D7E  6E3C               	movwf	___fttol@lval+1,c
  4412  001D80  5033               	movf	___fttol@f1+2,w,c
  4413  001D82  6E3D               	movwf	___fttol@lval+2,c
  4414  001D84  6A3E               	clrf	___fttol@lval+3,c
  4415  001D86  0E8E               	movlw	142
  4416  001D88  5E3F               	subwf	___fttol@exp1,f,c
  4417  001D8A  AE3F               	btfss	___fttol@exp1,7,c
  4418  001D8C  D016               	goto	l599
  4419  001D8E  503F               	movf	___fttol@exp1,w,c
  4420  001D90  0A80               	xorlw	128
  4421  001D92  0F8F               	addlw	143
  4422  001D94  B0D8               	btfsc	status,0,c
  4423  001D96  D009               	goto	l600
  4424  001D98  0E00               	movlw	0
  4425  001D9A  6E31               	movwf	?___fttol,c
  4426  001D9C  0E00               	movlw	0
  4427  001D9E  6E32               	movwf	?___fttol+1,c
  4428  001DA0  0E00               	movlw	0
  4429  001DA2  6E33               	movwf	?___fttol+2,c
  4430  001DA4  0E00               	movlw	0
  4431  001DA6  6E34               	movwf	?___fttol+3,c
  4432  001DA8  0012               	return	
  4433  001DAA                     l600:
  4434  001DAA  90D8               	bcf	status,0,c
  4435  001DAC  323E               	rrcf	___fttol@lval+3,f,c
  4436  001DAE  323D               	rrcf	___fttol@lval+2,f,c
  4437  001DB0  323C               	rrcf	___fttol@lval+1,f,c
  4438  001DB2  323B               	rrcf	___fttol@lval,f,c
  4439  001DB4  3E3F               	incfsz	___fttol@exp1,f,c
  4440  001DB6  D7F9               	goto	l600
  4441  001DB8  D015               	goto	u2680
  4442  001DBA                     l599:
  4443  001DBA  0E17               	movlw	23
  4444  001DBC  643F               	cpfsgt	___fttol@exp1,c
  4445  001DBE  D00F               	goto	l605
  4446  001DC0  0E00               	movlw	0
  4447  001DC2  6E31               	movwf	?___fttol,c
  4448  001DC4  0E00               	movlw	0
  4449  001DC6  6E32               	movwf	?___fttol+1,c
  4450  001DC8  0E00               	movlw	0
  4451  001DCA  6E33               	movwf	?___fttol+2,c
  4452  001DCC  0E00               	movlw	0
  4453  001DCE  6E34               	movwf	?___fttol+3,c
  4454  001DD0  0012               	return	
  4455  001DD2  90D8               	bcf	status,0,c
  4456  001DD4  363B               	rlcf	___fttol@lval,f,c
  4457  001DD6  363C               	rlcf	___fttol@lval+1,f,c
  4458  001DD8  363D               	rlcf	___fttol@lval+2,f,c
  4459  001DDA  363E               	rlcf	___fttol@lval+3,f,c
  4460  001DDC  063F               	decf	___fttol@exp1,f,c
  4461  001DDE                     l605:
  4462  001DDE  503F               	movf	___fttol@exp1,w,c
  4463  001DE0  A4D8               	btfss	status,2,c
  4464  001DE2  D7F7               	goto	l606
  4465  001DE4                     u2680:
  4466  001DE4  503A               	movf	___fttol@sign1,w,c
  4467  001DE6  B4D8               	btfsc	status,2,c
  4468  001DE8  D008               	goto	l608
  4469  001DEA  1E3E               	comf	___fttol@lval+3,f,c
  4470  001DEC  1E3D               	comf	___fttol@lval+2,f,c
  4471  001DEE  1E3C               	comf	___fttol@lval+1,f,c
  4472  001DF0  6C3B               	negf	___fttol@lval,c
  4473  001DF2  0E00               	movlw	0
  4474  001DF4  223C               	addwfc	___fttol@lval+1,f,c
  4475  001DF6  223D               	addwfc	___fttol@lval+2,f,c
  4476  001DF8  223E               	addwfc	___fttol@lval+3,f,c
  4477  001DFA                     l608:
  4478  001DFA  C03B  F031         	movff	___fttol@lval,?___fttol
  4479  001DFE  C03C  F032         	movff	___fttol@lval+1,?___fttol+1
  4480  001E02  C03D  F033         	movff	___fttol@lval+2,?___fttol+2
  4481  001E06  C03E  F034         	movff	___fttol@lval+3,?___fttol+3
  4482  001E0A  0012               	return	
  4483  001E0C                     __end_of___fttol:
  4484                           	opt stack 0
  4485                           tblptru	equ	0xFF8
  4486                           tblptrh	equ	0xFF7
  4487                           tblptrl	equ	0xFF6
  4488                           tablat	equ	0xFF5
  4489                           prodh	equ	0xFF4
  4490                           prodl	equ	0xFF3
  4491                           postinc0	equ	0xFEE
  4492                           wreg	equ	0xFE8
  4493                           postinc2	equ	0xFDE
  4494                           postdec2	equ	0xFDD
  4495                           fsr2h	equ	0xFDA
  4496                           fsr2l	equ	0xFD9
  4497                           status	equ	0xFD8
  4498                           
  4499 ;; *************** function ___ftsub *****************
  4500 ;; Defined at:
  4501 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  4502 ;; Parameters:    Size  Location     Type
  4503 ;;  f1              3   63[COMRAM] float 
  4504 ;;  f2              3   66[COMRAM] float 
  4505 ;; Auto vars:     Size  Location     Type
  4506 ;;		None
  4507 ;; Return value:  Size  Location     Type
  4508 ;;                  3   63[COMRAM] float 
  4509 ;; Registers used:
  4510 ;;		wreg, status,2, status,0, cstack
  4511 ;; Tracked objects:
  4512 ;;		On entry : 0/0
  4513 ;;		On exit  : 0/0
  4514 ;;		Unchanged: 0/0
  4515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4516 ;;      Params:         6       0       0       0       0       0       0       0       0
  4517 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4518 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4519 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4520 ;;Total ram usage:        6 bytes
  4521 ;; Hardware stack levels used:    1
  4522 ;; Hardware stack levels required when called:    2
  4523 ;; This function calls:
  4524 ;;		___ftadd
  4525 ;; This function is called by:
  4526 ;;		_printf
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           	psect	text15
  4531  0024EA                     __ptext15:
  4532                           	opt stack 0
  4533  0024EA                     ___ftsub:
  4534                           	opt stack 27
  4535                           
  4536                           ;incstack = 0
  4537  0024EA  5043               	movf	___ftsub@f2,w,c
  4538  0024EC  1044               	iorwf	___ftsub@f2+1,w,c
  4539  0024EE  1045               	iorwf	___ftsub@f2+2,w,c
  4540  0024F0  B4D8               	btfsc	status,2,c
  4541  0024F2  D006               	goto	l593
  4542  0024F4  0E00               	movlw	0
  4543  0024F6  1A43               	xorwf	___ftsub@f2,f,c
  4544  0024F8  0E00               	movlw	0
  4545  0024FA  1A44               	xorwf	___ftsub@f2+1,f,c
  4546  0024FC  0E80               	movlw	128
  4547  0024FE  1A45               	xorwf	___ftsub@f2+2,f,c
  4548  002500                     l593:
  4549  002500  C040  F034         	movff	___ftsub@f1,___ftadd@f1
  4550  002504  C041  F035         	movff	___ftsub@f1+1,___ftadd@f1+1
  4551  002508  C042  F036         	movff	___ftsub@f1+2,___ftadd@f1+2
  4552  00250C  C043  F037         	movff	___ftsub@f2,___ftadd@f2
  4553  002510  C044  F038         	movff	___ftsub@f2+1,___ftadd@f2+1
  4554  002514  C045  F039         	movff	___ftsub@f2+2,___ftadd@f2+2
  4555  002518  EC89  F00C         	call	___ftadd	;wreg free
  4556  00251C  C034  F040         	movff	?___ftadd,?___ftsub
  4557  002520  C035  F041         	movff	?___ftadd+1,?___ftsub+1
  4558  002524  C036  F042         	movff	?___ftadd+2,?___ftsub+2
  4559  002528  0012               	return	
  4560  00252A                     __end_of___ftsub:
  4561                           	opt stack 0
  4562                           tblptru	equ	0xFF8
  4563                           tblptrh	equ	0xFF7
  4564                           tblptrl	equ	0xFF6
  4565                           tablat	equ	0xFF5
  4566                           prodh	equ	0xFF4
  4567                           prodl	equ	0xFF3
  4568                           postinc0	equ	0xFEE
  4569                           wreg	equ	0xFE8
  4570                           postinc2	equ	0xFDE
  4571                           postdec2	equ	0xFDD
  4572                           fsr2h	equ	0xFDA
  4573                           fsr2l	equ	0xFD9
  4574                           status	equ	0xFD8
  4575                           
  4576 ;; *************** function ___ftadd *****************
  4577 ;; Defined at:
  4578 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4579 ;; Parameters:    Size  Location     Type
  4580 ;;  f1              3   51[COMRAM] float 
  4581 ;;  f2              3   54[COMRAM] float 
  4582 ;; Auto vars:     Size  Location     Type
  4583 ;;  exp1            1   62[COMRAM] unsigned char 
  4584 ;;  exp2            1   61[COMRAM] unsigned char 
  4585 ;;  sign            1   60[COMRAM] unsigned char 
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  3   51[COMRAM] float 
  4588 ;; Registers used:
  4589 ;;		wreg, status,2, status,0, cstack
  4590 ;; Tracked objects:
  4591 ;;		On entry : 0/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4595 ;;      Params:         6       0       0       0       0       0       0       0       0
  4596 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4597 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4598 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4599 ;;Total ram usage:       12 bytes
  4600 ;; Hardware stack levels used:    1
  4601 ;; Hardware stack levels required when called:    1
  4602 ;; This function calls:
  4603 ;;		___ftpack
  4604 ;; This function is called by:
  4605 ;;		_printf
  4606 ;;		___ftsub
  4607 ;; This function uses a non-reentrant model
  4608 ;;
  4609                           
  4610                           	psect	text16
  4611  001912                     __ptext16:
  4612                           	opt stack 0
  4613  001912                     ___ftadd:
  4614                           	opt stack 27
  4615                           
  4616                           ;incstack = 0
  4617  001912  C036  F03A         	movff	___ftadd@f1+2,??___ftadd
  4618  001916  6A3B               	clrf	(??___ftadd+1)& (0+255),c
  4619  001918  6A3C               	clrf	(??___ftadd+2)& (0+255),c
  4620  00191A  3435               	rlcf	___ftadd@f1+1,w,c
  4621  00191C  363A               	rlcf	??___ftadd& (0+255),f,c
  4622  00191E  E301               	bnc	u1881
  4623  001920  803B               	bsf	(??___ftadd+1)& (0+255),0,c
  4624  001922                     u1881:
  4625  001922  503A               	movf	??___ftadd,w,c
  4626  001924  6E3F               	movwf	___ftadd@exp1,c
  4627  001926  C039  F03A         	movff	___ftadd@f2+2,??___ftadd
  4628  00192A  6A3B               	clrf	(??___ftadd+1)& (0+255),c
  4629  00192C  6A3C               	clrf	(??___ftadd+2)& (0+255),c
  4630  00192E  3438               	rlcf	___ftadd@f2+1,w,c
  4631  001930  363A               	rlcf	??___ftadd& (0+255),f,c
  4632  001932  E301               	bnc	u1891
  4633  001934  803B               	bsf	(??___ftadd+1)& (0+255),0,c
  4634  001936                     u1891:
  4635  001936  503A               	movf	??___ftadd,w,c
  4636  001938  6E3E               	movwf	___ftadd@exp2,c
  4637  00193A  503F               	movf	___ftadd@exp1,w,c
  4638  00193C  B4D8               	btfsc	status,2,c
  4639  00193E  D00B               	goto	u1920
  4640  001940  503E               	movf	___ftadd@exp2,w,c
  4641  001942  5C3F               	subwf	___ftadd@exp1,w,c
  4642  001944  B0D8               	btfsc	status,0,c
  4643  001946  D00E               	goto	l511
  4644  001948  503F               	movf	___ftadd@exp1,w,c
  4645  00194A  0800               	sublw	0
  4646  00194C  243E               	addwf	___ftadd@exp2,w,c
  4647  00194E  6E3A               	movwf	??___ftadd& (0+255),c
  4648  001950  0E18               	movlw	24
  4649  001952  643A               	cpfsgt	??___ftadd,c
  4650  001954  D007               	goto	l511
  4651  001956                     u1920:
  4652  001956  C037  F034         	movff	___ftadd@f2,?___ftadd
  4653  00195A  C038  F035         	movff	___ftadd@f2+1,?___ftadd+1
  4654  00195E  C039  F036         	movff	___ftadd@f2+2,?___ftadd+2
  4655  001962  0012               	return	
  4656  001964                     l511:
  4657  001964  503E               	movf	___ftadd@exp2,w,c
  4658  001966  B4D8               	btfsc	status,2,c
  4659  001968  D00B               	goto	u1950
  4660  00196A  503F               	movf	___ftadd@exp1,w,c
  4661  00196C  5C3E               	subwf	___ftadd@exp2,w,c
  4662  00196E  B0D8               	btfsc	status,0,c
  4663  001970  D00E               	goto	l515
  4664  001972  503E               	movf	___ftadd@exp2,w,c
  4665  001974  0800               	sublw	0
  4666  001976  243F               	addwf	___ftadd@exp1,w,c
  4667  001978  6E3A               	movwf	??___ftadd& (0+255),c
  4668  00197A  0E18               	movlw	24
  4669  00197C  643A               	cpfsgt	??___ftadd,c
  4670  00197E  D007               	goto	l515
  4671  001980                     u1950:
  4672  001980  C034  F034         	movff	___ftadd@f1,?___ftadd
  4673  001984  C035  F035         	movff	___ftadd@f1+1,?___ftadd+1
  4674  001988  C036  F036         	movff	___ftadd@f1+2,?___ftadd+2
  4675  00198C  0012               	return	
  4676  00198E                     l515:
  4677  00198E  0E06               	movlw	6
  4678  001990  6E3D               	movwf	___ftadd@sign,c
  4679  001992  BE36               	btfsc	___ftadd@f1+2,7,c
  4680  001994  8E3D               	bsf	___ftadd@sign,7,c
  4681  001996  BE39               	btfsc	___ftadd@f2+2,7,c
  4682  001998  8C3D               	bsf	___ftadd@sign,6,c
  4683  00199A  8E35               	bsf	___ftadd@f1+1,7,c
  4684  00199C  0EFF               	movlw	255
  4685  00199E  1634               	andwf	___ftadd@f1,f,c
  4686  0019A0  0EFF               	movlw	255
  4687  0019A2  1635               	andwf	___ftadd@f1+1,f,c
  4688  0019A4  0E00               	movlw	0
  4689  0019A6  1636               	andwf	___ftadd@f1+2,f,c
  4690  0019A8  8E38               	bsf	___ftadd@f2+1,7,c
  4691  0019AA  0EFF               	movlw	255
  4692  0019AC  1637               	andwf	___ftadd@f2,f,c
  4693  0019AE  0EFF               	movlw	255
  4694  0019B0  1638               	andwf	___ftadd@f2+1,f,c
  4695  0019B2  0E00               	movlw	0
  4696  0019B4  1639               	andwf	___ftadd@f2+2,f,c
  4697  0019B6  503E               	movf	___ftadd@exp2,w,c
  4698  0019B8  5C3F               	subwf	___ftadd@exp1,w,c
  4699  0019BA  B0D8               	btfsc	status,0,c
  4700  0019BC  D01B               	goto	l520
  4701  0019BE                     u1980:
  4702  0019BE  90D8               	bcf	status,0,c
  4703  0019C0  3637               	rlcf	___ftadd@f2,f,c
  4704  0019C2  3638               	rlcf	___ftadd@f2+1,f,c
  4705  0019C4  3639               	rlcf	___ftadd@f2+2,f,c
  4706  0019C6  063E               	decf	___ftadd@exp2,f,c
  4707  0019C8  503F               	movf	___ftadd@exp1,w,c
  4708  0019CA  183E               	xorwf	___ftadd@exp2,w,c
  4709  0019CC  B4D8               	btfsc	status,2,c
  4710  0019CE  D00D               	goto	l525
  4711  0019D0  063D               	decf	___ftadd@sign,f,c
  4712  0019D2  C03D  F03A         	movff	___ftadd@sign,??___ftadd
  4713  0019D6  0E07               	movlw	7
  4714  0019D8  163A               	andwf	??___ftadd,f,c
  4715  0019DA  B4D8               	btfsc	status,2,c
  4716  0019DC  D006               	goto	l525
  4717  0019DE  D7EF               	goto	u1980
  4718  0019E0  90D8               	bcf	status,0,c
  4719  0019E2  3236               	rrcf	___ftadd@f1+2,f,c
  4720  0019E4  3235               	rrcf	___ftadd@f1+1,f,c
  4721  0019E6  3234               	rrcf	___ftadd@f1,f,c
  4722  0019E8  2A3F               	incf	___ftadd@exp1,f,c
  4723  0019EA                     l525:
  4724  0019EA  503E               	movf	___ftadd@exp2,w,c
  4725  0019EC  183F               	xorwf	___ftadd@exp1,w,c
  4726  0019EE  B4D8               	btfsc	status,2,c
  4727  0019F0  D01F               	goto	u2050
  4728  0019F2  D7F6               	goto	l526
  4729  0019F4                     l520:
  4730  0019F4  503F               	movf	___ftadd@exp1,w,c
  4731  0019F6  5C3E               	subwf	___ftadd@exp2,w,c
  4732  0019F8  B0D8               	btfsc	status,0,c
  4733  0019FA  D01A               	goto	u2050
  4734  0019FC                     u2020:
  4735  0019FC  90D8               	bcf	status,0,c
  4736  0019FE  3634               	rlcf	___ftadd@f1,f,c
  4737  001A00  3635               	rlcf	___ftadd@f1+1,f,c
  4738  001A02  3636               	rlcf	___ftadd@f1+2,f,c
  4739  001A04  063F               	decf	___ftadd@exp1,f,c
  4740  001A06  503F               	movf	___ftadd@exp1,w,c
  4741  001A08  183E               	xorwf	___ftadd@exp2,w,c
  4742  001A0A  B4D8               	btfsc	status,2,c
  4743  001A0C  D00D               	goto	l534
  4744  001A0E  063D               	decf	___ftadd@sign,f,c
  4745  001A10  C03D  F03A         	movff	___ftadd@sign,??___ftadd
  4746  001A14  0E07               	movlw	7
  4747  001A16  163A               	andwf	??___ftadd,f,c
  4748  001A18  B4D8               	btfsc	status,2,c
  4749  001A1A  D006               	goto	l534
  4750  001A1C  D7EF               	goto	u2020
  4751  001A1E  90D8               	bcf	status,0,c
  4752  001A20  3239               	rrcf	___ftadd@f2+2,f,c
  4753  001A22  3238               	rrcf	___ftadd@f2+1,f,c
  4754  001A24  3237               	rrcf	___ftadd@f2,f,c
  4755  001A26  2A3E               	incf	___ftadd@exp2,f,c
  4756  001A28                     l534:
  4757  001A28  503E               	movf	___ftadd@exp2,w,c
  4758  001A2A  183F               	xorwf	___ftadd@exp1,w,c
  4759  001A2C  A4D8               	btfss	status,2,c
  4760  001A2E  D7F7               	goto	l535
  4761  001A30                     u2050:
  4762  001A30  AE3D               	btfss	___ftadd@sign,7,c
  4763  001A32  D00C               	goto	l537
  4764  001A34  0EFF               	movlw	255
  4765  001A36  1A34               	xorwf	___ftadd@f1,f,c
  4766  001A38  0EFF               	movlw	255
  4767  001A3A  1A35               	xorwf	___ftadd@f1+1,f,c
  4768  001A3C  0EFF               	movlw	255
  4769  001A3E  1A36               	xorwf	___ftadd@f1+2,f,c
  4770  001A40  0E01               	movlw	1
  4771  001A42  2634               	addwf	___ftadd@f1,f,c
  4772  001A44  0E00               	movlw	0
  4773  001A46  2235               	addwfc	___ftadd@f1+1,f,c
  4774  001A48  0E00               	movlw	0
  4775  001A4A  2236               	addwfc	___ftadd@f1+2,f,c
  4776  001A4C                     l537:
  4777  001A4C  AC3D               	btfss	___ftadd@sign,6,c
  4778  001A4E  D00C               	goto	l538
  4779  001A50  0EFF               	movlw	255
  4780  001A52  1A37               	xorwf	___ftadd@f2,f,c
  4781  001A54  0EFF               	movlw	255
  4782  001A56  1A38               	xorwf	___ftadd@f2+1,f,c
  4783  001A58  0EFF               	movlw	255
  4784  001A5A  1A39               	xorwf	___ftadd@f2+2,f,c
  4785  001A5C  0E01               	movlw	1
  4786  001A5E  2637               	addwf	___ftadd@f2,f,c
  4787  001A60  0E00               	movlw	0
  4788  001A62  2238               	addwfc	___ftadd@f2+1,f,c
  4789  001A64  0E00               	movlw	0
  4790  001A66  2239               	addwfc	___ftadd@f2+2,f,c
  4791  001A68                     l538:
  4792  001A68  0E00               	movlw	0
  4793  001A6A  6E3D               	movwf	___ftadd@sign,c
  4794  001A6C  5034               	movf	___ftadd@f1,w,c
  4795  001A6E  2637               	addwf	___ftadd@f2,f,c
  4796  001A70  5035               	movf	___ftadd@f1+1,w,c
  4797  001A72  2238               	addwfc	___ftadd@f2+1,f,c
  4798  001A74  5036               	movf	___ftadd@f1+2,w,c
  4799  001A76  2239               	addwfc	___ftadd@f2+2,f,c
  4800  001A78  AE39               	btfss	___ftadd@f2+2,7,c
  4801  001A7A  D00E               	goto	l539
  4802  001A7C  0EFF               	movlw	255
  4803  001A7E  1A37               	xorwf	___ftadd@f2,f,c
  4804  001A80  0EFF               	movlw	255
  4805  001A82  1A38               	xorwf	___ftadd@f2+1,f,c
  4806  001A84  0EFF               	movlw	255
  4807  001A86  1A39               	xorwf	___ftadd@f2+2,f,c
  4808  001A88  0E01               	movlw	1
  4809  001A8A  2637               	addwf	___ftadd@f2,f,c
  4810  001A8C  0E00               	movlw	0
  4811  001A8E  2238               	addwfc	___ftadd@f2+1,f,c
  4812  001A90  0E00               	movlw	0
  4813  001A92  2239               	addwfc	___ftadd@f2+2,f,c
  4814  001A94  0E01               	movlw	1
  4815  001A96  6E3D               	movwf	___ftadd@sign,c
  4816  001A98                     l539:
  4817  001A98  C037  F001         	movff	___ftadd@f2,___ftpack@arg
  4818  001A9C  C038  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4819  001AA0  C039  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4820  001AA4  C03F  F004         	movff	___ftadd@exp1,___ftpack@exp
  4821  001AA8  C03D  F005         	movff	___ftadd@sign,___ftpack@sign
  4822  001AAC  ECF3  F00F         	call	___ftpack	;wreg free
  4823  001AB0  C001  F034         	movff	?___ftpack,?___ftadd
  4824  001AB4  C002  F035         	movff	?___ftpack+1,?___ftadd+1
  4825  001AB8  C003  F036         	movff	?___ftpack+2,?___ftadd+2
  4826  001ABC  0012               	return	
  4827  001ABE                     __end_of___ftadd:
  4828                           	opt stack 0
  4829                           tblptru	equ	0xFF8
  4830                           tblptrh	equ	0xFF7
  4831                           tblptrl	equ	0xFF6
  4832                           tablat	equ	0xFF5
  4833                           prodh	equ	0xFF4
  4834                           prodl	equ	0xFF3
  4835                           postinc0	equ	0xFEE
  4836                           wreg	equ	0xFE8
  4837                           postinc2	equ	0xFDE
  4838                           postdec2	equ	0xFDD
  4839                           fsr2h	equ	0xFDA
  4840                           fsr2l	equ	0xFD9
  4841                           status	equ	0xFD8
  4842                           
  4843 ;; *************** function ___ftneg *****************
  4844 ;; Defined at:
  4845 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  4846 ;; Parameters:    Size  Location     Type
  4847 ;;  f1              3    0[COMRAM] float 
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;		None
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  3    0[COMRAM] float 
  4852 ;; Registers used:
  4853 ;;		wreg, status,2, status,0
  4854 ;; Tracked objects:
  4855 ;;		On entry : 0/0
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4859 ;;      Params:         3       0       0       0       0       0       0       0       0
  4860 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4861 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4862 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4863 ;;Total ram usage:        3 bytes
  4864 ;; Hardware stack levels used:    1
  4865 ;; This function calls:
  4866 ;;		Nothing
  4867 ;; This function is called by:
  4868 ;;		_printf
  4869 ;; This function uses a non-reentrant model
  4870 ;;
  4871                           
  4872                           	psect	text17
  4873  002550                     __ptext17:
  4874                           	opt stack 0
  4875  002550                     ___ftneg:
  4876                           	opt stack 29
  4877                           
  4878                           ;incstack = 0
  4879  002550  5001               	movf	___ftneg@f1,w,c
  4880  002552  1002               	iorwf	___ftneg@f1+1,w,c
  4881  002554  1003               	iorwf	___ftneg@f1+2,w,c
  4882  002556  B4D8               	btfsc	status,2,c
  4883  002558  D006               	goto	l587
  4884  00255A  0E00               	movlw	0
  4885  00255C  1A01               	xorwf	___ftneg@f1,f,c
  4886  00255E  0E00               	movlw	0
  4887  002560  1A02               	xorwf	___ftneg@f1+1,f,c
  4888  002562  0E80               	movlw	128
  4889  002564  1A03               	xorwf	___ftneg@f1+2,f,c
  4890  002566                     l587:
  4891  002566  C001  F001         	movff	___ftneg@f1,?___ftneg
  4892  00256A  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4893  00256E  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4894  002572  0012               	return		;funcret
  4895  002574                     __end_of___ftneg:
  4896                           	opt stack 0
  4897                           tblptru	equ	0xFF8
  4898                           tblptrh	equ	0xFF7
  4899                           tblptrl	equ	0xFF6
  4900                           tablat	equ	0xFF5
  4901                           prodh	equ	0xFF4
  4902                           prodl	equ	0xFF3
  4903                           postinc0	equ	0xFEE
  4904                           wreg	equ	0xFE8
  4905                           postinc2	equ	0xFDE
  4906                           postdec2	equ	0xFDD
  4907                           fsr2h	equ	0xFDA
  4908                           fsr2l	equ	0xFD9
  4909                           status	equ	0xFD8
  4910                           
  4911 ;; *************** function ___ftge *****************
  4912 ;; Defined at:
  4913 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  4914 ;; Parameters:    Size  Location     Type
  4915 ;;  ff1             3    0[COMRAM] float 
  4916 ;;  ff2             3    3[COMRAM] float 
  4917 ;; Auto vars:     Size  Location     Type
  4918 ;;		None
  4919 ;; Return value:  Size  Location     Type
  4920 ;;		None               void
  4921 ;; Registers used:
  4922 ;;		wreg, status,2, status,0
  4923 ;; Tracked objects:
  4924 ;;		On entry : 0/0
  4925 ;;		On exit  : 0/0
  4926 ;;		Unchanged: 0/0
  4927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4928 ;;      Params:         6       0       0       0       0       0       0       0       0
  4929 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4930 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4931 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4932 ;;Total ram usage:        9 bytes
  4933 ;; Hardware stack levels used:    1
  4934 ;; This function calls:
  4935 ;;		Nothing
  4936 ;; This function is called by:
  4937 ;;		_printf
  4938 ;; This function uses a non-reentrant model
  4939 ;;
  4940                           
  4941                           	psect	text18
  4942  002094                     __ptext18:
  4943                           	opt stack 0
  4944  002094                     ___ftge:
  4945                           	opt stack 29
  4946                           
  4947                           ;incstack = 0
  4948  002094  AE03               	btfss	___ftge@ff1+2,7,c
  4949  002096  D016               	goto	l569
  4950  002098  C001  F007         	movff	___ftge@ff1,??___ftge
  4951  00209C  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4952  0020A0  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4953  0020A4  1E07               	comf	??___ftge,f,c
  4954  0020A6  1E08               	comf	??___ftge+1,f,c
  4955  0020A8  1E09               	comf	??___ftge+2,f,c
  4956  0020AA  2A07               	incf	??___ftge,f,c
  4957  0020AC  0E00               	movlw	0
  4958  0020AE  2208               	addwfc	??___ftge+1,f,c
  4959  0020B0  2209               	addwfc	??___ftge+2,f,c
  4960  0020B2  0E00               	movlw	0
  4961  0020B4  2407               	addwf	??___ftge,w,c
  4962  0020B6  6E01               	movwf	___ftge@ff1,c
  4963  0020B8  0E00               	movlw	0
  4964  0020BA  2008               	addwfc	??___ftge+1,w,c
  4965  0020BC  6E02               	movwf	___ftge@ff1+1,c
  4966  0020BE  0E80               	movlw	128
  4967  0020C0  2009               	addwfc	??___ftge+2,w,c
  4968  0020C2  6E03               	movwf	___ftge@ff1+2,c
  4969  0020C4                     l569:
  4970  0020C4  AE06               	btfss	___ftge@ff2+2,7,c
  4971  0020C6  D016               	goto	l570
  4972  0020C8  C004  F007         	movff	___ftge@ff2,??___ftge
  4973  0020CC  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  4974  0020D0  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  4975  0020D4  1E07               	comf	??___ftge,f,c
  4976  0020D6  1E08               	comf	??___ftge+1,f,c
  4977  0020D8  1E09               	comf	??___ftge+2,f,c
  4978  0020DA  2A07               	incf	??___ftge,f,c
  4979  0020DC  0E00               	movlw	0
  4980  0020DE  2208               	addwfc	??___ftge+1,f,c
  4981  0020E0  2209               	addwfc	??___ftge+2,f,c
  4982  0020E2  0E00               	movlw	0
  4983  0020E4  2407               	addwf	??___ftge,w,c
  4984  0020E6  6E04               	movwf	___ftge@ff2,c
  4985  0020E8  0E00               	movlw	0
  4986  0020EA  2008               	addwfc	??___ftge+1,w,c
  4987  0020EC  6E05               	movwf	___ftge@ff2+1,c
  4988  0020EE  0E80               	movlw	128
  4989  0020F0  2009               	addwfc	??___ftge+2,w,c
  4990  0020F2  6E06               	movwf	___ftge@ff2+2,c
  4991  0020F4                     l570:
  4992  0020F4  0E00               	movlw	0
  4993  0020F6  1A01               	xorwf	___ftge@ff1,f,c
  4994  0020F8  0E00               	movlw	0
  4995  0020FA  1A02               	xorwf	___ftge@ff1+1,f,c
  4996  0020FC  0E80               	movlw	128
  4997  0020FE  1A03               	xorwf	___ftge@ff1+2,f,c
  4998  002100  0E00               	movlw	0
  4999  002102  1A04               	xorwf	___ftge@ff2,f,c
  5000  002104  0E00               	movlw	0
  5001  002106  1A05               	xorwf	___ftge@ff2+1,f,c
  5002  002108  0E80               	movlw	128
  5003  00210A  1A06               	xorwf	___ftge@ff2+2,f,c
  5004  00210C  5004               	movf	___ftge@ff2,w,c
  5005  00210E  5C01               	subwf	___ftge@ff1,w,c
  5006  002110  5005               	movf	___ftge@ff2+1,w,c
  5007  002112  5802               	subwfb	___ftge@ff1+1,w,c
  5008  002114  5006               	movf	___ftge@ff2+2,w,c
  5009  002116  5803               	subwfb	___ftge@ff1+2,w,c
  5010  002118  B0D8               	btfsc	status,0,c
  5011  00211A  D002               	goto	l1993
  5012  00211C  90D8               	bcf	status,0,c
  5013  00211E  0012               	return	
  5014  002120                     l1993:
  5015  002120  80D8               	bsf	status,0,c
  5016  002122  0012               	return	
  5017  002124                     __end_of___ftge:
  5018                           	opt stack 0
  5019                           tblptru	equ	0xFF8
  5020                           tblptrh	equ	0xFF7
  5021                           tblptrl	equ	0xFF6
  5022                           tablat	equ	0xFF5
  5023                           prodh	equ	0xFF4
  5024                           prodl	equ	0xFF3
  5025                           postinc0	equ	0xFEE
  5026                           wreg	equ	0xFE8
  5027                           postinc2	equ	0xFDE
  5028                           postdec2	equ	0xFDD
  5029                           fsr2h	equ	0xFDA
  5030                           fsr2l	equ	0xFD9
  5031                           status	equ	0xFD8
  5032                           
  5033 ;; *************** function _LCD_segunda_linea *****************
  5034 ;; Defined at:
  5035 ;;		line 146 in file "LCD.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;		None
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;		None
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  1    wreg      void 
  5042 ;; Registers used:
  5043 ;;		wreg, status,2, status,0, cstack
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5049 ;;      Params:         0       0       0       0       0       0       0       0       0
  5050 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5051 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5052 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5053 ;;Total ram usage:        0 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; Hardware stack levels required when called:    2
  5056 ;; This function calls:
  5057 ;;		_LCD_cmd
  5058 ;; This function is called by:
  5059 ;;		_main
  5060 ;; This function uses a non-reentrant model
  5061 ;;
  5062                           
  5063                           	psect	text19
  5064  002604                     __ptext19:
  5065                           	opt stack 0
  5066  002604                     _LCD_segunda_linea:
  5067                           	opt stack 28
  5068                           
  5069                           ;LCD.c: 147: LCD_cmd(0xC0);
  5070                           
  5071                           ;incstack = 0
  5072  002604  0EC0               	movlw	192
  5073  002606  ECF7  F012         	call	_LCD_cmd
  5074  00260A  0012               	return		;funcret
  5075  00260C                     __end_of_LCD_segunda_linea:
  5076                           	opt stack 0
  5077                           tblptru	equ	0xFF8
  5078                           tblptrh	equ	0xFF7
  5079                           tblptrl	equ	0xFF6
  5080                           tablat	equ	0xFF5
  5081                           prodh	equ	0xFF4
  5082                           prodl	equ	0xFF3
  5083                           postinc0	equ	0xFEE
  5084                           wreg	equ	0xFE8
  5085                           postinc2	equ	0xFDE
  5086                           postdec2	equ	0xFDD
  5087                           fsr2h	equ	0xFDA
  5088                           fsr2l	equ	0xFD9
  5089                           status	equ	0xFD8
  5090                           
  5091 ;; *************** function _LCD_printf *****************
  5092 ;; Defined at:
  5093 ;;		line 97 in file "LCD.c"
  5094 ;; Parameters:    Size  Location     Type
  5095 ;;  dato            2    2[COMRAM] PTR unsigned char 
  5096 ;;		 -> LCD_integer@st(8), STR_3(6), 
  5097 ;; Auto vars:     Size  Location     Type
  5098 ;;		None
  5099 ;; Return value:  Size  Location     Type
  5100 ;;                  1    wreg      void 
  5101 ;; Registers used:
  5102 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5103 ;; Tracked objects:
  5104 ;;		On entry : 0/0
  5105 ;;		On exit  : 0/0
  5106 ;;		Unchanged: 0/0
  5107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5108 ;;      Params:         2       0       0       0       0       0       0       0       0
  5109 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5110 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5111 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5112 ;;Total ram usage:        2 bytes
  5113 ;; Hardware stack levels used:    1
  5114 ;; Hardware stack levels required when called:    2
  5115 ;; This function calls:
  5116 ;;		_LCD_dato
  5117 ;; This function is called by:
  5118 ;;		_main
  5119 ;;		_LCD_integer
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           	psect	text20
  5124  002450                     __ptext20:
  5125                           	opt stack 0
  5126  002450                     _LCD_printf:
  5127                           	opt stack 28
  5128                           
  5129                           ;LCD.c: 98: while (*dato){
  5130                           
  5131                           ;incstack = 0
  5132  002450  D014               	goto	l98
  5133  002452                     
  5134                           ;LCD.c: 99: LCD_dato(*dato);
  5135  002452  C003  FFF6         	movff	LCD_printf@dato,tblptrl
  5136  002456  C004  FFF7         	movff	LCD_printf@dato+1,tblptrh
  5137  00245A  6AF8               	clrf	tblptru,c
  5138  00245C  0E07               	movlw	(high __ramtop+-1)
  5139  00245E  64F7               	cpfsgt	tblptrh,c
  5140  002460  D003               	bra	u3347
  5141  002462  0008               	tblrd		*
  5142  002464  50F5               	movf	tablat,w,c
  5143  002466  D005               	bra	u3340
  5144  002468                     u3347:
  5145  002468  CFF6 FFE9          	movff	tblptrl,fsr0l
  5146  00246C  CFF7 FFEA          	movff	tblptrh,fsr0h
  5147  002470  50EF               	movf	indf0,w,c
  5148  002472                     u3340:
  5149  002472  ECF1  F012         	call	_LCD_dato
  5150                           
  5151                           ;LCD.c: 100: dato++;
  5152  002476  4A03               	infsnz	LCD_printf@dato,f,c
  5153  002478  2A04               	incf	LCD_printf@dato+1,f,c
  5154  00247A                     l98:
  5155  00247A  C003  FFF6         	movff	LCD_printf@dato,tblptrl
  5156  00247E  C004  FFF7         	movff	LCD_printf@dato+1,tblptrh
  5157  002482  6AF8               	clrf	tblptru,c
  5158  002484  0E07               	movlw	(high __ramtop+-1)
  5159  002486  64F7               	cpfsgt	tblptrh,c
  5160  002488  D003               	bra	u3357
  5161  00248A  0008               	tblrd		*
  5162  00248C  50F5               	movf	tablat,w,c
  5163  00248E  D005               	bra	u3350
  5164  002490                     u3357:
  5165  002490  CFF6 FFE9          	movff	tblptrl,fsr0l
  5166  002494  CFF7 FFEA          	movff	tblptrh,fsr0h
  5167  002498  50EF               	movf	indf0,w,c
  5168  00249A                     u3350:
  5169  00249A  0900               	iorlw	0
  5170  00249C  B4D8               	btfsc	status,2,c
  5171  00249E  0012               	return	
  5172  0024A0  D7D8               	goto	l99
  5173  0024A2                     __end_of_LCD_printf:
  5174                           	opt stack 0
  5175                           tblptru	equ	0xFF8
  5176                           tblptrh	equ	0xFF7
  5177                           tblptrl	equ	0xFF6
  5178                           tablat	equ	0xFF5
  5179                           prodh	equ	0xFF4
  5180                           prodl	equ	0xFF3
  5181                           indf0	equ	0xFEF
  5182                           postinc0	equ	0xFEE
  5183                           fsr0h	equ	0xFEA
  5184                           fsr0l	equ	0xFE9
  5185                           wreg	equ	0xFE8
  5186                           postinc2	equ	0xFDE
  5187                           postdec2	equ	0xFDD
  5188                           fsr2h	equ	0xFDA
  5189                           fsr2l	equ	0xFD9
  5190                           status	equ	0xFD8
  5191                           
  5192 ;; *************** function _LCD_dato *****************
  5193 ;; Defined at:
  5194 ;;		line 85 in file "LCD.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;  dato            1    wreg     unsigned char 
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;  dato            1    1[COMRAM] unsigned char 
  5199 ;; Return value:  Size  Location     Type
  5200 ;;                  1    wreg      void 
  5201 ;; Registers used:
  5202 ;;		wreg, status,2, status,0, cstack
  5203 ;; Tracked objects:
  5204 ;;		On entry : 0/0
  5205 ;;		On exit  : 0/0
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5208 ;;      Params:         0       0       0       0       0       0       0       0       0
  5209 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5210 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5211 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5212 ;;Total ram usage:        1 bytes
  5213 ;; Hardware stack levels used:    1
  5214 ;; Hardware stack levels required when called:    1
  5215 ;; This function calls:
  5216 ;;		_LCD_write
  5217 ;; This function is called by:
  5218 ;;		_putch
  5219 ;;		_LCD_printf
  5220 ;;		_LCD_custom_char
  5221 ;; This function uses a non-reentrant model
  5222 ;;
  5223                           
  5224                           	psect	text21
  5225  0025E2                     __ptext21:
  5226                           	opt stack 0
  5227  0025E2                     _LCD_dato:
  5228                           	opt stack 27
  5229                           
  5230                           ;incstack = 0
  5231                           ;LCD_dato@dato stored from wreg
  5232  0025E2  6E02               	movwf	LCD_dato@dato,c
  5233                           
  5234                           ;LCD.c: 88: LATDbits.LATD3 = 1;
  5235  0025E4  868C               	bsf	3980,3,c	;volatile
  5236                           
  5237                           ;LCD.c: 89: LCD_write(dato);
  5238  0025E6  5002               	movf	LCD_dato@dato,w,c
  5239  0025E8  EC90  F011         	call	_LCD_write
  5240  0025EC  0012               	return		;funcret
  5241  0025EE                     __end_of_LCD_dato:
  5242                           	opt stack 0
  5243                           tblptru	equ	0xFF8
  5244                           tblptrh	equ	0xFF7
  5245                           tblptrl	equ	0xFF6
  5246                           tablat	equ	0xFF5
  5247                           prodh	equ	0xFF4
  5248                           prodl	equ	0xFF3
  5249                           indf0	equ	0xFEF
  5250                           postinc0	equ	0xFEE
  5251                           fsr0h	equ	0xFEA
  5252                           fsr0l	equ	0xFE9
  5253                           wreg	equ	0xFE8
  5254                           postinc2	equ	0xFDE
  5255                           postdec2	equ	0xFDD
  5256                           fsr2h	equ	0xFDA
  5257                           fsr2l	equ	0xFD9
  5258                           status	equ	0xFD8
  5259                           
  5260 ;; *************** function _LCD_init *****************
  5261 ;; Defined at:
  5262 ;;		line 18 in file "LCD.c"
  5263 ;; Parameters:    Size  Location     Type
  5264 ;;		None
  5265 ;; Auto vars:     Size  Location     Type
  5266 ;;		None
  5267 ;; Return value:  Size  Location     Type
  5268 ;;                  1    wreg      void 
  5269 ;; Registers used:
  5270 ;;		wreg, status,2, status,0, cstack
  5271 ;; Tracked objects:
  5272 ;;		On entry : 0/0
  5273 ;;		On exit  : 0/0
  5274 ;;		Unchanged: 0/0
  5275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5276 ;;      Params:         0       0       0       0       0       0       0       0       0
  5277 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5278 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5279 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5280 ;;Total ram usage:        2 bytes
  5281 ;; Hardware stack levels used:    1
  5282 ;; Hardware stack levels required when called:    2
  5283 ;; This function calls:
  5284 ;;		_LCD_cmd
  5285 ;; This function is called by:
  5286 ;;		_main
  5287 ;; This function uses a non-reentrant model
  5288 ;;
  5289                           
  5290                           	psect	text22
  5291  0024A2                     __ptext22:
  5292                           	opt stack 0
  5293  0024A2                     _LCD_init:
  5294                           	opt stack 28
  5295                           
  5296                           ;LCD.c: 20: TRISDbits.TRISD4 = 0;
  5297                           
  5298                           ;incstack = 0
  5299  0024A2  9895               	bcf	3989,4,c	;volatile
  5300                           
  5301                           ;LCD.c: 21: TRISDbits.TRISD5 = 0;
  5302  0024A4  9A95               	bcf	3989,5,c	;volatile
  5303                           
  5304                           ;LCD.c: 22: TRISDbits.TRISD6 = 0;
  5305  0024A6  9C95               	bcf	3989,6,c	;volatile
  5306                           
  5307                           ;LCD.c: 23: TRISDbits.TRISD7 = 0;
  5308  0024A8  9E95               	bcf	3989,7,c	;volatile
  5309                           
  5310                           ;LCD.c: 25: TRISDbits.TRISD3 = 0;
  5311  0024AA  9695               	bcf	3989,3,c	;volatile
  5312                           
  5313                           ;LCD.c: 26: TRISDbits.TRISD2 = 0;
  5314  0024AC  9495               	bcf	3989,2,c	;volatile
  5315                           
  5316                           ;LCD.c: 27: LATDbits.LATD3 = 0;
  5317  0024AE  968C               	bcf	3980,3,c	;volatile
  5318                           
  5319                           ;LCD.c: 28: LATDbits.LATD2 = 0;
  5320  0024B0  948C               	bcf	3980,2,c	;volatile
  5321                           
  5322                           ;LCD.c: 30: LATDbits.LATD4 = 0;
  5323  0024B2  988C               	bcf	3980,4,c	;volatile
  5324                           
  5325                           ;LCD.c: 31: LATDbits.LATD5 = 0;
  5326  0024B4  9A8C               	bcf	3980,5,c	;volatile
  5327                           
  5328                           ;LCD.c: 32: LATDbits.LATD6 = 0;
  5329  0024B6  9C8C               	bcf	3980,6,c	;volatile
  5330                           
  5331                           ;LCD.c: 33: LATDbits.LATD7 = 0;
  5332  0024B8  9E8C               	bcf	3980,7,c	;volatile
  5333                           
  5334                           ;LCD.c: 35: _delay((unsigned long)((50)*(20000000/4000.0)));
  5335  0024BA  0E02               	movlw	2
  5336  0024BC  6E04               	movwf	(??_LCD_init+1)& (0+255),c
  5337  0024BE  0E45               	movlw	69
  5338  0024C0  6E03               	movwf	??_LCD_init& (0+255),c
  5339  0024C2  0EAA               	movlw	170
  5340  0024C4                     u3547:
  5341  0024C4  2EE8               	decfsz	wreg,f,c
  5342  0024C6  D7FE               	bra	u3547
  5343  0024C8  2E03               	decfsz	??_LCD_init& (0+255),f,c
  5344  0024CA  D7FC               	bra	u3547
  5345  0024CC  2E04               	decfsz	(??_LCD_init+1)& (0+255),f,c
  5346  0024CE  D7FA               	bra	u3547
  5347                           
  5348                           ;LCD.c: 36: LCD_cmd(0x02);
  5349  0024D0  0E02               	movlw	2
  5350  0024D2  ECF7  F012         	call	_LCD_cmd
  5351                           
  5352                           ;LCD.c: 37: LCD_cmd(0x28);
  5353  0024D6  0E28               	movlw	40
  5354  0024D8  ECF7  F012         	call	_LCD_cmd
  5355                           
  5356                           ;LCD.c: 38: LCD_cmd(0x0C);
  5357  0024DC  0E0C               	movlw	12
  5358  0024DE  ECF7  F012         	call	_LCD_cmd
  5359                           
  5360                           ;LCD.c: 39: LCD_cmd(0x06);
  5361  0024E2  0E06               	movlw	6
  5362  0024E4  ECF7  F012         	call	_LCD_cmd
  5363  0024E8  0012               	return		;funcret
  5364  0024EA                     __end_of_LCD_init:
  5365                           	opt stack 0
  5366                           tblptru	equ	0xFF8
  5367                           tblptrh	equ	0xFF7
  5368                           tblptrl	equ	0xFF6
  5369                           tablat	equ	0xFF5
  5370                           prodh	equ	0xFF4
  5371                           prodl	equ	0xFF3
  5372                           indf0	equ	0xFEF
  5373                           postinc0	equ	0xFEE
  5374                           fsr0h	equ	0xFEA
  5375                           fsr0l	equ	0xFE9
  5376                           wreg	equ	0xFE8
  5377                           postinc2	equ	0xFDE
  5378                           postdec2	equ	0xFDD
  5379                           fsr2h	equ	0xFDA
  5380                           fsr2l	equ	0xFD9
  5381                           status	equ	0xFD8
  5382                           
  5383 ;; *************** function _LCD_clear *****************
  5384 ;; Defined at:
  5385 ;;		line 154 in file "LCD.c"
  5386 ;; Parameters:    Size  Location     Type
  5387 ;;		None
  5388 ;; Auto vars:     Size  Location     Type
  5389 ;;		None
  5390 ;; Return value:  Size  Location     Type
  5391 ;;                  1    wreg      void 
  5392 ;; Registers used:
  5393 ;;		wreg, status,2, status,0, cstack
  5394 ;; Tracked objects:
  5395 ;;		On entry : 0/0
  5396 ;;		On exit  : 0/0
  5397 ;;		Unchanged: 0/0
  5398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5399 ;;      Params:         0       0       0       0       0       0       0       0       0
  5400 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5401 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5402 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5403 ;;Total ram usage:        1 bytes
  5404 ;; Hardware stack levels used:    1
  5405 ;; Hardware stack levels required when called:    2
  5406 ;; This function calls:
  5407 ;;		_LCD_cmd
  5408 ;; This function is called by:
  5409 ;;		_main
  5410 ;; This function uses a non-reentrant model
  5411 ;;
  5412                           
  5413                           	psect	text23
  5414  0025CC                     __ptext23:
  5415                           	opt stack 0
  5416  0025CC                     _LCD_clear:
  5417                           	opt stack 28
  5418                           
  5419                           ;LCD.c: 155: LCD_cmd(0x01);
  5420                           
  5421                           ;incstack = 0
  5422  0025CC  0E01               	movlw	1
  5423  0025CE  ECF7  F012         	call	_LCD_cmd
  5424                           
  5425                           ;LCD.c: 156: _delay((unsigned long)((2)*(20000000/4000.0)));
  5426  0025D2  0E0D               	movlw	13
  5427  0025D4  6E03               	movwf	??_LCD_clear& (0+255),c
  5428  0025D6  0EFC               	movlw	252
  5429  0025D8                     u3557:
  5430  0025D8  2EE8               	decfsz	wreg,f,c
  5431  0025DA  D7FE               	bra	u3557
  5432  0025DC  2E03               	decfsz	??_LCD_clear& (0+255),f,c
  5433  0025DE  D7FC               	bra	u3557
  5434  0025E0  0012               	return		;funcret
  5435  0025E2                     __end_of_LCD_clear:
  5436                           	opt stack 0
  5437                           tblptru	equ	0xFF8
  5438                           tblptrh	equ	0xFF7
  5439                           tblptrl	equ	0xFF6
  5440                           tablat	equ	0xFF5
  5441                           prodh	equ	0xFF4
  5442                           prodl	equ	0xFF3
  5443                           indf0	equ	0xFEF
  5444                           postinc0	equ	0xFEE
  5445                           fsr0h	equ	0xFEA
  5446                           fsr0l	equ	0xFE9
  5447                           wreg	equ	0xFE8
  5448                           postinc2	equ	0xFDE
  5449                           postdec2	equ	0xFDD
  5450                           fsr2h	equ	0xFDA
  5451                           fsr2l	equ	0xFD9
  5452                           status	equ	0xFD8
  5453                           
  5454 ;; *************** function _LCD_cmd *****************
  5455 ;; Defined at:
  5456 ;;		line 71 in file "LCD.c"
  5457 ;; Parameters:    Size  Location     Type
  5458 ;;  dato            1    wreg     unsigned char 
  5459 ;; Auto vars:     Size  Location     Type
  5460 ;;  dato            1    1[COMRAM] unsigned char 
  5461 ;; Return value:  Size  Location     Type
  5462 ;;                  1    wreg      void 
  5463 ;; Registers used:
  5464 ;;		wreg, status,2, status,0, cstack
  5465 ;; Tracked objects:
  5466 ;;		On entry : 0/0
  5467 ;;		On exit  : 0/0
  5468 ;;		Unchanged: 0/0
  5469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5470 ;;      Params:         0       0       0       0       0       0       0       0       0
  5471 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5472 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5473 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5474 ;;Total ram usage:        1 bytes
  5475 ;; Hardware stack levels used:    1
  5476 ;; Hardware stack levels required when called:    1
  5477 ;; This function calls:
  5478 ;;		_LCD_write
  5479 ;; This function is called by:
  5480 ;;		_LCD_init
  5481 ;;		_LCD_segunda_linea
  5482 ;;		_LCD_clear
  5483 ;;		_LCD_goto
  5484 ;;		_LCD_cursor
  5485 ;;		_LCD_home
  5486 ;;		_LCD_custom_char
  5487 ;; This function uses a non-reentrant model
  5488 ;;
  5489                           
  5490                           	psect	text24
  5491  0025EE                     __ptext24:
  5492                           	opt stack 0
  5493  0025EE                     _LCD_cmd:
  5494                           	opt stack 28
  5495                           
  5496                           ;incstack = 0
  5497                           ;LCD_cmd@dato stored from wreg
  5498  0025EE  6E02               	movwf	LCD_cmd@dato,c
  5499                           
  5500                           ;LCD.c: 74: LATDbits.LATD3 = 0;
  5501  0025F0  968C               	bcf	3980,3,c	;volatile
  5502                           
  5503                           ;LCD.c: 75: LCD_write(dato);
  5504  0025F2  5002               	movf	LCD_cmd@dato,w,c
  5505  0025F4  EC90  F011         	call	_LCD_write
  5506  0025F8  0012               	return		;funcret
  5507  0025FA                     __end_of_LCD_cmd:
  5508                           	opt stack 0
  5509                           tblptru	equ	0xFF8
  5510                           tblptrh	equ	0xFF7
  5511                           tblptrl	equ	0xFF6
  5512                           tablat	equ	0xFF5
  5513                           prodh	equ	0xFF4
  5514                           prodl	equ	0xFF3
  5515                           indf0	equ	0xFEF
  5516                           postinc0	equ	0xFEE
  5517                           fsr0h	equ	0xFEA
  5518                           fsr0l	equ	0xFE9
  5519                           wreg	equ	0xFE8
  5520                           postinc2	equ	0xFDE
  5521                           postdec2	equ	0xFDD
  5522                           fsr2h	equ	0xFDA
  5523                           fsr2l	equ	0xFD9
  5524                           status	equ	0xFD8
  5525                           
  5526 ;; *************** function _LCD_write *****************
  5527 ;; Defined at:
  5528 ;;		line 47 in file "LCD.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;  dato            1    wreg     unsigned char 
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;  dato            1    0[COMRAM] unsigned char 
  5533 ;; Return value:  Size  Location     Type
  5534 ;;                  1    wreg      void 
  5535 ;; Registers used:
  5536 ;;		wreg, status,2, status,0
  5537 ;; Tracked objects:
  5538 ;;		On entry : 0/0
  5539 ;;		On exit  : 0/0
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5542 ;;      Params:         0       0       0       0       0       0       0       0       0
  5543 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5544 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5545 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5546 ;;Total ram usage:        1 bytes
  5547 ;; Hardware stack levels used:    1
  5548 ;; This function calls:
  5549 ;;		Nothing
  5550 ;; This function is called by:
  5551 ;;		_LCD_cmd
  5552 ;;		_LCD_dato
  5553 ;; This function uses a non-reentrant model
  5554 ;;
  5555                           
  5556                           	psect	text25
  5557  002320                     __ptext25:
  5558                           	opt stack 0
  5559  002320                     _LCD_write:
  5560                           	opt stack 27
  5561                           
  5562                           ;incstack = 0
  5563                           ;LCD_write@dato stored from wreg
  5564  002320  6E01               	movwf	LCD_write@dato,c
  5565                           
  5566                           ;LCD.c: 49: if (dato & (1<<4)) LATDbits.LATD4 = 1; else LATDbits.LATD4 = 0;
  5567  002322  A801               	btfss	LCD_write@dato,4,c
  5568  002324  D002               	goto	l70
  5569  002326  888C               	bsf	3980,4,c	;volatile
  5570  002328  D001               	goto	l71
  5571  00232A                     l70:
  5572  00232A  988C               	bcf	3980,4,c	;volatile
  5573  00232C                     l71:
  5574                           
  5575                           ;LCD.c: 50: if (dato & (1<<5)) LATDbits.LATD5 = 1; else LATDbits.LATD5 = 0;
  5576  00232C  AA01               	btfss	LCD_write@dato,5,c
  5577  00232E  D002               	goto	l72
  5578  002330  8A8C               	bsf	3980,5,c	;volatile
  5579  002332  D001               	goto	l73
  5580  002334                     l72:
  5581  002334  9A8C               	bcf	3980,5,c	;volatile
  5582  002336                     l73:
  5583                           
  5584                           ;LCD.c: 51: if (dato & (1<<6)) LATDbits.LATD6 = 1; else LATDbits.LATD6 = 0;
  5585  002336  AC01               	btfss	LCD_write@dato,6,c
  5586  002338  D002               	goto	l74
  5587  00233A  8C8C               	bsf	3980,6,c	;volatile
  5588  00233C  D001               	goto	l75
  5589  00233E                     l74:
  5590  00233E  9C8C               	bcf	3980,6,c	;volatile
  5591  002340                     l75:
  5592                           
  5593                           ;LCD.c: 52: if (dato & (1<<7)) LATDbits.LATD7 = 1; else LATDbits.LATD7 = 0;
  5594  002340  AE01               	btfss	LCD_write@dato,7,c
  5595  002342  D002               	goto	l76
  5596  002344  8E8C               	bsf	3980,7,c	;volatile
  5597  002346  D001               	goto	l77
  5598  002348                     l76:
  5599  002348  9E8C               	bcf	3980,7,c	;volatile
  5600  00234A                     l77:
  5601                           
  5602                           ;LCD.c: 53: LATDbits.LATD2 = 1;
  5603  00234A  848C               	bsf	3980,2,c	;volatile
  5604                           
  5605                           ;LCD.c: 54: __nop();
  5606  00234C  F000               	nop	
  5607                           
  5608                           ;LCD.c: 55: LATDbits.LATD2 = 0;
  5609  00234E  948C               	bcf	3980,2,c	;volatile
  5610                           
  5611                           ;LCD.c: 57: dato = (dato << 4);
  5612  002350  3801               	swapf	LCD_write@dato,w,c
  5613  002352  0BF0               	andlw	240
  5614  002354  6E01               	movwf	LCD_write@dato,c
  5615                           
  5616                           ;LCD.c: 58: if (dato & (1<<4)) LATDbits.LATD4 = 1; else LATDbits.LATD4 = 0;
  5617  002356  A801               	btfss	LCD_write@dato,4,c
  5618  002358  D002               	goto	l78
  5619  00235A  888C               	bsf	3980,4,c	;volatile
  5620  00235C  D001               	goto	l79
  5621  00235E                     l78:
  5622  00235E  988C               	bcf	3980,4,c	;volatile
  5623  002360                     l79:
  5624                           
  5625                           ;LCD.c: 59: if (dato & (1<<5)) LATDbits.LATD5 = 1; else LATDbits.LATD5 = 0;
  5626  002360  AA01               	btfss	LCD_write@dato,5,c
  5627  002362  D002               	goto	l80
  5628  002364  8A8C               	bsf	3980,5,c	;volatile
  5629  002366  D001               	goto	l81
  5630  002368                     l80:
  5631  002368  9A8C               	bcf	3980,5,c	;volatile
  5632  00236A                     l81:
  5633                           
  5634                           ;LCD.c: 60: if (dato & (1<<6)) LATDbits.LATD6 = 1; else LATDbits.LATD6 = 0;
  5635  00236A  AC01               	btfss	LCD_write@dato,6,c
  5636  00236C  D002               	goto	l82
  5637  00236E  8C8C               	bsf	3980,6,c	;volatile
  5638  002370  D001               	goto	l83
  5639  002372                     l82:
  5640  002372  9C8C               	bcf	3980,6,c	;volatile
  5641  002374                     l83:
  5642                           
  5643                           ;LCD.c: 61: if (dato & (1<<7)) LATDbits.LATD7 = 1; else LATDbits.LATD7 = 0;
  5644  002374  AE01               	btfss	LCD_write@dato,7,c
  5645  002376  D002               	goto	l84
  5646  002378  8E8C               	bsf	3980,7,c	;volatile
  5647  00237A  D001               	goto	l85
  5648  00237C                     l84:
  5649  00237C  9E8C               	bcf	3980,7,c	;volatile
  5650  00237E                     l85:
  5651                           
  5652                           ;LCD.c: 62: LATDbits.LATD2 = 1;
  5653  00237E  848C               	bsf	3980,2,c	;volatile
  5654                           
  5655                           ;LCD.c: 63: __nop();
  5656  002380  F000               	nop	
  5657                           
  5658                           ;LCD.c: 64: LATDbits.LATD2 = 0;
  5659  002382  948C               	bcf	3980,2,c	;volatile
  5660                           
  5661                           ;LCD.c: 65: _delay((unsigned long)((50)*(20000000/4000000.0)));
  5662  002384  0E53               	movlw	83
  5663  002386                     u3567:
  5664  002386  2EE8               	decfsz	wreg,f,c
  5665  002388  D7FE               	bra	u3567
  5666  00238A  F000               	nop	
  5667  00238C  0012               	return		;funcret
  5668  00238E                     __end_of_LCD_write:
  5669                           	opt stack 0
  5670                           tblptru	equ	0xFF8
  5671                           tblptrh	equ	0xFF7
  5672                           tblptrl	equ	0xFF6
  5673                           tablat	equ	0xFF5
  5674                           prodh	equ	0xFF4
  5675                           prodl	equ	0xFF3
  5676                           indf0	equ	0xFEF
  5677                           postinc0	equ	0xFEE
  5678                           fsr0h	equ	0xFEA
  5679                           fsr0l	equ	0xFE9
  5680                           wreg	equ	0xFE8
  5681                           postinc2	equ	0xFDE
  5682                           postdec2	equ	0xFDD
  5683                           fsr2h	equ	0xFDA
  5684                           fsr2l	equ	0xFD9
  5685                           status	equ	0xFD8
  5686                           
  5687 ;; *************** function _DHT22_read *****************
  5688 ;; Defined at:
  5689 ;;		line 13 in file "DHT22.h"
  5690 ;; Parameters:    Size  Location     Type
  5691 ;;  dht_temperat    2   41[COMRAM] PTR float 
  5692 ;;		 -> main@temperatura(3), 
  5693 ;;  dht_humedad     2   43[COMRAM] PTR float 
  5694 ;;		 -> main@humedad(3), 
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;  result          1   49[COMRAM] unsigned char 
  5697 ;;  rawtemperatu    2   55[COMRAM] unsigned int 
  5698 ;;  rawhumidity     2   47[COMRAM] unsigned int 
  5699 ;;  bits            5   50[COMRAM] unsigned char [5]
  5700 ;;  j               1   58[COMRAM] unsigned char 
  5701 ;;  i               1   57[COMRAM] unsigned char 
  5702 ;; Return value:  Size  Location     Type
  5703 ;;                  1    wreg      unsigned char 
  5704 ;; Registers used:
  5705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5706 ;; Tracked objects:
  5707 ;;		On entry : 0/0
  5708 ;;		On exit  : 0/0
  5709 ;;		Unchanged: 0/0
  5710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5711 ;;      Params:         4       0       0       0       0       0       0       0       0
  5712 ;;      Locals:        12       0       0       0       0       0       0       0       0
  5713 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5714 ;;      Totals:        18       0       0       0       0       0       0       0       0
  5715 ;;Total ram usage:       18 bytes
  5716 ;; Hardware stack levels used:    1
  5717 ;; Hardware stack levels required when called:    2
  5718 ;; This function calls:
  5719 ;;		___ftdiv
  5720 ;;		___ftmul
  5721 ;;		___lwtoft
  5722 ;; This function is called by:
  5723 ;;		_main
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           	psect	text26
  5728  00173E                     __ptext26:
  5729                           	opt stack 0
  5730  00173E                     _DHT22_read:
  5731                           	opt stack 28
  5732                           
  5733                           ;DHT22.h: 15: uint8_t bits[5];
  5734                           ;DHT22.h: 16: uint8_t i,j=0;
  5735                           
  5736                           ;incstack = 0
  5737  00173E  0E00               	movlw	0
  5738  001740  6E3B               	movwf	DHT22_read@j,c
  5739                           
  5740                           ;DHT22.h: 18: LATCbits.LATC2 = 0;
  5741  001742  948B               	bcf	3979,2,c	;volatile
  5742                           
  5743                           ;DHT22.h: 19: _delay((unsigned long)((18)*(20000000/4000.0)));
  5744  001744  0E75               	movlw	117
  5745  001746  6E2E               	movwf	??_DHT22_read& (0+255),c
  5746  001748  0EE1               	movlw	225
  5747  00174A                     u3577:
  5748  00174A  2EE8               	decfsz	wreg,f,c
  5749  00174C  D7FE               	bra	u3577
  5750  00174E  2E2E               	decfsz	??_DHT22_read& (0+255),f,c
  5751  001750  D7FC               	bra	u3577
  5752  001752  F000               	nop	
  5753                           
  5754                           ;DHT22.h: 21: LATCbits.LATC2 = 1;
  5755  001754  848B               	bsf	3979,2,c	;volatile
  5756                           
  5757                           ;DHT22.h: 22: _delay((unsigned long)((40)*(20000000/4000000.0)));
  5758  001756  0E42               	movlw	66
  5759  001758                     u3587:
  5760  001758  2EE8               	decfsz	wreg,f,c
  5761  00175A  D7FE               	bra	u3587
  5762  00175C  D000               	nop2	
  5763                           
  5764                           ;DHT22.h: 24: TRISCbits.TRISC2 = 1;
  5765  00175E  8494               	bsf	3988,2,c	;volatile
  5766                           
  5767                           ;DHT22.h: 26: if(PORTCbits.RC2){
  5768  001760  A482               	btfss	3970,2,c	;volatile
  5769  001762  D004               	goto	l24
  5770                           
  5771                           ;DHT22.h: 27: TRISCbits.TRISC2 = 0;
  5772  001764  9494               	bcf	3988,2,c	;volatile
  5773                           
  5774                           ;DHT22.h: 28: PORTCbits.RC2 = 1;
  5775  001766  8482               	bsf	3970,2,c	;volatile
  5776                           
  5777                           ;DHT22.h: 29: return 0;
  5778  001768  0E00               	movlw	0
  5779  00176A  0012               	return	
  5780  00176C                     l24:
  5781                           
  5782                           ;DHT22.h: 30: }
  5783                           ;DHT22.h: 31: _delay((unsigned long)((80)*(20000000/4000000.0)));
  5784  00176C  0E85               	movlw	133
  5785  00176E                     u3597:
  5786  00176E  2EE8               	decfsz	wreg,f,c
  5787  001770  D7FE               	bra	u3597
  5788  001772  F000               	nop	
  5789                           
  5790                           ;DHT22.h: 33: if(!PORTCbits.RC2){
  5791  001774  B482               	btfsc	3970,2,c	;volatile
  5792  001776  D004               	goto	l26
  5793                           
  5794                           ;DHT22.h: 34: TRISCbits.TRISC2 = 0;
  5795  001778  9494               	bcf	3988,2,c	;volatile
  5796                           
  5797                           ;DHT22.h: 35: PORTCbits.RC2 = 1;
  5798  00177A  8482               	bsf	3970,2,c	;volatile
  5799                           
  5800                           ;DHT22.h: 36: return 0;
  5801  00177C  0E00               	movlw	0
  5802  00177E  0012               	return	
  5803  001780                     l26:
  5804                           
  5805                           ;DHT22.h: 37: }
  5806                           ;DHT22.h: 38: _delay((unsigned long)((80)*(20000000/4000000.0)));
  5807  001780  0E85               	movlw	133
  5808  001782                     u3607:
  5809  001782  2EE8               	decfsz	wreg,f,c
  5810  001784  D7FE               	bra	u3607
  5811  001786  F000               	nop	
  5812                           
  5813                           ;DHT22.h: 40: for (j=0; j<5; j++)
  5814  001788  0E00               	movlw	0
  5815  00178A  6E3B               	movwf	DHT22_read@j,c
  5816  00178C                     l2673:
  5817  00178C  0E04               	movlw	4
  5818  00178E  643B               	cpfsgt	DHT22_read@j,c
  5819  001790  D001               	goto	l27
  5820  001792  D02F               	goto	u2860
  5821  001794                     l27:
  5822                           
  5823                           ;DHT22.h: 41: {
  5824                           ;DHT22.h: 42: uint8_t result=0;
  5825  001794  0E00               	movlw	0
  5826  001796  6E32               	movwf	DHT22_read@result,c
  5827                           
  5828                           ;DHT22.h: 43: for (i=0; i<8; i++)
  5829  001798  0E00               	movlw	0
  5830  00179A  6E3A               	movwf	DHT22_read@i,c
  5831  00179C                     l2679:
  5832  00179C  0E07               	movlw	7
  5833  00179E  643A               	cpfsgt	DHT22_read@i,c
  5834  0017A0  D001               	goto	l29
  5835  0017A2  D01B               	goto	u2850
  5836  0017A4                     l29:
  5837                           
  5838                           ;DHT22.h: 44: {
  5839                           ;DHT22.h: 45: while (!PORTCbits.RC2);
  5840  0017A4  A482               	btfss	3970,2,c	;volatile
  5841  0017A6  D7FE               	goto	l29
  5842                           
  5843                           ;DHT22.h: 46: _delay((unsigned long)((35)*(20000000/4000000.0)));
  5844  0017A8  0E3A               	movlw	58
  5845  0017AA                     u3617:
  5846  0017AA  2EE8               	decfsz	wreg,f,c
  5847  0017AC  D7FE               	bra	u3617
  5848  0017AE  F000               	nop	
  5849                           
  5850                           ;DHT22.h: 48: if (PORTCbits.RC2)
  5851  0017B0  A482               	btfss	3970,2,c	;volatile
  5852  0017B2  D00F               	goto	l34
  5853                           
  5854                           ;DHT22.h: 49: result |= (1<<(7-i));
  5855  0017B4  503A               	movf	DHT22_read@i,w,c
  5856  0017B6  0800               	sublw	0
  5857  0017B8  6E2E               	movwf	??_DHT22_read& (0+255),c
  5858  0017BA  0E07               	movlw	7
  5859  0017BC  262E               	addwf	??_DHT22_read,f,c
  5860  0017BE  0E01               	movlw	1
  5861  0017C0  6E2F               	movwf	(??_DHT22_read+1)& (0+255),c
  5862  0017C2  2A2E               	incf	??_DHT22_read,f,c
  5863  0017C4  D002               	goto	u2834
  5864  0017C6                     u2835:
  5865  0017C6  90D8               	bcf	status,0,c
  5866  0017C8  362F               	rlcf	??_DHT22_read+1,f,c
  5867  0017CA                     u2834:
  5868  0017CA  2E2E               	decfsz	??_DHT22_read,f,c
  5869  0017CC  D7FC               	goto	u2835
  5870  0017CE  502F               	movf	??_DHT22_read+1,w,c
  5871  0017D0  1232               	iorwf	DHT22_read@result,f,c
  5872  0017D2                     l34:
  5873                           
  5874                           ;DHT22.h: 51: while(PORTCbits.RC2);
  5875  0017D2  B482               	btfsc	3970,2,c	;volatile
  5876  0017D4  D7FE               	goto	l34
  5877  0017D6  2A3A               	incf	DHT22_read@i,f,c
  5878  0017D8  D7E1               	goto	l2679
  5879  0017DA                     u2850:
  5880                           
  5881                           ;DHT22.h: 52: }
  5882                           ;DHT22.h: 53: bits[j] = result;
  5883  0017DA  503B               	movf	DHT22_read@j,w,c
  5884  0017DC  0D01               	mullw	1
  5885  0017DE  0E33               	movlw	low DHT22_read@bits
  5886  0017E0  24F3               	addwf	prodl,w,c
  5887  0017E2  6ED9               	movwf	fsr2l,c
  5888  0017E4  0E00               	movlw	high DHT22_read@bits
  5889  0017E6  20F4               	addwfc	prodh,w,c
  5890  0017E8  6EDA               	movwf	fsr2h,c
  5891  0017EA  C032  FFDF         	movff	DHT22_read@result,indf2
  5892  0017EE  2A3B               	incf	DHT22_read@j,f,c
  5893  0017F0  D7CD               	goto	l2673
  5894  0017F2                     u2860:
  5895                           
  5896                           ;DHT22.h: 54: }
  5897                           ;DHT22.h: 56: TRISCbits.TRISC2 = 0;
  5898  0017F2  9494               	bcf	3988,2,c	;volatile
  5899                           
  5900                           ;DHT22.h: 57: PORTCbits.RC2 = 1;
  5901  0017F4  8482               	bsf	3970,2,c	;volatile
  5902                           
  5903                           ;DHT22.h: 60: if ((uint8_t) (bits[0] + bits[1] + bits[2] +bits[3]) == bits[4])
  5904  0017F6  5034               	movf	DHT22_read@bits+1,w,c
  5905  0017F8  2435               	addwf	DHT22_read@bits+2,w,c
  5906  0017FA  2436               	addwf	DHT22_read@bits+3,w,c
  5907  0017FC  2433               	addwf	DHT22_read@bits,w,c
  5908  0017FE  1837               	xorwf	DHT22_read@bits+4,w,c
  5909  001800  A4D8               	btfss	status,2,c
  5910  001802  D085               	goto	l38
  5911                           
  5912                           ;DHT22.h: 61: {
  5913                           ;DHT22.h: 63: uint16_t rawhumidity = bits[0]<<8 | bits[1];
  5914  001804  5034               	movf	DHT22_read@bits+1,w,c
  5915  001806  C033  F02E         	movff	DHT22_read@bits,??_DHT22_read
  5916  00180A  6A2F               	clrf	(??_DHT22_read+1)& (0+255),c
  5917  00180C  C02E  F02F         	movff	??_DHT22_read,??_DHT22_read+1
  5918  001810  6A2E               	clrf	??_DHT22_read,c
  5919  001812  102E               	iorwf	??_DHT22_read,w,c
  5920  001814  6E30               	movwf	DHT22_read@rawhumidity,c
  5921  001816  502F               	movf	??_DHT22_read+1,w,c
  5922  001818  6E31               	movwf	DHT22_read@rawhumidity+1,c
  5923                           
  5924                           ;DHT22.h: 64: uint16_t rawtemperature = bits[2] <<8 | bits[3];
  5925  00181A  5036               	movf	DHT22_read@bits+3,w,c
  5926  00181C  C035  F02E         	movff	DHT22_read@bits+2,??_DHT22_read
  5927  001820  6A2F               	clrf	(??_DHT22_read+1)& (0+255),c
  5928  001822  C02E  F02F         	movff	??_DHT22_read,??_DHT22_read+1
  5929  001826  6A2E               	clrf	??_DHT22_read,c
  5930  001828  102E               	iorwf	??_DHT22_read,w,c
  5931  00182A  6E38               	movwf	DHT22_read@rawtemperature,c
  5932  00182C  502F               	movf	??_DHT22_read+1,w,c
  5933  00182E  6E39               	movwf	DHT22_read@rawtemperature+1,c
  5934                           
  5935                           ;DHT22.h: 66: if (rawtemperature & 0x8000){
  5936  001830  AE39               	btfss	DHT22_read@rawtemperature+1,7,c
  5937  001832  D02F               	goto	l39
  5938                           
  5939                           ;DHT22.h: 67: *dht_temperatura = (float)((rawtemperature & 0x7fff) / 10.0)* -1.0;
  5940  001834  0E00               	movlw	0
  5941  001836  6E0F               	movwf	___ftdiv@f2,c
  5942  001838  0E20               	movlw	32
  5943  00183A  6E10               	movwf	___ftdiv@f2+1,c
  5944  00183C  0E41               	movlw	65
  5945  00183E  6E11               	movwf	___ftdiv@f2+2,c
  5946  001840  0EFF               	movlw	255
  5947  001842  1438               	andwf	DHT22_read@rawtemperature,w,c
  5948  001844  6E09               	movwf	___lwtoft@c,c
  5949  001846  0E7F               	movlw	127
  5950  001848  1439               	andwf	DHT22_read@rawtemperature+1,w,c
  5951  00184A  6E0A               	movwf	___lwtoft@c+1,c
  5952  00184C  ECBA  F012         	call	___lwtoft	;wreg free
  5953  001850  C009  F00C         	movff	?___lwtoft,___ftdiv@f1
  5954  001854  C00A  F00D         	movff	?___lwtoft+1,___ftdiv@f1+1
  5955  001858  C00B  F00E         	movff	?___lwtoft+2,___ftdiv@f1+2
  5956  00185C  EC80  F00F         	call	___ftdiv	;wreg free
  5957  001860  C00C  F01B         	movff	?___ftdiv,___ftmul@f1
  5958  001864  C00D  F01C         	movff	?___ftdiv+1,___ftmul@f1+1
  5959  001868  C00E  F01D         	movff	?___ftdiv+2,___ftmul@f1+2
  5960  00186C  0E00               	movlw	0
  5961  00186E  6E1E               	movwf	___ftmul@f2,c
  5962  001870  0E80               	movlw	128
  5963  001872  6E1F               	movwf	___ftmul@f2+1,c
  5964  001874  0EBF               	movlw	191
  5965  001876  6E20               	movwf	___ftmul@f2+2,c
  5966  001878  EC06  F00F         	call	___ftmul	;wreg free
  5967  00187C  C02A  FFD9         	movff	DHT22_read@dht_temperatura,fsr2l
  5968  001880  C02B  FFDA         	movff	DHT22_read@dht_temperatura+1,fsr2h
  5969  001884  C01B  FFDE         	movff	?___ftmul,postinc2
  5970  001888  C01C  FFDE         	movff	?___ftmul+1,postinc2
  5971  00188C  C01D  FFDE         	movff	?___ftmul+2,postinc2
  5972                           
  5973                           ;DHT22.h: 68: }else{
  5974  001890  D01E               	goto	l40
  5975  001892                     l39:
  5976                           
  5977                           ;DHT22.h: 69: *dht_temperatura = (float)(rawtemperature)/10.0;
  5978  001892  C038  F009         	movff	DHT22_read@rawtemperature,___lwtoft@c
  5979  001896  C039  F00A         	movff	DHT22_read@rawtemperature+1,___lwtoft@c+1
  5980  00189A  ECBA  F012         	call	___lwtoft	;wreg free
  5981  00189E  C009  F00C         	movff	?___lwtoft,___ftdiv@f1
  5982  0018A2  C00A  F00D         	movff	?___lwtoft+1,___ftdiv@f1+1
  5983  0018A6  C00B  F00E         	movff	?___lwtoft+2,___ftdiv@f1+2
  5984  0018AA  0E00               	movlw	0
  5985  0018AC  6E0F               	movwf	___ftdiv@f2,c
  5986  0018AE  0E20               	movlw	32
  5987  0018B0  6E10               	movwf	___ftdiv@f2+1,c
  5988  0018B2  0E41               	movlw	65
  5989  0018B4  6E11               	movwf	___ftdiv@f2+2,c
  5990  0018B6  EC80  F00F         	call	___ftdiv	;wreg free
  5991  0018BA  C02A  FFD9         	movff	DHT22_read@dht_temperatura,fsr2l
  5992  0018BE  C02B  FFDA         	movff	DHT22_read@dht_temperatura+1,fsr2h
  5993  0018C2  C00C  FFDE         	movff	?___ftdiv,postinc2
  5994  0018C6  C00D  FFDE         	movff	?___ftdiv+1,postinc2
  5995  0018CA  C00E  FFDE         	movff	?___ftdiv+2,postinc2
  5996  0018CE                     l40:
  5997                           
  5998                           ;DHT22.h: 70: }
  5999                           ;DHT22.h: 72: *dht_humedad = (float)((rawhumidity)/10.0);
  6000  0018CE  C030  F009         	movff	DHT22_read@rawhumidity,___lwtoft@c
  6001  0018D2  C031  F00A         	movff	DHT22_read@rawhumidity+1,___lwtoft@c+1
  6002  0018D6  ECBA  F012         	call	___lwtoft	;wreg free
  6003  0018DA  C009  F00C         	movff	?___lwtoft,___ftdiv@f1
  6004  0018DE  C00A  F00D         	movff	?___lwtoft+1,___ftdiv@f1+1
  6005  0018E2  C00B  F00E         	movff	?___lwtoft+2,___ftdiv@f1+2
  6006  0018E6  0E00               	movlw	0
  6007  0018E8  6E0F               	movwf	___ftdiv@f2,c
  6008  0018EA  0E20               	movlw	32
  6009  0018EC  6E10               	movwf	___ftdiv@f2+1,c
  6010  0018EE  0E41               	movlw	65
  6011  0018F0  6E11               	movwf	___ftdiv@f2+2,c
  6012  0018F2  EC80  F00F         	call	___ftdiv	;wreg free
  6013  0018F6  C02C  FFD9         	movff	DHT22_read@dht_humedad,fsr2l
  6014  0018FA  C02D  FFDA         	movff	DHT22_read@dht_humedad+1,fsr2h
  6015  0018FE  C00C  FFDE         	movff	?___ftdiv,postinc2
  6016  001902  C00D  FFDE         	movff	?___ftdiv+1,postinc2
  6017  001906  C00E  FFDE         	movff	?___ftdiv+2,postinc2
  6018                           
  6019                           ;DHT22.h: 73: return 1;
  6020  00190A  0E01               	movlw	1
  6021  00190C  0012               	return	
  6022  00190E                     l38:
  6023                           
  6024                           ;DHT22.h: 74: }
  6025                           ;DHT22.h: 75: return 0;
  6026  00190E  0E00               	movlw	0
  6027  001910  0012               	return	
  6028  001912                     __end_of_DHT22_read:
  6029                           	opt stack 0
  6030                           tblptru	equ	0xFF8
  6031                           tblptrh	equ	0xFF7
  6032                           tblptrl	equ	0xFF6
  6033                           tablat	equ	0xFF5
  6034                           prodh	equ	0xFF4
  6035                           prodl	equ	0xFF3
  6036                           indf0	equ	0xFEF
  6037                           postinc0	equ	0xFEE
  6038                           fsr0h	equ	0xFEA
  6039                           fsr0l	equ	0xFE9
  6040                           wreg	equ	0xFE8
  6041                           indf2	equ	0xFDF
  6042                           postinc2	equ	0xFDE
  6043                           postdec2	equ	0xFDD
  6044                           fsr2h	equ	0xFDA
  6045                           fsr2l	equ	0xFD9
  6046                           status	equ	0xFD8
  6047                           
  6048 ;; *************** function ___lwtoft *****************
  6049 ;; Defined at:
  6050 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;  c               2    8[COMRAM] unsigned int 
  6053 ;; Auto vars:     Size  Location     Type
  6054 ;;		None
  6055 ;; Return value:  Size  Location     Type
  6056 ;;                  3    8[COMRAM] float 
  6057 ;; Registers used:
  6058 ;;		wreg, status,2, status,0, cstack
  6059 ;; Tracked objects:
  6060 ;;		On entry : 0/0
  6061 ;;		On exit  : 0/0
  6062 ;;		Unchanged: 0/0
  6063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6064 ;;      Params:         3       0       0       0       0       0       0       0       0
  6065 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6066 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6067 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6068 ;;Total ram usage:        3 bytes
  6069 ;; Hardware stack levels used:    1
  6070 ;; Hardware stack levels required when called:    1
  6071 ;; This function calls:
  6072 ;;		___ftpack
  6073 ;; This function is called by:
  6074 ;;		_DHT22_read
  6075 ;; This function uses a non-reentrant model
  6076 ;;
  6077                           
  6078                           	psect	text27
  6079  002574                     __ptext27:
  6080                           	opt stack 0
  6081  002574                     ___lwtoft:
  6082                           	opt stack 28
  6083                           
  6084                           ;incstack = 0
  6085  002574  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  6086  002578  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  6087  00257C  6A03               	clrf	___ftpack@arg+2,c
  6088  00257E  0E8E               	movlw	142
  6089  002580  6E04               	movwf	___ftpack@exp,c
  6090  002582  0E00               	movlw	0
  6091  002584  6E05               	movwf	___ftpack@sign,c
  6092  002586  ECF3  F00F         	call	___ftpack	;wreg free
  6093  00258A  C001  F009         	movff	?___ftpack,?___lwtoft
  6094  00258E  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  6095  002592  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  6096  002596  0012               	return	
  6097  002598                     __end_of___lwtoft:
  6098                           	opt stack 0
  6099                           tblptru	equ	0xFF8
  6100                           tblptrh	equ	0xFF7
  6101                           tblptrl	equ	0xFF6
  6102                           tablat	equ	0xFF5
  6103                           prodh	equ	0xFF4
  6104                           prodl	equ	0xFF3
  6105                           indf0	equ	0xFEF
  6106                           postinc0	equ	0xFEE
  6107                           fsr0h	equ	0xFEA
  6108                           fsr0l	equ	0xFE9
  6109                           wreg	equ	0xFE8
  6110                           indf2	equ	0xFDF
  6111                           postinc2	equ	0xFDE
  6112                           postdec2	equ	0xFDD
  6113                           fsr2h	equ	0xFDA
  6114                           fsr2l	equ	0xFD9
  6115                           status	equ	0xFD8
  6116                           
  6117 ;; *************** function ___ftmul *****************
  6118 ;; Defined at:
  6119 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  6120 ;; Parameters:    Size  Location     Type
  6121 ;;  f1              3   26[COMRAM] float 
  6122 ;;  f2              3   29[COMRAM] float 
  6123 ;; Auto vars:     Size  Location     Type
  6124 ;;  f3_as_produc    3   36[COMRAM] unsigned um
  6125 ;;  sign            1   40[COMRAM] unsigned char 
  6126 ;;  cntr            1   39[COMRAM] unsigned char 
  6127 ;;  exp             1   35[COMRAM] unsigned char 
  6128 ;; Return value:  Size  Location     Type
  6129 ;;                  3   26[COMRAM] float 
  6130 ;; Registers used:
  6131 ;;		wreg, status,2, status,0, cstack
  6132 ;; Tracked objects:
  6133 ;;		On entry : 0/0
  6134 ;;		On exit  : 0/0
  6135 ;;		Unchanged: 0/0
  6136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6137 ;;      Params:         6       0       0       0       0       0       0       0       0
  6138 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6139 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6140 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6141 ;;Total ram usage:       15 bytes
  6142 ;; Hardware stack levels used:    1
  6143 ;; Hardware stack levels required when called:    1
  6144 ;; This function calls:
  6145 ;;		___ftpack
  6146 ;; This function is called by:
  6147 ;;		_DHT22_read
  6148 ;;		_fround
  6149 ;;		_scale
  6150 ;;		_printf
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           	psect	text28
  6155  001E0C                     __ptext28:
  6156                           	opt stack 0
  6157  001E0C                     ___ftmul:
  6158                           	opt stack 27
  6159                           
  6160                           ;incstack = 0
  6161  001E0C  C01D  F021         	movff	___ftmul@f1+2,??___ftmul
  6162  001E10  6A22               	clrf	(??___ftmul+1)& (0+255),c
  6163  001E12  6A23               	clrf	(??___ftmul+2)& (0+255),c
  6164  001E14  341C               	rlcf	___ftmul@f1+1,w,c
  6165  001E16  3621               	rlcf	??___ftmul& (0+255),f,c
  6166  001E18  E301               	bnc	u2091
  6167  001E1A  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  6168  001E1C                     u2091:
  6169  001E1C  5021               	movf	??___ftmul,w,c
  6170  001E1E  6E24               	movwf	___ftmul@exp,c
  6171  001E20  5024               	movf	___ftmul@exp,w,c
  6172  001E22  A4D8               	btfss	status,2,c
  6173  001E24  D007               	goto	l576
  6174  001E26  0E00               	movlw	0
  6175  001E28  6E1B               	movwf	?___ftmul,c
  6176  001E2A  0E00               	movlw	0
  6177  001E2C  6E1C               	movwf	?___ftmul+1,c
  6178  001E2E  0E00               	movlw	0
  6179  001E30  6E1D               	movwf	?___ftmul+2,c
  6180  001E32  0012               	return	
  6181  001E34                     l576:
  6182  001E34  C020  F021         	movff	___ftmul@f2+2,??___ftmul
  6183  001E38  6A22               	clrf	(??___ftmul+1)& (0+255),c
  6184  001E3A  6A23               	clrf	(??___ftmul+2)& (0+255),c
  6185  001E3C  341F               	rlcf	___ftmul@f2+1,w,c
  6186  001E3E  3621               	rlcf	??___ftmul& (0+255),f,c
  6187  001E40  E301               	bnc	u2111
  6188  001E42  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  6189  001E44                     u2111:
  6190  001E44  5021               	movf	??___ftmul,w,c
  6191  001E46  6E29               	movwf	___ftmul@sign,c
  6192  001E48  5029               	movf	___ftmul@sign,w,c
  6193  001E4A  A4D8               	btfss	status,2,c
  6194  001E4C  D007               	goto	l578
  6195  001E4E  0E00               	movlw	0
  6196  001E50  6E1B               	movwf	?___ftmul,c
  6197  001E52  0E00               	movlw	0
  6198  001E54  6E1C               	movwf	?___ftmul+1,c
  6199  001E56  0E00               	movlw	0
  6200  001E58  6E1D               	movwf	?___ftmul+2,c
  6201  001E5A  0012               	return	
  6202  001E5C                     l578:
  6203  001E5C  5029               	movf	___ftmul@sign,w,c
  6204  001E5E  0F7B               	addlw	123
  6205  001E60  2624               	addwf	___ftmul@exp,f,c
  6206  001E62  C01D  F029         	movff	___ftmul@f1+2,___ftmul@sign
  6207  001E66  5020               	movf	___ftmul@f2+2,w,c
  6208  001E68  1A29               	xorwf	___ftmul@sign,f,c
  6209  001E6A  0E80               	movlw	128
  6210  001E6C  1629               	andwf	___ftmul@sign,f,c
  6211  001E6E  8E1C               	bsf	___ftmul@f1+1,7,c
  6212  001E70  8E1F               	bsf	___ftmul@f2+1,7,c
  6213  001E72  0EFF               	movlw	255
  6214  001E74  161E               	andwf	___ftmul@f2,f,c
  6215  001E76  0EFF               	movlw	255
  6216  001E78  161F               	andwf	___ftmul@f2+1,f,c
  6217  001E7A  0E00               	movlw	0
  6218  001E7C  1620               	andwf	___ftmul@f2+2,f,c
  6219  001E7E  0E00               	movlw	0
  6220  001E80  6E25               	movwf	___ftmul@f3_as_product,c
  6221  001E82  0E00               	movlw	0
  6222  001E84  6E26               	movwf	___ftmul@f3_as_product+1,c
  6223  001E86  0E00               	movlw	0
  6224  001E88  6E27               	movwf	___ftmul@f3_as_product+2,c
  6225  001E8A  0E07               	movlw	7
  6226  001E8C  6E28               	movwf	___ftmul@cntr,c
  6227  001E8E  A01B               	btfss	___ftmul@f1,0,c
  6228  001E90  D006               	goto	l580
  6229  001E92  501E               	movf	___ftmul@f2,w,c
  6230  001E94  2625               	addwf	___ftmul@f3_as_product,f,c
  6231  001E96  501F               	movf	___ftmul@f2+1,w,c
  6232  001E98  2226               	addwfc	___ftmul@f3_as_product+1,f,c
  6233  001E9A  5020               	movf	___ftmul@f2+2,w,c
  6234  001E9C  2227               	addwfc	___ftmul@f3_as_product+2,f,c
  6235  001E9E                     l580:
  6236  001E9E  90D8               	bcf	status,0,c
  6237  001EA0  321D               	rrcf	___ftmul@f1+2,f,c
  6238  001EA2  321C               	rrcf	___ftmul@f1+1,f,c
  6239  001EA4  321B               	rrcf	___ftmul@f1,f,c
  6240  001EA6  90D8               	bcf	status,0,c
  6241  001EA8  361E               	rlcf	___ftmul@f2,f,c
  6242  001EAA  361F               	rlcf	___ftmul@f2+1,f,c
  6243  001EAC  3620               	rlcf	___ftmul@f2+2,f,c
  6244  001EAE  2E28               	decfsz	___ftmul@cntr,f,c
  6245  001EB0  D7EE               	goto	l579
  6246  001EB2  0E09               	movlw	9
  6247  001EB4  6E28               	movwf	___ftmul@cntr,c
  6248  001EB6  A01B               	btfss	___ftmul@f1,0,c
  6249  001EB8  D006               	goto	l583
  6250  001EBA  501E               	movf	___ftmul@f2,w,c
  6251  001EBC  2625               	addwf	___ftmul@f3_as_product,f,c
  6252  001EBE  501F               	movf	___ftmul@f2+1,w,c
  6253  001EC0  2226               	addwfc	___ftmul@f3_as_product+1,f,c
  6254  001EC2  5020               	movf	___ftmul@f2+2,w,c
  6255  001EC4  2227               	addwfc	___ftmul@f3_as_product+2,f,c
  6256  001EC6                     l583:
  6257  001EC6  90D8               	bcf	status,0,c
  6258  001EC8  321D               	rrcf	___ftmul@f1+2,f,c
  6259  001ECA  321C               	rrcf	___ftmul@f1+1,f,c
  6260  001ECC  321B               	rrcf	___ftmul@f1,f,c
  6261  001ECE  90D8               	bcf	status,0,c
  6262  001ED0  3227               	rrcf	___ftmul@f3_as_product+2,f,c
  6263  001ED2  3226               	rrcf	___ftmul@f3_as_product+1,f,c
  6264  001ED4  3225               	rrcf	___ftmul@f3_as_product,f,c
  6265  001ED6  2E28               	decfsz	___ftmul@cntr,f,c
  6266  001ED8  D7EE               	goto	l582
  6267  001EDA  C025  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  6268  001EDE  C026  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6269  001EE2  C027  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6270  001EE6  C024  F004         	movff	___ftmul@exp,___ftpack@exp
  6271  001EEA  C029  F005         	movff	___ftmul@sign,___ftpack@sign
  6272  001EEE  ECF3  F00F         	call	___ftpack	;wreg free
  6273  001EF2  C001  F01B         	movff	?___ftpack,?___ftmul
  6274  001EF6  C002  F01C         	movff	?___ftpack+1,?___ftmul+1
  6275  001EFA  C003  F01D         	movff	?___ftpack+2,?___ftmul+2
  6276  001EFE  0012               	return	
  6277  001F00                     __end_of___ftmul:
  6278                           	opt stack 0
  6279                           tblptru	equ	0xFF8
  6280                           tblptrh	equ	0xFF7
  6281                           tblptrl	equ	0xFF6
  6282                           tablat	equ	0xFF5
  6283                           prodh	equ	0xFF4
  6284                           prodl	equ	0xFF3
  6285                           indf0	equ	0xFEF
  6286                           postinc0	equ	0xFEE
  6287                           fsr0h	equ	0xFEA
  6288                           fsr0l	equ	0xFE9
  6289                           wreg	equ	0xFE8
  6290                           indf2	equ	0xFDF
  6291                           postinc2	equ	0xFDE
  6292                           postdec2	equ	0xFDD
  6293                           fsr2h	equ	0xFDA
  6294                           fsr2l	equ	0xFD9
  6295                           status	equ	0xFD8
  6296                           
  6297 ;; *************** function ___ftdiv *****************
  6298 ;; Defined at:
  6299 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;  f1              3   11[COMRAM] float 
  6302 ;;  f2              3   14[COMRAM] float 
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;  f3              3   21[COMRAM] float 
  6305 ;;  sign            1   25[COMRAM] unsigned char 
  6306 ;;  exp             1   24[COMRAM] unsigned char 
  6307 ;;  cntr            1   20[COMRAM] unsigned char 
  6308 ;; Return value:  Size  Location     Type
  6309 ;;                  3   11[COMRAM] float 
  6310 ;; Registers used:
  6311 ;;		wreg, status,2, status,0, cstack
  6312 ;; Tracked objects:
  6313 ;;		On entry : 0/0
  6314 ;;		On exit  : 0/0
  6315 ;;		Unchanged: 0/0
  6316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6317 ;;      Params:         6       0       0       0       0       0       0       0       0
  6318 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6319 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6320 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6321 ;;Total ram usage:       15 bytes
  6322 ;; Hardware stack levels used:    1
  6323 ;; Hardware stack levels required when called:    1
  6324 ;; This function calls:
  6325 ;;		___ftpack
  6326 ;; This function is called by:
  6327 ;;		_DHT22_read
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           	psect	text29
  6332  001F00                     __ptext29:
  6333                           	opt stack 0
  6334  001F00                     ___ftdiv:
  6335                           	opt stack 28
  6336                           
  6337                           ;incstack = 0
  6338  001F00  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
  6339  001F04  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  6340  001F06  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  6341  001F08  340D               	rlcf	___ftdiv@f1+1,w,c
  6342  001F0A  3612               	rlcf	??___ftdiv& (0+255),f,c
  6343  001F0C  E301               	bnc	u2521
  6344  001F0E  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  6345  001F10                     u2521:
  6346  001F10  5012               	movf	??___ftdiv,w,c
  6347  001F12  6E19               	movwf	___ftdiv@exp,c
  6348  001F14  5019               	movf	___ftdiv@exp,w,c
  6349  001F16  A4D8               	btfss	status,2,c
  6350  001F18  D007               	goto	l544
  6351  001F1A  0E00               	movlw	0
  6352  001F1C  6E0C               	movwf	?___ftdiv,c
  6353  001F1E  0E00               	movlw	0
  6354  001F20  6E0D               	movwf	?___ftdiv+1,c
  6355  001F22  0E00               	movlw	0
  6356  001F24  6E0E               	movwf	?___ftdiv+2,c
  6357  001F26  0012               	return	
  6358  001F28                     l544:
  6359  001F28  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
  6360  001F2C  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  6361  001F2E  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  6362  001F30  3410               	rlcf	___ftdiv@f2+1,w,c
  6363  001F32  3612               	rlcf	??___ftdiv& (0+255),f,c
  6364  001F34  E301               	bnc	u2541
  6365  001F36  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  6366  001F38                     u2541:
  6367  001F38  5012               	movf	??___ftdiv,w,c
  6368  001F3A  6E1A               	movwf	___ftdiv@sign,c
  6369  001F3C  501A               	movf	___ftdiv@sign,w,c
  6370  001F3E  A4D8               	btfss	status,2,c
  6371  001F40  D007               	goto	l546
  6372  001F42  0E00               	movlw	0
  6373  001F44  6E0C               	movwf	?___ftdiv,c
  6374  001F46  0E00               	movlw	0
  6375  001F48  6E0D               	movwf	?___ftdiv+1,c
  6376  001F4A  0E00               	movlw	0
  6377  001F4C  6E0E               	movwf	?___ftdiv+2,c
  6378  001F4E  0012               	return	
  6379  001F50                     l546:
  6380  001F50  0E00               	movlw	0
  6381  001F52  6E16               	movwf	___ftdiv@f3,c
  6382  001F54  0E00               	movlw	0
  6383  001F56  6E17               	movwf	___ftdiv@f3+1,c
  6384  001F58  0E00               	movlw	0
  6385  001F5A  6E18               	movwf	___ftdiv@f3+2,c
  6386  001F5C  501A               	movf	___ftdiv@sign,w,c
  6387  001F5E  0F89               	addlw	137
  6388  001F60  5E19               	subwf	___ftdiv@exp,f,c
  6389  001F62  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
  6390  001F66  5011               	movf	___ftdiv@f2+2,w,c
  6391  001F68  1A1A               	xorwf	___ftdiv@sign,f,c
  6392  001F6A  0E80               	movlw	128
  6393  001F6C  161A               	andwf	___ftdiv@sign,f,c
  6394  001F6E  8E0D               	bsf	___ftdiv@f1+1,7,c
  6395  001F70  0EFF               	movlw	255
  6396  001F72  160C               	andwf	___ftdiv@f1,f,c
  6397  001F74  0EFF               	movlw	255
  6398  001F76  160D               	andwf	___ftdiv@f1+1,f,c
  6399  001F78  0E00               	movlw	0
  6400  001F7A  160E               	andwf	___ftdiv@f1+2,f,c
  6401  001F7C  8E10               	bsf	___ftdiv@f2+1,7,c
  6402  001F7E  0EFF               	movlw	255
  6403  001F80  160F               	andwf	___ftdiv@f2,f,c
  6404  001F82  0EFF               	movlw	255
  6405  001F84  1610               	andwf	___ftdiv@f2+1,f,c
  6406  001F86  0E00               	movlw	0
  6407  001F88  1611               	andwf	___ftdiv@f2+2,f,c
  6408  001F8A  0E18               	movlw	24
  6409  001F8C  6E15               	movwf	___ftdiv@cntr,c
  6410  001F8E  90D8               	bcf	status,0,c
  6411  001F90  3616               	rlcf	___ftdiv@f3,f,c
  6412  001F92  3617               	rlcf	___ftdiv@f3+1,f,c
  6413  001F94  3618               	rlcf	___ftdiv@f3+2,f,c
  6414  001F96  500F               	movf	___ftdiv@f2,w,c
  6415  001F98  5C0C               	subwf	___ftdiv@f1,w,c
  6416  001F9A  5010               	movf	___ftdiv@f2+1,w,c
  6417  001F9C  580D               	subwfb	___ftdiv@f1+1,w,c
  6418  001F9E  5011               	movf	___ftdiv@f2+2,w,c
  6419  001FA0  580E               	subwfb	___ftdiv@f1+2,w,c
  6420  001FA2  A0D8               	btfss	status,0,c
  6421  001FA4  D007               	goto	l548
  6422  001FA6  500F               	movf	___ftdiv@f2,w,c
  6423  001FA8  5E0C               	subwf	___ftdiv@f1,f,c
  6424  001FAA  5010               	movf	___ftdiv@f2+1,w,c
  6425  001FAC  5A0D               	subwfb	___ftdiv@f1+1,f,c
  6426  001FAE  5011               	movf	___ftdiv@f2+2,w,c
  6427  001FB0  5A0E               	subwfb	___ftdiv@f1+2,f,c
  6428  001FB2  8016               	bsf	___ftdiv@f3,0,c
  6429  001FB4                     l548:
  6430  001FB4  90D8               	bcf	status,0,c
  6431  001FB6  360C               	rlcf	___ftdiv@f1,f,c
  6432  001FB8  360D               	rlcf	___ftdiv@f1+1,f,c
  6433  001FBA  360E               	rlcf	___ftdiv@f1+2,f,c
  6434  001FBC  2E15               	decfsz	___ftdiv@cntr,f,c
  6435  001FBE  D7E7               	goto	l547
  6436  001FC0  C016  F001         	movff	___ftdiv@f3,___ftpack@arg
  6437  001FC4  C017  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6438  001FC8  C018  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6439  001FCC  C019  F004         	movff	___ftdiv@exp,___ftpack@exp
  6440  001FD0  C01A  F005         	movff	___ftdiv@sign,___ftpack@sign
  6441  001FD4  ECF3  F00F         	call	___ftpack	;wreg free
  6442  001FD8  C001  F00C         	movff	?___ftpack,?___ftdiv
  6443  001FDC  C002  F00D         	movff	?___ftpack+1,?___ftdiv+1
  6444  001FE0  C003  F00E         	movff	?___ftpack+2,?___ftdiv+2
  6445  001FE4  0012               	return	
  6446  001FE6                     __end_of___ftdiv:
  6447                           	opt stack 0
  6448                           tblptru	equ	0xFF8
  6449                           tblptrh	equ	0xFF7
  6450                           tblptrl	equ	0xFF6
  6451                           tablat	equ	0xFF5
  6452                           prodh	equ	0xFF4
  6453                           prodl	equ	0xFF3
  6454                           indf0	equ	0xFEF
  6455                           postinc0	equ	0xFEE
  6456                           fsr0h	equ	0xFEA
  6457                           fsr0l	equ	0xFE9
  6458                           wreg	equ	0xFE8
  6459                           indf2	equ	0xFDF
  6460                           postinc2	equ	0xFDE
  6461                           postdec2	equ	0xFDD
  6462                           fsr2h	equ	0xFDA
  6463                           fsr2l	equ	0xFD9
  6464                           status	equ	0xFD8
  6465                           
  6466 ;; *************** function ___ftpack *****************
  6467 ;; Defined at:
  6468 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;  arg             3    0[COMRAM] unsigned um
  6471 ;;  exp             1    3[COMRAM] unsigned char 
  6472 ;;  sign            1    4[COMRAM] unsigned char 
  6473 ;; Auto vars:     Size  Location     Type
  6474 ;;		None
  6475 ;; Return value:  Size  Location     Type
  6476 ;;                  3    0[COMRAM] float 
  6477 ;; Registers used:
  6478 ;;		wreg, status,2, status,0
  6479 ;; Tracked objects:
  6480 ;;		On entry : 0/0
  6481 ;;		On exit  : 0/0
  6482 ;;		Unchanged: 0/0
  6483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6484 ;;      Params:         5       0       0       0       0       0       0       0       0
  6485 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6486 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6487 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6488 ;;Total ram usage:        8 bytes
  6489 ;; Hardware stack levels used:    1
  6490 ;; This function calls:
  6491 ;;		Nothing
  6492 ;; This function is called by:
  6493 ;;		___ftadd
  6494 ;;		___ftdiv
  6495 ;;		___ftmul
  6496 ;;		___lltoft
  6497 ;;		___lwtoft
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           	psect	text30
  6502  001FE6                     __ptext30:
  6503                           	opt stack 0
  6504  001FE6                     ___ftpack:
  6505                           	opt stack 27
  6506                           
  6507                           ;incstack = 0
  6508  001FE6  5004               	movf	___ftpack@exp,w,c
  6509  001FE8  B4D8               	btfsc	status,2,c
  6510  001FEA  D005               	goto	u1810
  6511  001FEC  5001               	movf	___ftpack@arg,w,c
  6512  001FEE  1002               	iorwf	___ftpack@arg+1,w,c
  6513  001FF0  1003               	iorwf	___ftpack@arg+2,w,c
  6514  001FF2  A4D8               	btfss	status,2,c
  6515  001FF4  D00C               	goto	l480
  6516  001FF6                     u1810:
  6517  001FF6  0E00               	movlw	0
  6518  001FF8  6E01               	movwf	?___ftpack,c
  6519  001FFA  0E00               	movlw	0
  6520  001FFC  6E02               	movwf	?___ftpack+1,c
  6521  001FFE  0E00               	movlw	0
  6522  002000  6E03               	movwf	?___ftpack+2,c
  6523  002002  0012               	return	
  6524  002004  2A04               	incf	___ftpack@exp,f,c
  6525  002006  90D8               	bcf	status,0,c
  6526  002008  3203               	rrcf	___ftpack@arg+2,f,c
  6527  00200A  3202               	rrcf	___ftpack@arg+1,f,c
  6528  00200C  3201               	rrcf	___ftpack@arg,f,c
  6529  00200E                     l480:
  6530  00200E  0E00               	movlw	0
  6531  002010  1401               	andwf	___ftpack@arg,w,c
  6532  002012  6E06               	movwf	??___ftpack& (0+255),c
  6533  002014  0E00               	movlw	0
  6534  002016  1402               	andwf	___ftpack@arg+1,w,c
  6535  002018  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6536  00201A  0EFE               	movlw	254
  6537  00201C  1403               	andwf	___ftpack@arg+2,w,c
  6538  00201E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6539  002020  5006               	movf	??___ftpack,w,c
  6540  002022  1007               	iorwf	??___ftpack+1,w,c
  6541  002024  1008               	iorwf	??___ftpack+2,w,c
  6542  002026  B4D8               	btfsc	status,2,c
  6543  002028  D00C               	goto	l483
  6544  00202A  D7EC               	goto	l481
  6545  00202C  2A04               	incf	___ftpack@exp,f,c
  6546  00202E  0E01               	movlw	1
  6547  002030  2601               	addwf	___ftpack@arg,f,c
  6548  002032  0E00               	movlw	0
  6549  002034  2202               	addwfc	___ftpack@arg+1,f,c
  6550  002036  0E00               	movlw	0
  6551  002038  2203               	addwfc	___ftpack@arg+2,f,c
  6552  00203A  90D8               	bcf	status,0,c
  6553  00203C  3203               	rrcf	___ftpack@arg+2,f,c
  6554  00203E  3202               	rrcf	___ftpack@arg+1,f,c
  6555  002040  3201               	rrcf	___ftpack@arg,f,c
  6556  002042                     l483:
  6557  002042  0E00               	movlw	0
  6558  002044  1401               	andwf	___ftpack@arg,w,c
  6559  002046  6E06               	movwf	??___ftpack& (0+255),c
  6560  002048  0E00               	movlw	0
  6561  00204A  1402               	andwf	___ftpack@arg+1,w,c
  6562  00204C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6563  00204E  0EFF               	movlw	255
  6564  002050  1403               	andwf	___ftpack@arg+2,w,c
  6565  002052  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6566  002054  5006               	movf	??___ftpack,w,c
  6567  002056  1007               	iorwf	??___ftpack+1,w,c
  6568  002058  1008               	iorwf	??___ftpack+2,w,c
  6569  00205A  B4D8               	btfsc	status,2,c
  6570  00205C  D006               	goto	l486
  6571  00205E  D7E6               	goto	l484
  6572  002060  0604               	decf	___ftpack@exp,f,c
  6573  002062  90D8               	bcf	status,0,c
  6574  002064  3601               	rlcf	___ftpack@arg,f,c
  6575  002066  3602               	rlcf	___ftpack@arg+1,f,c
  6576  002068  3603               	rlcf	___ftpack@arg+2,f,c
  6577  00206A                     l486:
  6578  00206A  BE02               	btfsc	___ftpack@arg+1,7,c
  6579  00206C  D003               	goto	u1850
  6580  00206E  0E02               	movlw	2
  6581  002070  6004               	cpfslt	___ftpack@exp,c
  6582  002072  D7F6               	goto	l487
  6583  002074                     u1850:
  6584  002074  A004               	btfss	___ftpack@exp,0,c
  6585  002076  9E02               	bcf	___ftpack@arg+1,7,c
  6586  002078  90D8               	bcf	status,0,c
  6587  00207A  3204               	rrcf	___ftpack@exp,f,c
  6588  00207C  5004               	movf	___ftpack@exp,w,c
  6589  00207E  1203               	iorwf	___ftpack@arg+2,f,c
  6590  002080  5005               	movf	___ftpack@sign,w,c
  6591  002082  A4D8               	btfss	status,2,c
  6592  002084  8E03               	bsf	___ftpack@arg+2,7,c
  6593  002086  C001  F001         	movff	___ftpack@arg,?___ftpack
  6594  00208A  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6595  00208E  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6596  002092  0012               	return	
  6597  002094                     __end_of___ftpack:
  6598                           	opt stack 0
  6599                           tblptru	equ	0xFF8
  6600                           tblptrh	equ	0xFF7
  6601                           tblptrl	equ	0xFF6
  6602                           tablat	equ	0xFF5
  6603                           prodh	equ	0xFF4
  6604                           prodl	equ	0xFF3
  6605                           indf0	equ	0xFEF
  6606                           postinc0	equ	0xFEE
  6607                           fsr0h	equ	0xFEA
  6608                           fsr0l	equ	0xFE9
  6609                           wreg	equ	0xFE8
  6610                           indf2	equ	0xFDF
  6611                           postinc2	equ	0xFDE
  6612                           postdec2	equ	0xFDD
  6613                           fsr2h	equ	0xFDA
  6614                           fsr2l	equ	0xFD9
  6615                           status	equ	0xFD8
  6616                           
  6617 ;; *************** function _DHT22_init *****************
  6618 ;; Defined at:
  6619 ;;		line 8 in file "DHT22.h"
  6620 ;; Parameters:    Size  Location     Type
  6621 ;;		None
  6622 ;; Auto vars:     Size  Location     Type
  6623 ;;		None
  6624 ;; Return value:  Size  Location     Type
  6625 ;;                  1    wreg      void 
  6626 ;; Registers used:
  6627 ;;		None
  6628 ;; Tracked objects:
  6629 ;;		On entry : 0/0
  6630 ;;		On exit  : 0/0
  6631 ;;		Unchanged: 0/0
  6632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6633 ;;      Params:         0       0       0       0       0       0       0       0       0
  6634 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6635 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6636 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6637 ;;Total ram usage:        0 bytes
  6638 ;; Hardware stack levels used:    1
  6639 ;; This function calls:
  6640 ;;		Nothing
  6641 ;; This function is called by:
  6642 ;;		_main
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           	psect	text31
  6647  00260C                     __ptext31:
  6648                           	opt stack 0
  6649  00260C                     _DHT22_init:
  6650                           	opt stack 30
  6651                           
  6652                           ;DHT22.h: 9: TRISCbits.TRISC2 = 0;
  6653                           
  6654                           ;incstack = 0
  6655  00260C  9494               	bcf	3988,2,c	;volatile
  6656                           
  6657                           ;DHT22.h: 10: LATCbits.LATC2 = 1;
  6658  00260E  848B               	bsf	3979,2,c	;volatile
  6659  002610  0012               	return		;funcret
  6660  002612                     __end_of_DHT22_init:
  6661                           	opt stack 0
  6662                           tblptru	equ	0xFF8
  6663                           tblptrh	equ	0xFF7
  6664                           tblptrl	equ	0xFF6
  6665                           tablat	equ	0xFF5
  6666                           prodh	equ	0xFF4
  6667                           prodl	equ	0xFF3
  6668                           indf0	equ	0xFEF
  6669                           postinc0	equ	0xFEE
  6670                           fsr0h	equ	0xFEA
  6671                           fsr0l	equ	0xFE9
  6672                           wreg	equ	0xFE8
  6673                           indf2	equ	0xFDF
  6674                           postinc2	equ	0xFDE
  6675                           postdec2	equ	0xFDD
  6676                           fsr2h	equ	0xFDA
  6677                           fsr2l	equ	0xFD9
  6678                           status	equ	0xFD8
  6679                           tblptru	equ	0xFF8
  6680                           tblptrh	equ	0xFF7
  6681                           tblptrl	equ	0xFF6
  6682                           tablat	equ	0xFF5
  6683                           prodh	equ	0xFF4
  6684                           prodl	equ	0xFF3
  6685                           indf0	equ	0xFEF
  6686                           postinc0	equ	0xFEE
  6687                           fsr0h	equ	0xFEA
  6688                           fsr0l	equ	0xFE9
  6689                           wreg	equ	0xFE8
  6690                           indf2	equ	0xFDF
  6691                           postinc2	equ	0xFDE
  6692                           postdec2	equ	0xFDD
  6693                           fsr2h	equ	0xFDA
  6694                           fsr2l	equ	0xFD9
  6695                           status	equ	0xFD8
  6696                           
  6697                           	psect	rparam
  6698  0000                     tblptru	equ	0xFF8
  6699                           tblptrh	equ	0xFF7
  6700                           tblptrl	equ	0xFF6
  6701                           tablat	equ	0xFF5
  6702                           prodh	equ	0xFF4
  6703                           prodl	equ	0xFF3
  6704                           indf0	equ	0xFEF
  6705                           postinc0	equ	0xFEE
  6706                           fsr0h	equ	0xFEA
  6707                           fsr0l	equ	0xFE9
  6708                           wreg	equ	0xFE8
  6709                           indf2	equ	0xFDF
  6710                           postinc2	equ	0xFDE
  6711                           postdec2	equ	0xFDD
  6712                           fsr2h	equ	0xFDA
  6713                           fsr2l	equ	0xFD9
  6714                           status	equ	0xFD8


Data Sizes:
    Strings     34
    Constant    118
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     89      89
    BANK0           160     25      33
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sp__utoa	PTR unsigned char  size(2) Largest target is 8
		 -> LCD_integer@st(COMRAM[8]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[14]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 8
		 -> LCD_integer@st(COMRAM[8]), 

    LCD_printf@dato	PTR unsigned char  size(2) Largest target is 8
		 -> LCD_integer@st(COMRAM[8]), STR_3(CODE[6]), 

    DHT22_read@dht_humedad	PTR float  size(2) Largest target is 3
		 -> main@humedad(COMRAM[3]), 

    DHT22_read@dht_temperatura	PTR float  size(2) Largest target is 3
		 -> main@temperatura(COMRAM[3]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_LCD_dato
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _LCD_segunda_linea->_LCD_cmd
    _LCD_printf->_LCD_dato
    _LCD_dato->_LCD_write
    _LCD_init->_LCD_cmd
    _LCD_clear->_LCD_cmd
    _LCD_cmd->_LCD_write
    _DHT22_read->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    ___ftdiv->___lwtoft

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   63621
                                             80 COMRAM     9     9      0
                         _DHT22_init
                         _DHT22_read
                          _LCD_clear
                           _LCD_init
                         _LCD_printf
                  _LCD_segunda_linea
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   50366
                                             69 COMRAM    11     6      5
                                              0 BANK0     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   12059
                                             41 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     243
                                              2 COMRAM     1     1      0
                           _LCD_dato
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   11861
                                             41 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2895
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             48 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4120
                                             63 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             51 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _LCD_segunda_linea                                    0     0      0     221
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_printf                                           2     0      2     418
                                              2 COMRAM     2     0      2
                           _LCD_dato
 ---------------------------------------------------------------------------------
 (3) _LCD_dato                                             1     1      0     221
                                              1 COMRAM     1     1      0
                          _LCD_write
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0     221
                                              2 COMRAM     2     2      0
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_clear                                            1     1      0     221
                                              2 COMRAM     1     1      0
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_cmd                                              1     1      0     221
                                              1 COMRAM     1     1      0
                          _LCD_write
 ---------------------------------------------------------------------------------
 (4) _LCD_write                                            1     1      0     199
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DHT22_read                                          18    14      4   12057
                                             41 COMRAM    18    14      4
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2755
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5237
                                             26 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3367
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _DHT22_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DHT22_init
   _DHT22_read
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
   _LCD_clear
     _LCD_cmd
       _LCD_write
   _LCD_init
     _LCD_cmd
       _LCD_write
   _LCD_printf
     _LCD_dato
       _LCD_write
   _LCD_segunda_linea
     _LCD_cmd
       _LCD_write
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
       _LCD_dato
         _LCD_write
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     19      21       5       20.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     59      59       1       93.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7A      20        0.0%
DATA                 0      0      7A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Mar 27 01:01:11 2019

                        l40 18CE                          l24 176C                          l34 17D2  
                        l26 1780                          l27 1794                          l29 17A4  
                        l45 212C                          l38 190E                          l70 232A  
                        l46 2182                          l39 1892                          l71 232C  
                        l47 2192                          l80 2368                          l72 2334  
                        l81 236A                          l73 2336                          l82 2372  
                        l74 233E                          l83 2374                          l75 2340  
                        l84 237C                          l76 2348                          l85 237E  
                        l77 234A                          l78 235E                          l79 2360  
                        l98 247A                          l99 2452                ___awdiv@sign 000C  
       ___wmul@multiplicand 0011                 __CFG_BORV$3 000000                __CFG_CP0$OFF 000000  
              __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000  
              ___ftadd@exp1 003F                ___ftadd@exp2 003E                ___ftadd@sign 003D  
                       l202 0C14                         l212 0D3E                         l221 0E32  
                       l230 0FB8                         l222 0E24                         l214 0D62  
                       l231 0FAA                         l215 0D54                         l160 16FE  
                       l240 1062                         l224 0E56                         l208 0CD2  
                       l241 1086                         l233 0FDA                         l225 0E5A  
                       l170 14C8                         l242 108E                         l234 0FF6  
                       l226 0E72                         l218 0E18                         l163 12EC  
                       l227 0F9E                         l219 0D8C                         l420 21E4  
                       l164 1218                         l236 1016                         l228 0EC4  
                       l180 09A4                         l157 1632                         l237 1038  
                       l181 096C                         l430 22D0                         l246 10C6  
                       l190 0FC2                         l174 08A8                         l511 1964  
                       l423 220C                         l167 12C8                         l239 105A  
                       l191 0A04                         l175 08BA                         l520 19F4  
                       l600 1DAA                         l424 2216                         l416 21BE  
                       l432 22E6                         l168 1418                         l192 0A46  
                       l184 09CC                         l425 2224                         l417 21CE  
                       l433 22DE                         l177 08EA                         l450 1C2C  
                       l194 0AD8                         l515 198E                         l451 1C6E  
                       l419 21EC                         l195 0B3E                         l187 09C8  
                       l179 09BA                         l460 1D00                         l452 1C9E  
                       l436 22FE                         l612 25AE                         l188 09F0  
                       l525 19EA                         l605 1DDE                         l461 1CF4  
                       l437 2308                         l429 22C4                         l197 0B64  
                       l534 1A28                         l526 19E0                         l606 1DD2  
                       l454 1CDC                         l438 2316                         l198 0BA4  
                       l535 1A1E                         l455 1CCC                         l199 0C6C  
                       l480 200E                         l544 1F28                         l608 1DFA  
                       l448 1C0E                         l552 1AEA                         l481 2004  
                       l537 1A4C                         l546 1F50                         l570 20F4  
                       l538 1A68                         l554 1B16                         l483 2042  
                       l547 1F8E                         l539 1A98                         l555 1B50  
                       l484 202C                         l548 1FB4                         l580 1E9E  
                       l652 225C                         l564 1BD8                         l556 1B78  
                       l653 2250                         l565 1BCC                         l486 206A  
                       l582 1EB6                         l662 23AC                         l558 1BB4  
                       l487 2060                         l583 1EC6                         l663 23A0  
                       l559 1BA4                         l576 1E34                         l656 2290  
                       l569 20C4                         l593 2500                         l657 229E  
                       l673 2406                         l578 1E5C                         l666 23D4  
                       l674 23FA                         l579 1E8E                         l587 2566  
                       l667 23E2                         l597 1D44                         l599 1DBA  
              __CFG_CPB$OFF 000000                __CFG_CPD$OFF 000000                __CFG_BOR$OFF 000000  
              ___awmod@sign 0006                         prod 000FF3                 ?_LCD_printf 0003  
                       wreg 000FE8                __CFG_FOSC$HS 000000         __size_of_DHT22_init 0006  
       __size_of_DHT22_read 01D4                __CFG_LVP$OFF 000000                ___ftdiv@cntr 0015  
           __end_of_LCD_cmd 25FA                ___ftdiv@sign 001A                __CFG_WDT$OFF 000000  
                      l2831 0BEE                        l2823 0BA4                        l2673 178C  
                      l2851 0CD6                        l2679 179C                        l2871 0D54  
                      l1993 2120                        l2889 0E24                        STR_1 0885  
                      STR_2 0877                        STR_3 0893                        u2020 19FC  
                      u2111 1E44                        u2050 1A30                        u3100 0D0E  
                      u3020 0B76                        u3030 0BB6                        u2240 22EA  
                      u3130 0D70                        u2091 1E1C                        u2180 21F0  
                      u3300 1096                        u3060 0BEE                        u2510 1D06  
                      u3310 10AC                        u2440 1BDE                        u3160 0E40  
                      u2521 1F10                        u2361 1ACE                        u1810 1FF6  
                      u3170 0E50                        u3340 2472                        u2541 1F38  
                      u2621 1D28                        u2381 1AFA                        u3350 249A  
                      u2710 2260                        u1920 1956                        u2640 1D62  
                      u1850 2074                        u3347 2468                printf@tmpval 006D  
                      u2740 23B0                        u3357 2490                        u2645 1D5A  
                      u1950 1980                        u2910 0948                        u3607 1782  
                      u2680 1DE4                        u3617 17AA                        u1881 1922  
                      u3537 219C                        u2850 17DA                        u2834 17CA  
                      u2835 17C6                        u3547 24C4                        u1891 1936  
                      u2860 17F2                        u1980 19BE                        u3557 25D8  
                      u3567 2386                        u3577 174A                        u3587 1758  
                      u2980 0A7E                        u3597 176E                        u2985 0A74  
              __CFG_PWRT$ON 000000                 main@humedad 0054                        _main 2124  
              ___ftpack@arg 0001                ___ftpack@exp 0004                        fsr0h 000FEA  
                      indf0 000FEF                        fsr2h 000FDA                        fsr0l 000FE9  
                      indf2 000FDF                        fsr2l 000FD9                        prodh 000FF4  
                      prodl 000FF3                        start 0000               __CFG_IESO$OFF 000000  
     DHT22_read@dht_humedad 002C          __size_of_LCD_clear 0016               __CFG_MCLRE$ON 000000  
              ___ftmul@cntr 0028                ___param_bank 000000                ___ftmul@sign 0029  
        __size_of_LCD_write 006E                ___fttol@exp1 003F                ___fttol@lval 003B  
             __CFG_PLLDIV$1 000000            __end_of_LCD_dato 25EE            __end_of_LCD_init 24EA  
            __CFG_CCP2MX$ON 000000                       ?_main 0001             __end_of___awdiv 222E  
           __end_of___ftadd 1ABE             __end_of___awmod 2320             __end_of___ftdiv 1FE6  
           __end_of___ftneg 2574             __end_of___lldiv 22B0             __end_of___ftmul 1F00  
           ___awdiv@divisor 0009             __end_of___llmod 23F4             __end_of___ftsub 252A  
           __end_of___fttol 1E0C             ___awdiv@counter 000B               __CFG_USBDIV$1 000000  
            DHT22_read@bits 0033               __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000  
             __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000                ___lltoft@exp 0011  
            __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000  
            __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000  
             __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000              __CFG_EBTRB$OFF 000000  
           __end_of_dpowers 0829                 LCD_cmd@dato 0002                       _scale 10E4  
           __end_of_isdigit 25B6               ___ftpack@sign 0005                       _putch 25FA  
                     tablat 000FF5                       status 000FD8              __CFG_ICPRT$OFF 000000  
            __CFG_PBADEN$ON 000000             __initialization 25B6         __size_of_LCD_printf 0052  
              __end_of_main 21AA                      ??_main 0051               ___fttol@sign1 003A  
             __activetblptr 000002        __size_of__tdiv_to_l_ 0132                   ??_LCD_cmd 0002  
         __end_of_LCD_clear 25E2           __end_of_LCD_write 238E            ___llmod@dividend 0001  
                    ?_scale 002A            ___awdiv@dividend 0007                      ?_putch 0001  
          __end_of___ftpack 2094            __end_of___lltoft 2450            __end_of___lwtoft 2598  
              ??_DHT22_init 0001                ??_DHT22_read 002E              __CFG_XINST$OFF 000000  
          __end_of__powers_ 0850                      ___ftge 2094                      ___wmul 252A  
                 ??___awdiv 000B                   ??___ftadd 003A              __CFG_STVREN$ON 000000  
                 ??___awmod 0005                   ??___ftdiv 0012                   ??___ftneg 0004  
                 ??___lldiv 0009                   ??___ftmul 0021                   ??___llmod 0009  
                 ??___ftsub 0046                   ??___fttol 0035                      _fround 14EC  
                    clear_0 25BC            ___awdiv@quotient 000D             ___awmod@divisor 0003  
           ___awmod@counter 0005                      _printf 089A       ___ftmul@f3_as_product 0025  
              LCD_dato@dato 0002                   ??_isdigit 0001                __mediumconst 0000  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
            LCD_printf@dato 0003          __end_of_DHT22_init 2612          __end_of_DHT22_read 1912  
                __accesstop 0060     __end_of__initialization 25C2                  ___ftadd@f1 0034  
                ___ftadd@f2 0037                  ___ftge@ff1 0001                   ?_LCD_dato 0001  
                ___ftge@ff2 0004                   ?_LCD_init 0001               ___rparam_used 000001  
                ___ftdiv@f1 000C                  ___ftdiv@f2 000F                  ___ftdiv@f3 0016  
                ___ftneg@f1 0001                  ___ftmul@f1 001B                  ___ftmul@f2 001E  
                ___ftsub@f1 0040                  ___ftsub@f2 0043                  ___fttol@f1 0031  
            __pcstackCOMRAM 0001                  ___lltoft@c 0009               __end_of_scale 14EC  
             __end_of_putch 2604       DHT22_read@rawhumidity 0030                  ___lwtoft@c 0009  
                __div_to_l_ 1BF0                ??_LCD_printf 0005             __div_to_l_@exp1 000C  
           __div_to_l_@cntr 000B                     ??_scale 002D             __div_to_l_@quot 0007  
                   ??_putch 0003                  __pbssBANK0 0079                  ??_LCD_dato 0002  
                ??_LCD_init 0003               __div_to_l_@f1 0001               __div_to_l_@f2 0004  
  DHT22_read@rawtemperature 0038                     ?___ftge 0001          __end_of_LCD_printf 24A2  
                   ?___wmul 000F                     ?_fround 002A                   ?___ftpack 0001  
                   ?_printf 0046                   ?___lltoft 0009                   ?___lwtoft 0009  
                   _LCD_cmd 25EE             __CFG_VREGEN$OFF 000000            DHT22_read@result 0032  
         __end_of__npowers_ 0877                     __Hparam 0000                  _scale$1022 002D  
                   __Lparam 0000            LCD_integer@F3974 0079             __size_of___ftge 0090  
                   ___awdiv 21AA                     ___ftadd 1912                     ___awmod 22B0  
                   ___ftdiv 1F00                     ___ftneg 2550                     ___lldiv 222E  
           __size_of___wmul 0026                     ___ftmul 1E0C                     ___llmod 238E  
                   ___ftsub 24EA                     ___fttol 1D18                __psmallconst 0800  
                   __pcinit 25B6                  ??___ftpack 0006             __size_of_fround 0252  
                   __ramtop 0800                  ??___lltoft 000D                     __ptext0 2124  
                   __ptext1 089A                     __ptext2 10E4                     __ptext3 25FA  
                   __ptext4 2598                     __ptext5 14EC                     __ptext6 252A  
                   __ptext7 22B0                     __ptext8 21AA                     __ptext9 1ABE  
           __size_of_printf 084A                  ??___lwtoft 000C                 ?__div_to_l_ 0001  
                   _dpowers 0801                     _isdigit 2598            ___awmod@dividend 0001  
                 _LCD_clear 25CC        end_of_initialization 25C2                   _LCD_write 2320  
             __Lmediumconst 0000             ___lldiv@divisor 0005             ___lldiv@counter 000D  
                   printf@c 0078                     printf@f 0046                     postdec2 000FDD  
                   postinc0 000FEE                     postinc2 000FDE              __tdiv_to_l_@f1 0001  
            __tdiv_to_l_@f2 0004               ??__tdiv_to_l_ 0007                   _PORTCbits 000F82  
                 _TRISCbits 000F94                   _TRISDbits 000F95                  ?_LCD_clear 0001  
                ?_LCD_write 0001                 ___ftdiv@exp 0019                 printf@width 006B  
       __size_of__div_to_l_ 0128                  main@status 0053           __size_of_LCD_dato 000C  
         __size_of_LCD_init 0048                 ___ftmul@exp 0024              __end_of___ftge 2124  
            __end_of___wmul 2550              __end_of_fround 173E              __end_of_printf 10E4  
       start_initialization 25B6         __end_of__tdiv_to_l_ 1BF0           _LCD_segunda_linea 2604  
        ?_LCD_segunda_linea 0001             ___llmod@divisor 0005             ___llmod@counter 0009  
       ??_LCD_segunda_linea 0003                    ??___ftge 0007                    ??___wmul 0013  
          __CFG_LPT1OSC$OFF 000000                    ??_fround 002D                    ??_printf 004B  
                fround@prec 0033           __size_of___ftpack 00AE                    ?_LCD_cmd 0001  
         __size_of___lltoft 005C           __size_of___lwtoft 0024               __pcstackBANK0 0060  
 __end_of_LCD_segunda_linea 260C                 ??_LCD_clear 0003                 ??_LCD_write 0001  
             LCD_write@dato 0001                    ?___awdiv 0007                    ?___ftadd 0034  
                  ?___awmod 0001                    ?___ftdiv 000C                    ?___ftneg 0001  
                  ?___lldiv 0001                    ?___ftmul 001B                    ?___llmod 0001  
                  ?___ftsub 0040                   __npowers_ 0850                    ?___fttol 0031  
 DHT22_read@dht_temperatura 002A                 __tdiv_to_l_ 1ABE                ??__div_to_l_ 0007  
               __smallconst 0800                    ?_isdigit 0001              __size_of_scale 0408  
            __size_of_putch 000A              ___wmul@product 0013                    _LATCbits 000F8B  
                  _LATDbits 000F8C                    _LCD_dato 25E2                    _LCD_init 24A2  
        __end_of__div_to_l_ 1D18            __CFG_WDTPS$32768 000000           ___wmul@multiplier 000F  
                printf@flag 0069                  printf@fval 0073                  printf@prec 0076  
               DHT22_read@i 003A                 DHT22_read@j 003B            __size_of_LCD_cmd 000C  
__size_of_LCD_segunda_linea 0008                    __Hrparam 0000                  _DHT22_init 260C  
                _DHT22_read 173E                    __Lrparam 0000            __size_of___awdiv 0084  
          __size_of___ftadd 01AC            __size_of___awmod 0070            __size_of___ftdiv 00E6  
          __size_of___ftneg 0024            __size_of___lldiv 0082            __size_of___ftmul 00F4  
          __size_of___llmod 0066            __size_of___ftsub 0040            __size_of___fttol 00F4  
                  ___ftpack 1FE6                 _fround$1020 0030                 _fround$1021 002D  
                  ___lltoft 23F4                 _isdigit$652 0002                    ___lwtoft 2574  
          __size_of_isdigit 001E                    __ptext10 1BF0                    __ptext11 23F4  
                  __ptext20 2450                    __ptext12 238E                    __ptext21 25E2  
                  __ptext13 222E                    __ptext30 1FE6                    __ptext22 24A2  
                  __ptext14 1D18                    __ptext31 260C                    __ptext23 25CC  
                  __ptext15 24EA                    __ptext24 25EE                    __ptext16 1912  
                  __ptext25 2320                    __ptext17 2550                    __ptext26 173E  
                  __ptext18 2094                    __ptext27 2574                    __ptext19 2604  
                  __ptext28 1E0C                    __ptext29 1F00                    __powers_ 0829  
             __size_of_main 0086                   printf@exp 0071                   printf@val 0065  
     __CFG_CPUDIV$OSC1_PLL2 000000             main@temperatura 0057                   putch@dato 0003  
                _LCD_printf 2450                    isdigit@c 0003                    scale@scl 0030  
          __tdiv_to_l_@exp1 000F            __tdiv_to_l_@cntr 000E            __tdiv_to_l_@quot 000A  
          ___lldiv@dividend 0001                 ?_DHT22_init 0001                 ?_DHT22_read 002A  
                  printf@ap 0063                ?__tdiv_to_l_ 0001                 _printf$1023 0060  
          ___lldiv@quotient 0009  
