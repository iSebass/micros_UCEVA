
PCF8574.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000316  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000316  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010e  0080010e  000003b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001647  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e6  00000000  00000000  00001bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a62  00000000  00000000  000025ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  00003010  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e8  00000000  00000000  000032ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000af5  00000000  00000000  00003894  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004389  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e1       	ldi	r30, 0x16	; 22
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  9e:	0c 94 89 01 	jmp	0x312	; 0x312 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <EEPROM_24LC256_Rd>:
	TWI_Stop();
	
	
}

char EEPROM_24LC256_Rd(int pos){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	c8 2f       	mov	r28, r24
  ac:	d9 2f       	mov	r29, r25
	char data;
	char NibbleH, NibbleL;
	NibbleH = (0xFF00 & pos)>>8;
	NibbleL = (0x00FF & pos)>>0;
	TWI_Start();
  ae:	0e 94 8f 00 	call	0x11e	; 0x11e <TWI_Start>
	TWI_Write((DIRMEMORIA<<1) | 0);
  b2:	80 ea       	ldi	r24, 0xA0	; 160
  b4:	0e 94 9f 00 	call	0x13e	; 0x13e <TWI_Write>
	TWI_Write(NibbleH);
  b8:	8d 2f       	mov	r24, r29
  ba:	0e 94 9f 00 	call	0x13e	; 0x13e <TWI_Write>
	TWI_Write(NibbleL);
  be:	8c 2f       	mov	r24, r28
  c0:	0e 94 9f 00 	call	0x13e	; 0x13e <TWI_Write>
	TWI_Repeat_Start();
  c4:	0e 94 b3 00 	call	0x166	; 0x166 <TWI_Repeat_Start>
	TWI_Write( (DIRMEMORIA<<1) | 1);
  c8:	81 ea       	ldi	r24, 0xA1	; 161
  ca:	0e 94 9f 00 	call	0x13e	; 0x13e <TWI_Write>
	data = TWI_ReadNack();
  ce:	0e 94 a9 00 	call	0x152	; 0x152 <TWI_ReadNack>
  d2:	c8 2f       	mov	r28, r24
	TWI_Stop();
  d4:	0e 94 97 00 	call	0x12e	; 0x12e <TWI_Stop>
	return data;
  d8:	8c 2f       	mov	r24, r28
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <main>:

int data;

int main(void)
{
    TWI_Init();
  e0:	0e 94 86 00 	call	0x10c	; 0x10c <TWI_Init>
	
	i2c_lcd_init();
  e4:	0e 94 43 01 	call	0x286	; 0x286 <i2c_lcd_init>
	i2c_lcd_puts("Hola Amigos!");
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <i2c_lcd_puts>
	
	
	
	DDRD  = 0xFF;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	8a b9       	out	0x0a, r24	; 10
	PORTD = EEPROM_24LC256_Rd(105);
  f4:	89 e6       	ldi	r24, 0x69	; 105
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROM_24LC256_Rd>
  fc:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	8f e1       	ldi	r24, 0x1F	; 31
 100:	9e e4       	ldi	r25, 0x4E	; 78
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x22>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x28>
 108:	00 00       	nop
 10a:	f9 cf       	rjmp	.-14     	; 0xfe <main+0x1e>

0000010c <TWI_Init>:
	// Esperar a que se complete la operación
	while (!(TWCR & (1<<TWINT)));
	
	// Retornar el valor leido
	return TWDR;
}
 10c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 110:	80 e2       	ldi	r24, 0x20	; 32
 112:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 11c:	08 95       	ret

0000011e <TWI_Start>:
 11e:	84 ea       	ldi	r24, 0xA4	; 164
 120:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 124:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 128:	88 23       	and	r24, r24
 12a:	e4 f7       	brge	.-8      	; 0x124 <TWI_Start+0x6>
 12c:	08 95       	ret

0000012e <TWI_Stop>:
 12e:	84 e9       	ldi	r24, 0x94	; 148
 130:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 134:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 138:	84 fd       	sbrc	r24, 4
 13a:	fc cf       	rjmp	.-8      	; 0x134 <TWI_Stop+0x6>
 13c:	08 95       	ret

0000013e <TWI_Write>:
 13e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 142:	84 e8       	ldi	r24, 0x84	; 132
 144:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 148:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 14c:	88 23       	and	r24, r24
 14e:	e4 f7       	brge	.-8      	; 0x148 <TWI_Write+0xa>
 150:	08 95       	ret

00000152 <TWI_ReadNack>:

uint8_t TWI_ReadNack(void){
	// Lectura de datos del bus TWI sin ACK
	TWCR = (1<<TWINT)|(1<<TWEN);
 152:	84 e8       	ldi	r24, 0x84	; 132
 154:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// Esperar a que se complete la operación
	while (!(TWCR & (1<<TWINT)));
 158:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 15c:	88 23       	and	r24, r24
 15e:	e4 f7       	brge	.-8      	; 0x158 <TWI_ReadNack+0x6>
	
	// Retornar el valor leído
	return TWDR;
 160:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 164:	08 95       	ret

00000166 <TWI_Repeat_Start>:

void TWI_Repeat_Start(void){
		TWI_Stop();
 166:	0e 94 97 00 	call	0x12e	; 0x12e <TWI_Stop>
		TWI_Start();
 16a:	0e 94 8f 00 	call	0x11e	; 0x11e <TWI_Start>
 16e:	08 95       	ret

00000170 <PCF_Wr>:
void _write_nibble(uint8_t nibble);
void _send_byte(uint8_t value, uint8_t mode);
void PCF_Wr(uint8_t data);


void PCF_Wr(uint8_t data){
 170:	cf 93       	push	r28
	if(statusLED==1) data |= (1<<_LCD_LED); else data &= ~(1<<_LCD_LED);
 172:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 176:	91 30       	cpi	r25, 0x01	; 1
 178:	19 f4       	brne	.+6      	; 0x180 <PCF_Wr+0x10>
 17a:	c8 2f       	mov	r28, r24
 17c:	c8 60       	ori	r28, 0x08	; 8
 17e:	02 c0       	rjmp	.+4      	; 0x184 <PCF_Wr+0x14>
 180:	c8 2f       	mov	r28, r24
 182:	c7 7f       	andi	r28, 0xF7	; 247
	TWI_Start();
 184:	0e 94 8f 00 	call	0x11e	; 0x11e <TWI_Start>
	TWI_Write( (LCD_DIR << 1) | 0);
 188:	8e e4       	ldi	r24, 0x4E	; 78
 18a:	0e 94 9f 00 	call	0x13e	; 0x13e <TWI_Write>
	TWI_Write(data);
 18e:	8c 2f       	mov	r24, r28
 190:	0e 94 9f 00 	call	0x13e	; 0x13e <TWI_Write>
	TWI_Stop();
 194:	0e 94 97 00 	call	0x12e	; 0x12e <TWI_Stop>
	
}
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <_write_nibble>:



void _write_nibble(uint8_t nibble){
	if( (nibble & 0x01) == 0) word &= ~(1<<_LCD_D4); else word |= (1<<_LCD_D4);
 19c:	80 fd       	sbrc	r24, 0
 19e:	06 c0       	rjmp	.+12     	; 0x1ac <_write_nibble+0x10>
 1a0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <word>
 1a4:	9f 7e       	andi	r25, 0xEF	; 239
 1a6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <word>
 1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <_write_nibble+0x1a>
 1ac:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <word>
 1b0:	90 61       	ori	r25, 0x10	; 16
 1b2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <word>
	if( (nibble & 0x02) == 0) word &= ~(1<<_LCD_D5); else word |= (1<<_LCD_D5);
 1b6:	81 fd       	sbrc	r24, 1
 1b8:	06 c0       	rjmp	.+12     	; 0x1c6 <_write_nibble+0x2a>
 1ba:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <word>
 1be:	9f 7d       	andi	r25, 0xDF	; 223
 1c0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <word>
 1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <_write_nibble+0x34>
 1c6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <word>
 1ca:	90 62       	ori	r25, 0x20	; 32
 1cc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <word>
	if( (nibble & 0x04) == 0) word &= ~(1<<_LCD_D6); else word |= (1<<_LCD_D6);
 1d0:	82 fd       	sbrc	r24, 2
 1d2:	06 c0       	rjmp	.+12     	; 0x1e0 <_write_nibble+0x44>
 1d4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <word>
 1d8:	9f 7b       	andi	r25, 0xBF	; 191
 1da:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <word>
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <_write_nibble+0x4e>
 1e0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <word>
 1e4:	90 64       	ori	r25, 0x40	; 64
 1e6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <word>
	if( (nibble & 0x08) == 0) word &= ~(1<<_LCD_D7); else word |= (1<<_LCD_D7);
 1ea:	83 fd       	sbrc	r24, 3
 1ec:	06 c0       	rjmp	.+12     	; 0x1fa <_write_nibble+0x5e>
 1ee:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <word>
 1f2:	8f 77       	andi	r24, 0x7F	; 127
 1f4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <word>
 1f8:	05 c0       	rjmp	.+10     	; 0x204 <_write_nibble+0x68>
 1fa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <word>
 1fe:	80 68       	ori	r24, 0x80	; 128
 200:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <word>
	
	word &= ~(1<<_LCD_EN); PCF_Wr(word);
 204:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <word>
 208:	8b 7f       	andi	r24, 0xFB	; 251
 20a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <word>
 20e:	0e 94 b8 00 	call	0x170	; 0x170 <PCF_Wr>
	word |=  (1<<_LCD_EN); PCF_Wr(word);
 212:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <word>
 216:	84 60       	ori	r24, 0x04	; 4
 218:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <word>
 21c:	0e 94 b8 00 	call	0x170	; 0x170 <PCF_Wr>
	word &= ~(1<<_LCD_EN); PCF_Wr(word);
 220:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <word>
 224:	8b 7f       	andi	r24, 0xFB	; 251
 226:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <word>
 22a:	0e 94 b8 00 	call	0x170	; 0x170 <PCF_Wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22e:	87 e5       	ldi	r24, 0x57	; 87
 230:	92 e0       	ldi	r25, 0x02	; 2
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <_write_nibble+0x96>
 236:	00 c0       	rjmp	.+0      	; 0x238 <_write_nibble+0x9c>
 238:	00 00       	nop
 23a:	08 95       	ret

0000023c <_send_byte>:
	
	_delay_us(300);
}

void  _send_byte(uint8_t value, uint8_t mode){
 23c:	cf 93       	push	r28
 23e:	c8 2f       	mov	r28, r24
	
	switch(mode){
 240:	66 23       	and	r22, r22
 242:	19 f0       	breq	.+6      	; 0x24a <_send_byte+0xe>
 244:	61 30       	cpi	r22, 0x01	; 1
 246:	39 f0       	breq	.+14     	; 0x256 <_send_byte+0x1a>
 248:	0b c0       	rjmp	.+22     	; 0x260 <_send_byte+0x24>
		case _COMMAND_: word &= ~(1<<_LCD_RS); break;
 24a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <word>
 24e:	8e 7f       	andi	r24, 0xFE	; 254
 250:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <word>
 254:	05 c0       	rjmp	.+10     	; 0x260 <_send_byte+0x24>
		case _DATA_:    word |=  (1<<_LCD_RS); break;
 256:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <word>
 25a:	81 60       	ori	r24, 0x01	; 1
 25c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <word>
	}
	_write_nibble(value>>4);
 260:	8c 2f       	mov	r24, r28
 262:	82 95       	swap	r24
 264:	8f 70       	andi	r24, 0x0F	; 15
 266:	0e 94 ce 00 	call	0x19c	; 0x19c <_write_nibble>
	_write_nibble(value&0x0F);
 26a:	8c 2f       	mov	r24, r28
 26c:	8f 70       	andi	r24, 0x0F	; 15
 26e:	0e 94 ce 00 	call	0x19c	; 0x19c <_write_nibble>
}
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <i2c_lcd_write>:

void i2c_lcd_write(uint8_t letra){
	_send_byte(letra,_DATA_);
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	0e 94 1e 01 	call	0x23c	; 0x23c <_send_byte>
 27c:	08 95       	ret

0000027e <i2c_lcd_command>:
}
void i2c_lcd_command(uint8_t cmd){
	_send_byte(cmd,_COMMAND_);
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	0e 94 1e 01 	call	0x23c	; 0x23c <_send_byte>
 284:	08 95       	ret

00000286 <i2c_lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 286:	8f e2       	ldi	r24, 0x2F	; 47
 288:	95 e7       	ldi	r25, 0x75	; 117
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <i2c_lcd_init+0x4>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <i2c_lcd_init+0xa>
 290:	00 00       	nop
void i2c_lcd_init(){

	
	
	_delay_ms(15);
	_write_nibble(0x03);
 292:	83 e0       	ldi	r24, 0x03	; 3
 294:	0e 94 ce 00 	call	0x19c	; 0x19c <_write_nibble>
 298:	8f e0       	ldi	r24, 0x0F	; 15
 29a:	97 e2       	ldi	r25, 0x27	; 39
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <i2c_lcd_init+0x16>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <i2c_lcd_init+0x1c>
 2a2:	00 00       	nop
	_delay_ms(5);
	_write_nibble(0x03);
 2a4:	83 e0       	ldi	r24, 0x03	; 3
 2a6:	0e 94 ce 00 	call	0x19c	; 0x19c <_write_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2aa:	87 ec       	ldi	r24, 0xC7	; 199
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <i2c_lcd_init+0x28>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <i2c_lcd_init+0x2e>
 2b4:	00 00       	nop
	_delay_us(100);
	_write_nibble(0x03);
 2b6:	83 e0       	ldi	r24, 0x03	; 3
 2b8:	0e 94 ce 00 	call	0x19c	; 0x19c <_write_nibble>
	_write_nibble(0x02);
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	0e 94 ce 00 	call	0x19c	; 0x19c <_write_nibble>
	
	i2c_lcd_command( _LCD_FUNTIONSET | _LCD_4BITMODE | _LCD_2LINE | _LCD_5x8DOTS );
 2c2:	88 e2       	ldi	r24, 0x28	; 40
 2c4:	0e 94 3f 01 	call	0x27e	; 0x27e <i2c_lcd_command>
 2c8:	92 e6       	ldi	r25, 0x62	; 98
 2ca:	9a 95       	dec	r25
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <i2c_lcd_init+0x44>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <i2c_lcd_init+0x4a>
	_delay_us(37);
	
	_lcd_params = _LCD_DISPLAY_ON | _LCD_CURSOR_ON | _LCD_BLINK_ON;
 2d0:	87 e0       	ldi	r24, 0x07	; 7
 2d2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	i2c_lcd_command(_LCD_DISPLAYCONTROL | _lcd_params);
 2d6:	8f e0       	ldi	r24, 0x0F	; 15
 2d8:	0e 94 3f 01 	call	0x27e	; 0x27e <i2c_lcd_command>
 2dc:	82 e6       	ldi	r24, 0x62	; 98
 2de:	8a 95       	dec	r24
 2e0:	f1 f7       	brne	.-4      	; 0x2de <i2c_lcd_init+0x58>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <i2c_lcd_init+0x5e>
	_delay_us(37);
	
	i2c_lcd_command(_LCD_CLEARDISPLAY);
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 3f 01 	call	0x27e	; 0x27e <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ea:	8f e9       	ldi	r24, 0x9F	; 159
 2ec:	9f e0       	ldi	r25, 0x0F	; 15
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <i2c_lcd_init+0x68>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <i2c_lcd_init+0x6e>
 2f4:	00 00       	nop
 2f6:	08 95       	ret

000002f8 <i2c_lcd_puts>:
	_delay_ms(2);
}



void i2c_lcd_puts(char *str){
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	ec 01       	movw	r28, r24
	while(*str){
 2fe:	03 c0       	rjmp	.+6      	; 0x306 <i2c_lcd_puts+0xe>
		i2c_lcd_write(*str);
 300:	0e 94 3b 01 	call	0x276	; 0x276 <i2c_lcd_write>
		str++;
 304:	21 96       	adiw	r28, 0x01	; 1
}



void i2c_lcd_puts(char *str){
	while(*str){
 306:	88 81       	ld	r24, Y
 308:	81 11       	cpse	r24, r1
 30a:	fa cf       	rjmp	.-12     	; 0x300 <i2c_lcd_puts+0x8>
		i2c_lcd_write(*str);
		str++;
	}
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <_exit>:
 312:	f8 94       	cli

00000314 <__stop_program>:
 314:	ff cf       	rjmp	.-2      	; 0x314 <__stop_program>
