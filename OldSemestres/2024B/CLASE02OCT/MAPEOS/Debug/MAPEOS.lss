
MAPEOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000001f2  00000266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000caf  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000aba  00000000  00000000  0000100f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d9  00000000  00000000  00001ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a7  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e3  00000000  00000000  000025ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000026e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 ef       	ldi	r30, 0xF2	; 242
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 32       	cpi	r26, 0x20	; 32
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e2       	ldi	r26, 0x20	; 32
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a0 32       	cpi	r26, 0x20	; 32
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  ea:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <main>:


char  statusBTNA, statusBTNB, statusBTNC;
int main(void)
{
	UART1_Init(9600);
  f2:	60 e8       	ldi	r22, 0x80	; 128
  f4:	75 e2       	ldi	r23, 0x25	; 37
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 8d 00 	call	0x11a	; 0x11a <UART1_Init>
    while (1) 
    {
		UART1_Transmit_Text("ING. ELECTRONICA - UCEVA :D  \r\n");
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	0e 94 c8 00 	call	0x190	; 0x190 <UART1_Transmit_Text>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	83 ed       	ldi	r24, 0xD3	; 211
 10a:	90 e3       	ldi	r25, 0x30	; 48
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x1a>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x24>
 116:	00 00       	nop
 118:	f2 cf       	rjmp	.-28     	; 0xfe <main+0xc>

0000011a <UART1_Init>:

static char _uart_buffer_[50];

void UART1_Init(unsigned long baudrate){
	
	unsigned int regUBRR = F_CPU/(baudrate*16) - 1;
 11a:	dc 01       	movw	r26, r24
 11c:	cb 01       	movw	r24, r22
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	aa 1f       	adc	r26, r26
 124:	bb 1f       	adc	r27, r27
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	aa 1f       	adc	r26, r26
 12c:	bb 1f       	adc	r27, r27
 12e:	9c 01       	movw	r18, r24
 130:	ad 01       	movw	r20, r26
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	44 1f       	adc	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	22 0f       	add	r18, r18
 13c:	33 1f       	adc	r19, r19
 13e:	44 1f       	adc	r20, r20
 140:	55 1f       	adc	r21, r21
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	74 e2       	ldi	r23, 0x24	; 36
 146:	84 ef       	ldi	r24, 0xF4	; 244
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__udivmodsi4>
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	31 09       	sbc	r19, r1
	
	// Cargamos los valores de BAUDRATE en los registros UBRR;
	UBRR0H = (unsigned char) (regUBRR>>8);
 152:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) (regUBRR>>0);
 156:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//Configuramos modo de operacion de 8 bits de datos;
	UCSR0B &= ~(1<<UCSZ00);
 15a:	a1 ec       	ldi	r26, 0xC1	; 193
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	8c 91       	ld	r24, X
 160:	8d 7f       	andi	r24, 0xFD	; 253
 162:	8c 93       	st	X, r24
	UCSR0C |=  (1<<UCSZ01)|(1<<UCSZ00);
 164:	e2 ec       	ldi	r30, 0xC2	; 194
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	86 60       	ori	r24, 0x06	; 6
 16c:	80 83       	st	Z, r24
	
	//Sin paridad;
	UCSR0C &= ~( (1<<UPM01)|(1<<UPM00) );
 16e:	80 81       	ld	r24, Z
 170:	8f 7c       	andi	r24, 0xCF	; 207
 172:	80 83       	st	Z, r24
	
	//Modo asincrono;
	UCSR0C &= ~( (1<<UMSEL01)|(1<<UMSEL00) );
 174:	80 81       	ld	r24, Z
 176:	8f 73       	andi	r24, 0x3F	; 63
 178:	80 83       	st	Z, r24
	
	//Habilitamos los pines Tx Rx;
	UCSR0B |= ( (1<<RXEN0)|(1<<TXEN0) );
 17a:	8c 91       	ld	r24, X
 17c:	88 61       	ori	r24, 0x18	; 24
 17e:	8c 93       	st	X, r24
 180:	08 95       	ret

00000182 <UART1_Transmit_char>:
	
}

void UART1_Transmit_char(unsigned char data){
	// Espera a que el registro de transmisión esté vacío
	while (!(UCSR0A & (1 << UDRE0)));
 182:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 186:	95 ff       	sbrs	r25, 5
 188:	fc cf       	rjmp	.-8      	; 0x182 <UART1_Transmit_char>
	// Carga el dato en el registro de transmisión
	UDR0 = data;
 18a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 18e:	08 95       	ret

00000190 <UART1_Transmit_Text>:
}

void UART1_Transmit_Text(char *texto){
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	ec 01       	movw	r28, r24
	while(*texto){
 196:	03 c0       	rjmp	.+6      	; 0x19e <UART1_Transmit_Text+0xe>
		UART1_Transmit_char(*texto);
 198:	0e 94 c1 00 	call	0x182	; 0x182 <UART1_Transmit_char>
		texto++;
 19c:	21 96       	adiw	r28, 0x01	; 1
	// Carga el dato en el registro de transmisión
	UDR0 = data;
}

void UART1_Transmit_Text(char *texto){
	while(*texto){
 19e:	88 81       	ld	r24, Y
 1a0:	81 11       	cpse	r24, r1
 1a2:	fa cf       	rjmp	.-12     	; 0x198 <UART1_Transmit_Text+0x8>
		UART1_Transmit_char(*texto);
		texto++;
	}
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <__udivmodsi4>:
 1aa:	a1 e2       	ldi	r26, 0x21	; 33
 1ac:	1a 2e       	mov	r1, r26
 1ae:	aa 1b       	sub	r26, r26
 1b0:	bb 1b       	sub	r27, r27
 1b2:	fd 01       	movw	r30, r26
 1b4:	0d c0       	rjmp	.+26     	; 0x1d0 <__udivmodsi4_ep>

000001b6 <__udivmodsi4_loop>:
 1b6:	aa 1f       	adc	r26, r26
 1b8:	bb 1f       	adc	r27, r27
 1ba:	ee 1f       	adc	r30, r30
 1bc:	ff 1f       	adc	r31, r31
 1be:	a2 17       	cp	r26, r18
 1c0:	b3 07       	cpc	r27, r19
 1c2:	e4 07       	cpc	r30, r20
 1c4:	f5 07       	cpc	r31, r21
 1c6:	20 f0       	brcs	.+8      	; 0x1d0 <__udivmodsi4_ep>
 1c8:	a2 1b       	sub	r26, r18
 1ca:	b3 0b       	sbc	r27, r19
 1cc:	e4 0b       	sbc	r30, r20
 1ce:	f5 0b       	sbc	r31, r21

000001d0 <__udivmodsi4_ep>:
 1d0:	66 1f       	adc	r22, r22
 1d2:	77 1f       	adc	r23, r23
 1d4:	88 1f       	adc	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	1a 94       	dec	r1
 1da:	69 f7       	brne	.-38     	; 0x1b6 <__udivmodsi4_loop>
 1dc:	60 95       	com	r22
 1de:	70 95       	com	r23
 1e0:	80 95       	com	r24
 1e2:	90 95       	com	r25
 1e4:	9b 01       	movw	r18, r22
 1e6:	ac 01       	movw	r20, r24
 1e8:	bd 01       	movw	r22, r26
 1ea:	cf 01       	movw	r24, r30
 1ec:	08 95       	ret

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
