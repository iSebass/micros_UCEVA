
contador4bitsUP_DOWN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000016a  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a36  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000946  00000000  00000000  00000ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000304  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000018f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d5  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001de9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea e6       	ldi	r30, 0x6A	; 106
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 30       	cpi	r26, 0x02	; 2
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a2 e0       	ldi	r26, 0x02	; 2
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a2 30       	cpi	r26, 0x02	; 2
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  ea:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <main>:
char statusBtn;


int main(void)
{
    DDRD |=   (  (1<<DDRD0)|(1<<DDRD1)|(1<<DDRD2)|(1<<DDRD3)  ); 
  f2:	8a b1       	in	r24, 0x0a	; 10
  f4:	8f 60       	ori	r24, 0x0F	; 15
  f6:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~ (1<<DDRD4);
  f8:	8a b1       	in	r24, 0x0a	; 10
  fa:	8f 7e       	andi	r24, 0xEF	; 239
  fc:	8a b9       	out	0x0a, r24	; 10
	
    while (1) {
		
		if(get_Btn() == 0){
  fe:	4c 99       	sbic	0x09, 4	; 9
 100:	12 c0       	rjmp	.+36     	; 0x126 <main+0x34>
			PORTD = contador;
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 106:	8b b9       	out	0x0b, r24	; 11
			contador++;
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if(contador>15) contador=0;
 11a:	40 97       	sbiw	r24, 0x10	; 16
 11c:	24 f0       	brlt	.+8      	; 0x126 <main+0x34>
 11e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 122:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		if(get_Btn() != 0){
 126:	4c 9b       	sbis	0x09, 4	; 9
 128:	14 c0       	rjmp	.+40     	; 0x152 <main+0x60>
			PORTD = contador;
 12a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12e:	8b b9       	out	0x0b, r24	; 11
			contador--;
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 134:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if(contador<0) contador=15;
 142:	99 23       	and	r25, r25
 144:	34 f4       	brge	.+12     	; 0x152 <main+0x60>
 146:	8f e0       	ldi	r24, 0x0F	; 15
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	89 e6       	ldi	r24, 0x69	; 105
 156:	98 e1       	ldi	r25, 0x18	; 24
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x66>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x70>
 162:	00 00       	nop
 164:	cc cf       	rjmp	.-104    	; 0xfe <main+0xc>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
