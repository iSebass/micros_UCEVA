
TWI_LCD_LIB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000002b0  00000344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800118  00800118  0000035c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001669  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b52  00000000  00000000  00001b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000089c  00000000  00000000  000026bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  00002f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e3  00000000  00000000  000031c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000923  00000000  00000000  000038a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000041c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 eb       	ldi	r30, 0xB0	; 176
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a8 31       	cpi	r26, 0x18	; 24
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a8 e1       	ldi	r26, 0x18	; 24
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a9 31       	cpi	r26, 0x19	; 25
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  ea:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <main>:
#include "TWI/TWI_LIB.h"
#include "TWI_LCD/TWI_LCD.h"

int main(void){
    
	TWI_Init();
  f2:	0e 94 8c 00 	call	0x118	; 0x118 <TWI_Init>
	
	TWI_LCD_Init();
  f6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <TWI_LCD_Init>
	TWI_LCD_Puts("UCEVA");
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	0e 94 36 01 	call	0x26c	; 0x26c <TWI_LCD_Puts>
	TWI_LCD_Set_Cursor(2,1);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	0e 94 43 01 	call	0x286	; 0x286 <TWI_LCD_Set_Cursor>
	TWI_LCD_Puts("Ingenierias");
 10a:	87 e0       	ldi	r24, 0x07	; 7
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 36 01 	call	0x26c	; 0x26c <TWI_LCD_Puts>
	
	TWI_LCD_Backlight_Off();
 112:	0e 94 4e 01 	call	0x29c	; 0x29c <TWI_LCD_Backlight_Off>
 116:	ff cf       	rjmp	.-2      	; 0x116 <main+0x24>

00000118 <TWI_Init>:
	
	// TMSR0 = 0 -> PREESCALER = 1
	// TMSR0 = 1 -> PREESCALER = 4
	// TMSR0 = 2 -> PREESCALER = 16
	// TMSR0 = 3 -> PREESCALER = 64
	TWSR0 = 0; 
 118:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
				|   Fosc      |   
		TWBRn = | ______ - 16 | / 2
				|  Fscl		  |	
                
	*/
	TWBR0 = ((F_CPU/SCL_CLOCK)-16)/2; 
 11c:	88 e4       	ldi	r24, 0x48	; 72
 11e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	
	// Habilitación del TWI;
	TWCR0 = (1<<TWEN);           
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 128:	08 95       	ret

0000012a <TWI_Start>:
}

void TWI_Start(void){
	TWCR0 = (1<<TWINT)|	(1<<TWSTA)|(1<<TWEN); //enviamos la instruccion de start condition ofrecida por el fabricante
 12a:	84 ea       	ldi	r24, 0xA4	; 164
 12c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR0 &(1<<TWINT))); // Esperamos a que se genere la señal de start
 130:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 134:	88 23       	and	r24, r24
 136:	e4 f7       	brge	.-8      	; 0x130 <TWI_Start+0x6>
}
 138:	08 95       	ret

0000013a <TWI_Stop>:

void TWI_Stop(void){

	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 13a:	84 e9       	ldi	r24, 0x94	; 148
 13c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR0 & (1<<TWSTO));
 140:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 144:	84 fd       	sbrc	r24, 4
 146:	fc cf       	rjmp	.-8      	; 0x140 <TWI_Stop+0x6>
}
 148:	08 95       	ret

0000014a <TWI_Write>:

void TWI_Write(uint8_t data){
	// Escritura de datos en el bus TWI
	TWDR0 = data;
 14a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR0 = (1<<TWINT)|(1<<TWEN);
 14e:	84 e8       	ldi	r24, 0x84	; 132
 150:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// Esperar a que se complete la operación
	while (!(TWCR0 & (1<<TWINT)));
 154:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 158:	88 23       	and	r24, r24
 15a:	e4 f7       	brge	.-8      	; 0x154 <TWI_Write+0xa>
}
 15c:	08 95       	ret

0000015e <PCF_Wr>:
/*FUNCIONES DE LA LCD*/


void TWI_LCD_Backlight_On(void){
	statusLED=LED_LCD_ON;
	sendCMD(_LCD_DISPLAYCONTROL | paramsLCD);
 15e:	cf 93       	push	r28
 160:	c8 2f       	mov	r28, r24
 162:	0e 94 95 00 	call	0x12a	; 0x12a <TWI_Start>
 166:	8e e7       	ldi	r24, 0x7E	; 126
 168:	0e 94 a5 00 	call	0x14a	; 0x14a <TWI_Write>
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	8c 2b       	or	r24, r28
 172:	0e 94 a5 00 	call	0x14a	; 0x14a <TWI_Write>
 176:	0e 94 9d 00 	call	0x13a	; 0x13a <TWI_Stop>
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <loadPCF>:
 17e:	cf 93       	push	r28
 180:	c8 2f       	mov	r28, r24
 182:	66 23       	and	r22, r22
 184:	21 f0       	breq	.+8      	; 0x18e <loadPCF+0x10>
 186:	61 30       	cpi	r22, 0x01	; 1
 188:	19 f4       	brne	.+6      	; 0x190 <loadPCF+0x12>
 18a:	c1 60       	ori	r28, 0x01	; 1
 18c:	01 c0       	rjmp	.+2      	; 0x190 <loadPCF+0x12>
 18e:	ce 7f       	andi	r28, 0xFE	; 254
 190:	8c 2f       	mov	r24, r28
 192:	0e 94 af 00 	call	0x15e	; 0x15e <PCF_Wr>
 196:	8c 2f       	mov	r24, r28
 198:	84 60       	ori	r24, 0x04	; 4
 19a:	0e 94 af 00 	call	0x15e	; 0x15e <PCF_Wr>
 19e:	8c 2f       	mov	r24, r28
 1a0:	8b 7f       	andi	r24, 0xFB	; 251
 1a2:	0e 94 af 00 	call	0x15e	; 0x15e <PCF_Wr>
 1a6:	80 ea       	ldi	r24, 0xA0	; 160
 1a8:	8a 95       	dec	r24
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <loadPCF+0x2a>
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <sendDATA>:
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	90 e1       	ldi	r25, 0x10	; 16
 1b6:	89 9f       	mul	r24, r25
 1b8:	e0 01       	movw	r28, r0
 1ba:	11 24       	eor	r1, r1
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	80 7f       	andi	r24, 0xF0	; 240
 1c0:	0e 94 bf 00 	call	0x17e	; 0x17e <loadPCF>
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	8c 2f       	mov	r24, r28
 1c8:	0e 94 bf 00 	call	0x17e	; 0x17e <loadPCF>
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <sendCMD>:
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	90 e1       	ldi	r25, 0x10	; 16
 1d8:	89 9f       	mul	r24, r25
 1da:	e0 01       	movw	r28, r0
 1dc:	11 24       	eor	r1, r1
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	80 7f       	andi	r24, 0xF0	; 240
 1e2:	0e 94 bf 00 	call	0x17e	; 0x17e <loadPCF>
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	8c 2f       	mov	r24, r28
 1ea:	0e 94 bf 00 	call	0x17e	; 0x17e <loadPCF>
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <TWI_LCD_Init>:
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 af 00 	call	0x15e	; 0x15e <PCF_Wr>
 1fa:	8f e5       	ldi	r24, 0x5F	; 95
 1fc:	9a ee       	ldi	r25, 0xEA	; 234
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <TWI_LCD_Init+0xa>
 202:	00 c0       	rjmp	.+0      	; 0x204 <TWI_LCD_Init+0x10>
 204:	00 00       	nop
 206:	83 e0       	ldi	r24, 0x03	; 3
 208:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendCMD>
 20c:	8f e0       	ldi	r24, 0x0F	; 15
 20e:	90 e4       	ldi	r25, 0x40	; 64
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <TWI_LCD_Init+0x1c>
 214:	00 c0       	rjmp	.+0      	; 0x216 <TWI_LCD_Init+0x22>
 216:	00 00       	nop
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendCMD>
 21e:	8f e8       	ldi	r24, 0x8F	; 143
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <TWI_LCD_Init+0x2e>
 226:	00 c0       	rjmp	.+0      	; 0x228 <TWI_LCD_Init+0x34>
 228:	00 00       	nop
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendCMD>
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendCMD>
 236:	88 e2       	ldi	r24, 0x28	; 40
 238:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendCMD>
 23c:	95 ec       	ldi	r25, 0xC5	; 197
 23e:	9a 95       	dec	r25
 240:	f1 f7       	brne	.-4      	; 0x23e <TWI_LCD_Init+0x4a>
 242:	00 00       	nop
 244:	87 e0       	ldi	r24, 0x07	; 7
 246:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 24a:	8f e0       	ldi	r24, 0x0F	; 15
 24c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendCMD>
 250:	85 ec       	ldi	r24, 0xC5	; 197
 252:	8a 95       	dec	r24
 254:	f1 f7       	brne	.-4      	; 0x252 <TWI_LCD_Init+0x5e>
 256:	00 00       	nop
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendCMD>
 25e:	8f e3       	ldi	r24, 0x3F	; 63
 260:	9f e1       	ldi	r25, 0x1F	; 31
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <TWI_LCD_Init+0x6e>
 266:	00 c0       	rjmp	.+0      	; 0x268 <TWI_LCD_Init+0x74>
 268:	00 00       	nop
 26a:	08 95       	ret

0000026c <TWI_LCD_Puts>:
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ec 01       	movw	r28, r24
 272:	03 c0       	rjmp	.+6      	; 0x27a <TWI_LCD_Puts+0xe>
 274:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <sendDATA>
 278:	21 96       	adiw	r28, 0x01	; 1
 27a:	88 81       	ld	r24, Y
 27c:	81 11       	cpse	r24, r1
 27e:	fa cf       	rjmp	.-12     	; 0x274 <TWI_LCD_Puts+0x8>
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <TWI_LCD_Set_Cursor>:
 286:	e8 2f       	mov	r30, r24
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	ee 5e       	subi	r30, 0xEE	; 238
 28c:	fe 4f       	sbci	r31, 0xFE	; 254
 28e:	80 81       	ld	r24, Z
 290:	86 0f       	add	r24, r22
 292:	81 50       	subi	r24, 0x01	; 1
 294:	80 68       	ori	r24, 0x80	; 128
 296:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendCMD>
 29a:	08 95       	ret

0000029c <TWI_LCD_Backlight_Off>:
	
}
void TWI_LCD_Backlight_Off(void){
	statusLED=LED_LCD_OFF;
 29c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	sendCMD(_LCD_DISPLAYCONTROL | paramsLCD);
 2a0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 2a4:	88 60       	ori	r24, 0x08	; 8
 2a6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendCMD>
 2aa:	08 95       	ret

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
