
JUST_ONE_WIRE_P2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000afe  00000b92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000afe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  0080011c  0080011c  00000bae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000126c  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c76  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008bf  00000000  00000000  00002be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  000034a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ae  00000000  00000000  00003654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000843  00000000  00000000  00003d02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004545  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee ef       	ldi	r30, 0xFE	; 254
  c8:	fa e0       	ldi	r31, 0x0A	; 10
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 31       	cpi	r26, 0x1C	; 28
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ac e1       	ldi	r26, 0x1C	; 28
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	aa 36       	cpi	r26, 0x6A	; 106
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  ea:	0c 94 7d 05 	jmp	0xafa	; 0xafa <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <main>:
int ndevices;


int main(void){
    
	UART1_Init(9600);
  f2:	60 e8       	ldi	r22, 0x80	; 128
  f4:	75 e2       	ldi	r23, 0x25	; 37
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 07 02 	call	0x40e	; 0x40e <UART1_Init>
	
	ndevices=OWSearch();
  fe:	0e 94 3d 01 	call	0x27a	; 0x27a <OWSearch>
 102:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <ndevices+0x1>
 106:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <ndevices>
	
	UART1_Transmit_Text("ROMS ENCONTRADOS: \r\n");
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 42 02 	call	0x484	; 0x484 <UART1_Transmit_Text>
	
	for(uint8_t j=0; j<MAX_DEVICES; j++){
 112:	d0 e0       	ldi	r29, 0x00	; 0
 114:	23 c0       	rjmp	.+70     	; 0x15c <main+0x6a>
	
		for(uint8_t i=0; i<=7; i++){
			UART1_Transmit_Printf("%02X ", ROM_NO[j][i]);
 116:	ed 2f       	mov	r30, r29
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	ee 0f       	add	r30, r30
 11c:	ff 1f       	adc	r31, r31
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	ee 5a       	subi	r30, 0xAE	; 174
 128:	fe 4f       	sbci	r31, 0xFE	; 254
 12a:	ec 0f       	add	r30, r28
 12c:	f1 1d       	adc	r31, r1
 12e:	80 81       	ld	r24, Z
 130:	1f 92       	push	r1
 132:	8f 93       	push	r24
 134:	85 e1       	ldi	r24, 0x15	; 21
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	9f 93       	push	r25
 13a:	8f 93       	push	r24
 13c:	0e 94 4f 02 	call	0x49e	; 0x49e <UART1_Transmit_Printf>
	
	UART1_Transmit_Text("ROMS ENCONTRADOS: \r\n");
	
	for(uint8_t j=0; j<MAX_DEVICES; j++){
	
		for(uint8_t i=0; i<=7; i++){
 140:	cf 5f       	subi	r28, 0xFF	; 255
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	0f 90       	pop	r0
 14a:	01 c0       	rjmp	.+2      	; 0x14e <main+0x5c>
 14c:	c0 e0       	ldi	r28, 0x00	; 0
 14e:	c8 30       	cpi	r28, 0x08	; 8
 150:	10 f3       	brcs	.-60     	; 0x116 <main+0x24>
			UART1_Transmit_Printf("%02X ", ROM_NO[j][i]);
		}
		UART1_Transmit_Text("\r\n");
 152:	82 e1       	ldi	r24, 0x12	; 18
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 42 02 	call	0x484	; 0x484 <UART1_Transmit_Text>
	
	ndevices=OWSearch();
	
	UART1_Transmit_Text("ROMS ENCONTRADOS: \r\n");
	
	for(uint8_t j=0; j<MAX_DEVICES; j++){
 15a:	df 5f       	subi	r29, 0xFF	; 255
 15c:	d3 30       	cpi	r29, 0x03	; 3
 15e:	b0 f3       	brcs	.-20     	; 0x14c <main+0x5a>
 160:	ff cf       	rjmp	.-2      	; 0x160 <main+0x6e>

00000162 <OWReset>:
int OWReset() {
	// Implementación específica para la plataform;
	// Aquí puedes añadir la lógica de hardware necesaria para tu microcontrolador.;
	// Debe devolver TRUE si hay presencia de dispositivos en el bus;
	uint16_t timeout=0;
	PORT_MODE_OUTPUT;  //CONFIGRUAR EL PIN DQ COMO SALIDA
 162:	84 b1       	in	r24, 0x04	; 4
 164:	81 60       	ori	r24, 0x01	; 1
 166:	84 b9       	out	0x04, r24	; 4
	SET_BUS_LOW;       //ESTABLECER EL ESTADO LOGICO EN BAJO
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	8e 7f       	andi	r24, 0xFE	; 254
 16c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	8f eb       	ldi	r24, 0xBF	; 191
 170:	93 e0       	ldi	r25, 0x03	; 3
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <OWReset+0x10>
 176:	00 c0       	rjmp	.+0      	; 0x178 <OWReset+0x16>
 178:	00 00       	nop
	_delay_us(480);
	SET_BUS_HIGH;      //ESTABLECER EL ESTADO LOGICO EN ALTO
 17a:	85 b1       	in	r24, 0x05	; 5
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	85 b9       	out	0x05, r24	; 5
	PORT_MODE_INPUT;   //CONFIGRUAR EL PIN DQ COMO ENTRADA
 180:	84 b1       	in	r24, 0x04	; 4
 182:	8e 7f       	andi	r24, 0xFE	; 254
 184:	84 b9       	out	0x04, r24	; 4
 186:	90 ea       	ldi	r25, 0xA0	; 160
 188:	9a 95       	dec	r25
 18a:	f1 f7       	brne	.-4      	; 0x188 <OWReset+0x26>
// Método para hacer un reset en el bus 1-Wire;
int OWReset() {
	// Implementación específica para la plataform;
	// Aquí puedes añadir la lógica de hardware necesaria para tu microcontrolador.;
	// Debe devolver TRUE si hay presencia de dispositivos en el bus;
	uint16_t timeout=0;
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	09 c0       	rjmp	.+18     	; 0x1a4 <OWReset+0x42>
	SET_BUS_HIGH;      //ESTABLECER EL ESTADO LOGICO EN ALTO
	PORT_MODE_INPUT;   //CONFIGRUAR EL PIN DQ COMO ENTRADA
	_delay_us(60);

	while( READ_BUS_STATUS ){ //ESPERA EL PULSO DE PRESENECIA
		timeout++;
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	22 e0       	ldi	r18, 0x02	; 2
 196:	2a 95       	dec	r18
 198:	f1 f7       	brne	.-4      	; 0x196 <OWReset+0x34>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <OWReset+0x3a>
		_delay_us(1);
		if(timeout>=480){
 19c:	80 3e       	cpi	r24, 0xE0	; 224
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	92 07       	cpc	r25, r18
 1a2:	58 f4       	brcc	.+22     	; 0x1ba <OWReset+0x58>
	_delay_us(480);
	SET_BUS_HIGH;      //ESTABLECER EL ESTADO LOGICO EN ALTO
	PORT_MODE_INPUT;   //CONFIGRUAR EL PIN DQ COMO ENTRADA
	_delay_us(60);

	while( READ_BUS_STATUS ){ //ESPERA EL PULSO DE PRESENECIA
 1a4:	18 99       	sbic	0x03, 0	; 3
 1a6:	f5 cf       	rjmp	.-22     	; 0x192 <OWReset+0x30>
 1a8:	8f eb       	ldi	r24, 0xBF	; 191
 1aa:	93 e0       	ldi	r25, 0x03	; 3
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <OWReset+0x4a>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <OWReset+0x50>
 1b2:	00 00       	nop
		}
	} 
	_delay_us(480);
	
	
	return TRUE;  // Esta implementación es solo de ejemplo;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	08 95       	ret

	while( READ_BUS_STATUS ){ //ESPERA EL PULSO DE PRESENECIA
		timeout++;
		_delay_us(1);
		if(timeout>=480){
			return FALSE;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
	} 
	_delay_us(480);
	
	
	return TRUE;  // Esta implementación es solo de ejemplo;
}
 1be:	08 95       	ret

000001c0 <OWWriteBit>:
	}
}

// Método para enviar un bit en el bus 1-Wire;
void OWWriteBit(unsigned char bit_value) {
	PORT_MODE_OUTPUT; //CONFIGRUAR EL PIN DQ COMO SALIDA
 1c0:	94 b1       	in	r25, 0x04	; 4
 1c2:	91 60       	ori	r25, 0x01	; 1
 1c4:	94 b9       	out	0x04, r25	; 4
	SET_BUS_LOW;      //ESTABLECER EL ESTADO LOGICO EN BAJO
 1c6:	95 b1       	in	r25, 0x05	; 5
 1c8:	9e 7f       	andi	r25, 0xFE	; 254
 1ca:	95 b9       	out	0x05, r25	; 5
	if (bit_value) {
 1cc:	88 23       	and	r24, r24
 1ce:	59 f0       	breq	.+22     	; 0x1e6 <OWWriteBit+0x26>
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	8a 95       	dec	r24
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <OWWriteBit+0x12>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <OWWriteBit+0x18>
		// Si es un 1, mantén el bus en bajo solo 1-15 microsegundos;
		_delay_us(1);   // Tiempo mínimo en bajo;
		SET_BUS_HIGH;   // Liberar el bus;
 1d8:	85 b1       	in	r24, 0x05	; 5
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	85 b9       	out	0x05, r24	; 5
 1de:	80 ea       	ldi	r24, 0xA0	; 160
 1e0:	8a 95       	dec	r24
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <OWWriteBit+0x20>
 1e4:	08 95       	ret
 1e6:	80 ea       	ldi	r24, 0xA0	; 160
 1e8:	8a 95       	dec	r24
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <OWWriteBit+0x28>
		_delay_us(60);  // Completar el tiempo del slot;
		} else {
		// Si es un 0, mantén el bus en bajo por 60 microsegundos;
		_delay_us(60);  // Tiempo total en bajo para un 0;
		SET_BUS_HIGH;   // Liberar el bus;
 1ec:	85 b1       	in	r24, 0x05	; 5
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	85 b9       	out	0x05, r24	; 5
 1f2:	08 95       	ret

000001f4 <OWWriteByte>:
	
	return TRUE;  // Esta implementación es solo de ejemplo;
}

// Método para enviar un byte en el bus 1-Wire;
void OWWriteByte(unsigned char byte_value) {
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	18 2f       	mov	r17, r24
	for (int i = 0; i < 8; i++) {
 1fc:	c0 e0       	ldi	r28, 0x00	; 0
 1fe:	d0 e0       	ldi	r29, 0x00	; 0
 200:	06 c0       	rjmp	.+12     	; 0x20e <OWWriteByte+0x1a>
		OWWriteBit(byte_value & 0x01);  // Envía el bit menos significativo primero;
 202:	81 2f       	mov	r24, r17
 204:	81 70       	andi	r24, 0x01	; 1
 206:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <OWWriteBit>
		byte_value >>= 1;
 20a:	16 95       	lsr	r17
	return TRUE;  // Esta implementación es solo de ejemplo;
}

// Método para enviar un byte en el bus 1-Wire;
void OWWriteByte(unsigned char byte_value) {
	for (int i = 0; i < 8; i++) {
 20c:	21 96       	adiw	r28, 0x01	; 1
 20e:	c8 30       	cpi	r28, 0x08	; 8
 210:	d1 05       	cpc	r29, r1
 212:	bc f3       	brlt	.-18     	; 0x202 <OWWriteByte+0xe>
		OWWriteBit(byte_value & 0x01);  // Envía el bit menos significativo primero;
		byte_value >>= 1;
	}
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	08 95       	ret

0000021c <OWReadBit>:

// Método para leer un bit del bus 1-Wire;
unsigned char OWReadBit() {
	uint8_t bit = 0;

	PORT_MODE_OUTPUT;  // Configurar el pin DQ como salida;
 21c:	84 b1       	in	r24, 0x04	; 4
 21e:	81 60       	ori	r24, 0x01	; 1
 220:	84 b9       	out	0x04, r24	; 4
	SET_BUS_LOW;       // Establecer el bus en bajo;
 222:	85 b1       	in	r24, 0x05	; 5
 224:	8e 7f       	andi	r24, 0xFE	; 254
 226:	85 b9       	out	0x05, r24	; 5
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <OWReadBit+0xe>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <OWReadBit+0x14>
	_delay_us(1);      // Esperar 1 microsegundo;
	
	PORT_MODE_INPUT;   // Configurar el pin DQ como entrada para leer;
 230:	84 b1       	in	r24, 0x04	; 4
 232:	8e 7f       	andi	r24, 0xFE	; 254
 234:	84 b9       	out	0x04, r24	; 4
 236:	95 e2       	ldi	r25, 0x25	; 37
 238:	9a 95       	dec	r25
 23a:	f1 f7       	brne	.-4      	; 0x238 <OWReadBit+0x1c>
 23c:	00 00       	nop
	_delay_us(14);     // Esperar ~14 microsegundos para estabilizar;

	// Leer el estado del bus;
	if (READ_BUS_STATUS) {
 23e:	18 99       	sbic	0x03, 0	; 3
 240:	02 c0       	rjmp	.+4      	; 0x246 <OWReadBit+0x2a>
	return byte_value;
}

// Método para leer un bit del bus 1-Wire;
unsigned char OWReadBit() {
	uint8_t bit = 0;
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	01 c0       	rjmp	.+2      	; 0x248 <OWReadBit+0x2c>
	PORT_MODE_INPUT;   // Configurar el pin DQ como entrada para leer;
	_delay_us(14);     // Esperar ~14 microsegundos para estabilizar;

	// Leer el estado del bus;
	if (READ_BUS_STATUS) {
		bit = 1;  // Si el bus está en alto, el bit es 1;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	98 e7       	ldi	r25, 0x78	; 120
 24a:	9a 95       	dec	r25
 24c:	f1 f7       	brne	.-4      	; 0x24a <OWReadBit+0x2e>
	}
	
	_delay_us(45);     // Esperar hasta completar el slot de tiempo (~60us total);
	return bit;        // Devolver el bit leído;
}
 24e:	08 95       	ret

00000250 <OWReadByte>:
		SET_BUS_HIGH;   // Liberar el bus;
	}
}

// Método para leer un byte del bus 1-Wire;
unsigned char OWReadByte() {
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
	unsigned char byte_value = 0;
	for (int i = 0; i < 8; i++) {
 256:	c0 e0       	ldi	r28, 0x00	; 0
 258:	d0 e0       	ldi	r29, 0x00	; 0
	}
}

// Método para leer un byte del bus 1-Wire;
unsigned char OWReadByte() {
	unsigned char byte_value = 0;
 25a:	10 e0       	ldi	r17, 0x00	; 0
	for (int i = 0; i < 8; i++) {
 25c:	06 c0       	rjmp	.+12     	; 0x26a <OWReadByte+0x1a>
		byte_value >>= 1;
 25e:	16 95       	lsr	r17
		if (OWReadBit()) {
 260:	0e 94 0e 01 	call	0x21c	; 0x21c <OWReadBit>
 264:	81 11       	cpse	r24, r1
			byte_value |= 0x80;  // Coloca 1 en el bit más significativo si se leyó un 1;
 266:	10 68       	ori	r17, 0x80	; 128
}

// Método para leer un byte del bus 1-Wire;
unsigned char OWReadByte() {
	unsigned char byte_value = 0;
	for (int i = 0; i < 8; i++) {
 268:	21 96       	adiw	r28, 0x01	; 1
 26a:	c8 30       	cpi	r28, 0x08	; 8
 26c:	d1 05       	cpc	r29, r1
 26e:	bc f3       	brlt	.-18     	; 0x25e <OWReadByte+0xe>
		if (OWReadBit()) {
			byte_value |= 0x80;  // Coloca 1 en el bit más significativo si se leyó un 1;
		}
	}
	return byte_value;
}
 270:	81 2f       	mov	r24, r17
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	08 95       	ret

0000027a <OWSearch>:
	_delay_us(45);     // Esperar hasta completar el slot de tiempo (~60us total);
	return bit;        // Devolver el bit leído;
}

// Método principal para el algoritmo de búsqueda;
int OWSearch() {
 27a:	7f 92       	push	r7
 27c:	8f 92       	push	r8
 27e:	9f 92       	push	r9
 280:	af 92       	push	r10
 282:	bf 92       	push	r11
 284:	cf 92       	push	r12
 286:	df 92       	push	r13
 288:	ef 92       	push	r14
 28a:	ff 92       	push	r15
 28c:	0f 93       	push	r16
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
	static int last_discrepancy = 0;
	int pos_discrepancy = 0;
	int device_found = 0;
 294:	81 2c       	mov	r8, r1
 296:	91 2c       	mov	r9, r1
}

// Método principal para el algoritmo de búsqueda;
int OWSearch() {
	static int last_discrepancy = 0;
	int pos_discrepancy = 0;
 298:	a1 2c       	mov	r10, r1
 29a:	b1 2c       	mov	r11, r1
	do {
		maskbits = 0;
		current_discrepancy = 0; // RESETEAR LA DISCREPANCIA ACTUAL EN CADA CICLO DE BÚSQUEDA

		// GENERAMOS RESET Y EN CASO DE NO TENER DISPOSITIVOS EN EL BUS REGRESAMOS -1
		if (!OWReset()) {
 29c:	0e 94 b1 00 	call	0x162	; 0x162 <OWReset>
 2a0:	89 2b       	or	r24, r25
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <OWSearch+0x2c>
 2a4:	9e c0       	rjmp	.+316    	; 0x3e2 <OWSearch+0x168>
			return -1;
		}
		
		// ENVIAMOS EL COMANDO SEARCH_ROM
		OWWriteByte(SEARCH_ROM);
 2a6:	80 ef       	ldi	r24, 0xF0	; 240
 2a8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <OWWriteByte>

		// RECORREMOS LOS 64 BITS (8 BYTES) DEL CÓDIGO ROM
		for (uint8_t currentbyte = 0; currentbyte < 8; currentbyte++) {
 2ac:	71 2c       	mov	r7, r1
	bool search_direction;       // PARA ALMACENAR LA DIRECCIÓN TOMADA EN LA BÚSQUEDA
	
	// COMENZAMOS LA BÚSQUEDA DESDE CERO O DESDE EL ÚLTIMO PUNTO DE DISCREPANCIA
	do {
		maskbits = 0;
		current_discrepancy = 0; // RESETEAR LA DISCREPANCIA ACTUAL EN CADA CICLO DE BÚSQUEDA
 2ae:	c1 2c       	mov	r12, r1
 2b0:	d1 2c       	mov	r13, r1
		
		// ENVIAMOS EL COMANDO SEARCH_ROM
		OWWriteByte(SEARCH_ROM);

		// RECORREMOS LOS 64 BITS (8 BYTES) DEL CÓDIGO ROM
		for (uint8_t currentbyte = 0; currentbyte < 8; currentbyte++) {
 2b2:	82 c0       	rjmp	.+260    	; 0x3b8 <OWSearch+0x13e>
			for (uint8_t currentbit = 0; currentbit < 8; currentbit++) {
				bit  = OWReadByte();  // LEER EL BIT ACTUAL
 2b4:	0e 94 28 01 	call	0x250	; 0x250 <OWReadByte>
 2b8:	c8 2f       	mov	r28, r24
 2ba:	d0 e0       	ldi	r29, 0x00	; 0
				nbit = OWReadByte();  // LEER EL COMPLEMENTO DEL BIT
 2bc:	0e 94 28 01 	call	0x250	; 0x250 <OWReadByte>
 2c0:	90 e0       	ldi	r25, 0x00	; 0

				// SI AMBOS BITS SON 1, NO HAY MÁS DISPOSITIVOS EN EL BUS
				if (bit == 1 && nbit == 1) {
 2c2:	c1 30       	cpi	r28, 0x01	; 1
 2c4:	d1 05       	cpc	r29, r1
 2c6:	21 f4       	brne	.+8      	; 0x2d0 <OWSearch+0x56>
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	91 05       	cpc	r25, r1
 2cc:	09 f4       	brne	.+2      	; 0x2d0 <OWSearch+0x56>
 2ce:	8c c0       	rjmp	.+280    	; 0x3e8 <OWSearch+0x16e>
					return -1;
				}
				
				// SI BIT Y NBIT SON DIFERENTES, SEGUIMOS EL CAMINO QUE CORRESPONDA
				else if (bit != nbit) {
 2d0:	c8 17       	cp	r28, r24
 2d2:	d9 07       	cpc	r29, r25
 2d4:	29 f0       	breq	.+10     	; 0x2e0 <OWSearch+0x66>
					search_direction = bit;  // NO HAY DISCREPANCIA EN ESTE NIVEL, TOMAMOS EL BIT QUE SE LEYÓ
 2d6:	01 e0       	ldi	r16, 0x01	; 1
 2d8:	cd 2b       	or	r28, r29
 2da:	e9 f5       	brne	.+122    	; 0x356 <OWSearch+0xdc>
 2dc:	00 e0       	ldi	r16, 0x00	; 0
 2de:	3b c0       	rjmp	.+118    	; 0x356 <OWSearch+0xdc>
				}
				// SI HAY UNA DISCREPANCIA (BIT == 0 Y NBIT == 0)
				else {
					if (current_discrepancy < last_discrepancy) {
 2e0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 2e4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 2e8:	c8 16       	cp	r12, r24
 2ea:	d9 06       	cpc	r13, r25
 2ec:	c4 f4       	brge	.+48     	; 0x31e <OWSearch+0xa4>
						// SI YA EXPLORAMOS ESTE NIVEL DE DISCREPANCIA, SEGUIMOS LA MISMA RUTA QUE ANTES
						search_direction = ((ROM_NO[device_found][currentbyte] & (1 << currentbit)) != 0);
 2ee:	f4 01       	movw	r30, r8
 2f0:	ee 0f       	add	r30, r30
 2f2:	ff 1f       	adc	r31, r31
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	ee 0f       	add	r30, r30
 2fa:	ff 1f       	adc	r31, r31
 2fc:	ee 5a       	subi	r30, 0xAE	; 174
 2fe:	fe 4f       	sbci	r31, 0xFE	; 254
 300:	e7 0d       	add	r30, r7
 302:	f1 1d       	adc	r31, r1
 304:	80 81       	ld	r24, Z
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	01 2e       	mov	r0, r17
 30a:	02 c0       	rjmp	.+4      	; 0x310 <OWSearch+0x96>
 30c:	95 95       	asr	r25
 30e:	87 95       	ror	r24
 310:	0a 94       	dec	r0
 312:	e2 f7       	brpl	.-8      	; 0x30c <OWSearch+0x92>
 314:	01 e0       	ldi	r16, 0x01	; 1
 316:	80 fd       	sbrc	r24, 0
 318:	12 c0       	rjmp	.+36     	; 0x33e <OWSearch+0xc4>
 31a:	00 e0       	ldi	r16, 0x00	; 0
 31c:	10 c0       	rjmp	.+32     	; 0x33e <OWSearch+0xc4>
						} else if (current_discrepancy == last_discrepancy) {
 31e:	c8 16       	cp	r12, r24
 320:	d9 06       	cpc	r13, r25
 322:	61 f0       	breq	.+24     	; 0x33c <OWSearch+0xc2>
						// SI ESTAMOS EN LA ÚLTIMA DISCREPANCIA CONOCIDA, TOMAMOS LA RUTA DEL 1
						search_direction = 1;
						} else {
						// SI ENCONTRAMOS UNA NUEVA DISCREPANCIA, TOMAMOS LA RUTA DEL 0 POR DEFECTO
						search_direction = 0;
						current_discrepancy = currentbyte * 8 + currentbit; // GUARDAMOS LA POSICIÓN DE LA NUEVA DISCREPANCIA
 324:	c7 2c       	mov	r12, r7
 326:	d1 2c       	mov	r13, r1
 328:	cc 0c       	add	r12, r12
 32a:	dd 1c       	adc	r13, r13
 32c:	cc 0c       	add	r12, r12
 32e:	dd 1c       	adc	r13, r13
 330:	cc 0c       	add	r12, r12
 332:	dd 1c       	adc	r13, r13
 334:	c1 0e       	add	r12, r17
 336:	d1 1c       	adc	r13, r1
						} else if (current_discrepancy == last_discrepancy) {
						// SI ESTAMOS EN LA ÚLTIMA DISCREPANCIA CONOCIDA, TOMAMOS LA RUTA DEL 1
						search_direction = 1;
						} else {
						// SI ENCONTRAMOS UNA NUEVA DISCREPANCIA, TOMAMOS LA RUTA DEL 0 POR DEFECTO
						search_direction = 0;
 338:	00 e0       	ldi	r16, 0x00	; 0
 33a:	01 c0       	rjmp	.+2      	; 0x33e <OWSearch+0xc4>
					if (current_discrepancy < last_discrepancy) {
						// SI YA EXPLORAMOS ESTE NIVEL DE DISCREPANCIA, SEGUIMOS LA MISMA RUTA QUE ANTES
						search_direction = ((ROM_NO[device_found][currentbyte] & (1 << currentbit)) != 0);
						} else if (current_discrepancy == last_discrepancy) {
						// SI ESTAMOS EN LA ÚLTIMA DISCREPANCIA CONOCIDA, TOMAMOS LA RUTA DEL 1
						search_direction = 1;
 33c:	01 e0       	ldi	r16, 0x01	; 1
						search_direction = 0;
						current_discrepancy = currentbyte * 8 + currentbit; // GUARDAMOS LA POSICIÓN DE LA NUEVA DISCREPANCIA
					}

					// GUARDAMOS LA DISCREPANCIA MÁS RECIENTE
					if (!search_direction) {
 33e:	01 11       	cpse	r16, r1
 340:	0a c0       	rjmp	.+20     	; 0x356 <OWSearch+0xdc>
						pos_discrepancy = currentbyte * 8 + currentbit;
 342:	a7 2c       	mov	r10, r7
 344:	b1 2c       	mov	r11, r1
 346:	aa 0c       	add	r10, r10
 348:	bb 1c       	adc	r11, r11
 34a:	aa 0c       	add	r10, r10
 34c:	bb 1c       	adc	r11, r11
 34e:	aa 0c       	add	r10, r10
 350:	bb 1c       	adc	r11, r11
 352:	a1 0e       	add	r10, r17
 354:	b1 1c       	adc	r11, r1
					}
				}

				// ESCRIBIMOS EL BIT DECIDIDO EN EL BUS 1-WIRE
				OWWriteByte(search_direction);
 356:	80 2f       	mov	r24, r16
 358:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <OWWriteByte>

				// ALMACENAMOS EL BIT EN EL ROM
				if (search_direction) {
 35c:	00 23       	and	r16, r16
 35e:	59 f0       	breq	.+22     	; 0x376 <OWSearch+0xfc>
					maskbits |= (1 << currentbit);  // GUARDAR EL BIT '1'
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	01 2e       	mov	r0, r17
 366:	02 c0       	rjmp	.+4      	; 0x36c <OWSearch+0xf2>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	0a 94       	dec	r0
 36e:	e2 f7       	brpl	.-8      	; 0x368 <OWSearch+0xee>
 370:	e8 2a       	or	r14, r24
 372:	f9 2a       	or	r15, r25
 374:	0c c0       	rjmp	.+24     	; 0x38e <OWSearch+0x114>
					} else {
					maskbits &= ~(1 << currentbit); // GUARDAR EL BIT '0'
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	01 2e       	mov	r0, r17
 37c:	02 c0       	rjmp	.+4      	; 0x382 <OWSearch+0x108>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	0a 94       	dec	r0
 384:	e2 f7       	brpl	.-8      	; 0x37e <OWSearch+0x104>
 386:	80 95       	com	r24
 388:	90 95       	com	r25
 38a:	e8 22       	and	r14, r24
 38c:	f9 22       	and	r15, r25
		// ENVIAMOS EL COMANDO SEARCH_ROM
		OWWriteByte(SEARCH_ROM);

		// RECORREMOS LOS 64 BITS (8 BYTES) DEL CÓDIGO ROM
		for (uint8_t currentbyte = 0; currentbyte < 8; currentbyte++) {
			for (uint8_t currentbit = 0; currentbit < 8; currentbit++) {
 38e:	1f 5f       	subi	r17, 0xFF	; 255
 390:	03 c0       	rjmp	.+6      	; 0x398 <OWSearch+0x11e>
 392:	10 e0       	ldi	r17, 0x00	; 0
 394:	e1 2c       	mov	r14, r1
 396:	f1 2c       	mov	r15, r1
 398:	18 30       	cpi	r17, 0x08	; 8
 39a:	08 f4       	brcc	.+2      	; 0x39e <OWSearch+0x124>
 39c:	8b cf       	rjmp	.-234    	; 0x2b4 <OWSearch+0x3a>
					} else {
					maskbits &= ~(1 << currentbit); // GUARDAR EL BIT '0'
				}
			}
			// ALMACENAR EL BYTE EN LA ROM DEL DISPOSITIVO
			ROM_NO[device_found][currentbyte] = maskbits;
 39e:	f4 01       	movw	r30, r8
 3a0:	ee 0f       	add	r30, r30
 3a2:	ff 1f       	adc	r31, r31
 3a4:	ee 0f       	add	r30, r30
 3a6:	ff 1f       	adc	r31, r31
 3a8:	ee 0f       	add	r30, r30
 3aa:	ff 1f       	adc	r31, r31
 3ac:	ee 5a       	subi	r30, 0xAE	; 174
 3ae:	fe 4f       	sbci	r31, 0xFE	; 254
 3b0:	e7 0d       	add	r30, r7
 3b2:	f1 1d       	adc	r31, r1
 3b4:	e0 82       	st	Z, r14
		
		// ENVIAMOS EL COMANDO SEARCH_ROM
		OWWriteByte(SEARCH_ROM);

		// RECORREMOS LOS 64 BITS (8 BYTES) DEL CÓDIGO ROM
		for (uint8_t currentbyte = 0; currentbyte < 8; currentbyte++) {
 3b6:	73 94       	inc	r7
 3b8:	87 e0       	ldi	r24, 0x07	; 7
 3ba:	87 15       	cp	r24, r7
 3bc:	50 f7       	brcc	.-44     	; 0x392 <OWSearch+0x118>
			ROM_NO[device_found][currentbyte] = maskbits;
			maskbits = 0;
		}

		// ACTUALIZAMOS LA ÚLTIMA DISCREPANCIA PARA LA SIGUIENTE BÚSQUEDA
		last_discrepancy = pos_discrepancy;
 3be:	b0 92 1d 01 	sts	0x011D, r11	; 0x80011d <__data_end+0x1>
 3c2:	a0 92 1c 01 	sts	0x011C, r10	; 0x80011c <__data_end>

		device_found++;
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	88 1a       	sub	r8, r24
 3ca:	98 0a       	sbc	r9, r24

	} while (device_found < MAX_DEVICES && last_discrepancy != 0); // SEGUIR BUSCANDO MIENTRAS QUEDEN DISCREPANCIAS
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	88 16       	cp	r8, r24
 3d0:	91 04       	cpc	r9, r1
 3d2:	6c f4       	brge	.+26     	; 0x3ee <OWSearch+0x174>
 3d4:	a1 14       	cp	r10, r1
 3d6:	b1 04       	cpc	r11, r1
 3d8:	09 f0       	breq	.+2      	; 0x3dc <OWSearch+0x162>
 3da:	60 cf       	rjmp	.-320    	; 0x29c <OWSearch+0x22>

	return device_found;
 3dc:	88 2d       	mov	r24, r8
 3de:	99 2d       	mov	r25, r9
 3e0:	08 c0       	rjmp	.+16     	; 0x3f2 <OWSearch+0x178>
		maskbits = 0;
		current_discrepancy = 0; // RESETEAR LA DISCREPANCIA ACTUAL EN CADA CICLO DE BÚSQUEDA

		// GENERAMOS RESET Y EN CASO DE NO TENER DISPOSITIVOS EN EL BUS REGRESAMOS -1
		if (!OWReset()) {
			return -1;
 3e2:	8f ef       	ldi	r24, 0xFF	; 255
 3e4:	9f ef       	ldi	r25, 0xFF	; 255
 3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <OWSearch+0x178>
				bit  = OWReadByte();  // LEER EL BIT ACTUAL
				nbit = OWReadByte();  // LEER EL COMPLEMENTO DEL BIT

				// SI AMBOS BITS SON 1, NO HAY MÁS DISPOSITIVOS EN EL BUS
				if (bit == 1 && nbit == 1) {
					return -1;
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	9f ef       	ldi	r25, 0xFF	; 255
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <OWSearch+0x178>

		device_found++;

	} while (device_found < MAX_DEVICES && last_discrepancy != 0); // SEGUIR BUSCANDO MIENTRAS QUEDEN DISCREPANCIAS

	return device_found;
 3ee:	88 2d       	mov	r24, r8
 3f0:	99 2d       	mov	r25, r9
}
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	ff 90       	pop	r15
 3fc:	ef 90       	pop	r14
 3fe:	df 90       	pop	r13
 400:	cf 90       	pop	r12
 402:	bf 90       	pop	r11
 404:	af 90       	pop	r10
 406:	9f 90       	pop	r9
 408:	8f 90       	pop	r8
 40a:	7f 90       	pop	r7
 40c:	08 95       	ret

0000040e <UART1_Init>:

static char _uart_buffer_[50];

void UART1_Init(unsigned long baudrate){
	
		unsigned int regUBRR = F_CPU/(baudrate*16) - 1;
 40e:	dc 01       	movw	r26, r24
 410:	cb 01       	movw	r24, r22
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	aa 1f       	adc	r26, r26
 418:	bb 1f       	adc	r27, r27
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	aa 1f       	adc	r26, r26
 420:	bb 1f       	adc	r27, r27
 422:	9c 01       	movw	r18, r24
 424:	ad 01       	movw	r20, r26
 426:	22 0f       	add	r18, r18
 428:	33 1f       	adc	r19, r19
 42a:	44 1f       	adc	r20, r20
 42c:	55 1f       	adc	r21, r21
 42e:	22 0f       	add	r18, r18
 430:	33 1f       	adc	r19, r19
 432:	44 1f       	adc	r20, r20
 434:	55 1f       	adc	r21, r21
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	72 e1       	ldi	r23, 0x12	; 18
 43a:	8a e7       	ldi	r24, 0x7A	; 122
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 67 02 	call	0x4ce	; 0x4ce <__udivmodsi4>
 442:	21 50       	subi	r18, 0x01	; 1
 444:	31 09       	sbc	r19, r1
		
		// Cargamos los valores de BAUDRATE en los registros UBRR;
		UBRR0H = (unsigned char) (regUBRR>>8);
 446:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
		UBRR0L = (unsigned char) (regUBRR>>0);
 44a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
		
		//Configuramos modo de operacion de 8 bits de datos;
		UCSR0B &= ~(1<<UCSZ00);
 44e:	a1 ec       	ldi	r26, 0xC1	; 193
 450:	b0 e0       	ldi	r27, 0x00	; 0
 452:	8c 91       	ld	r24, X
 454:	8d 7f       	andi	r24, 0xFD	; 253
 456:	8c 93       	st	X, r24
		UCSR0C |=  (1<<UCSZ01)|(1<<UCSZ00);
 458:	e2 ec       	ldi	r30, 0xC2	; 194
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	80 81       	ld	r24, Z
 45e:	86 60       	ori	r24, 0x06	; 6
 460:	80 83       	st	Z, r24
		
		//Sin paridad;
		UCSR0C &= ~( (1<<UPM01)|(1<<UPM00) );
 462:	80 81       	ld	r24, Z
 464:	8f 7c       	andi	r24, 0xCF	; 207
 466:	80 83       	st	Z, r24
		
		//Modo asincrono;
		UCSR0C &= ~( (1<<UMSEL01)|(1<<UMSEL00) );
 468:	80 81       	ld	r24, Z
 46a:	8f 73       	andi	r24, 0x3F	; 63
 46c:	80 83       	st	Z, r24
		
		//Habilitamos los pines Tx Rx;
		UCSR0B |= ( (1<<RXEN0)|(1<<TXEN0) );
 46e:	8c 91       	ld	r24, X
 470:	88 61       	ori	r24, 0x18	; 24
 472:	8c 93       	st	X, r24
 474:	08 95       	ret

00000476 <UART1_Transmit_char>:
		
}

void UART1_Transmit_char(unsigned char data){
	// Espera a que el registro de transmisiÃ³n estÃ© vacÃ­o
	while (!(UCSR0A & (1 << UDRE0)));
 476:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 47a:	95 ff       	sbrs	r25, 5
 47c:	fc cf       	rjmp	.-8      	; 0x476 <UART1_Transmit_char>
	// Carga el dato en el registro de transmisiÃ³n
	UDR0 = data;
 47e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 482:	08 95       	ret

00000484 <UART1_Transmit_Text>:
}

void UART1_Transmit_Text(char *texto){
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	ec 01       	movw	r28, r24
	while(*texto){
 48a:	03 c0       	rjmp	.+6      	; 0x492 <UART1_Transmit_Text+0xe>
		UART1_Transmit_char(*texto);
 48c:	0e 94 3b 02 	call	0x476	; 0x476 <UART1_Transmit_char>
		texto++;
 490:	21 96       	adiw	r28, 0x01	; 1
	// Carga el dato en el registro de transmisiÃ³n
	UDR0 = data;
}

void UART1_Transmit_Text(char *texto){
	while(*texto){
 492:	88 81       	ld	r24, Y
 494:	81 11       	cpse	r24, r1
 496:	fa cf       	rjmp	.-12     	; 0x48c <UART1_Transmit_Text+0x8>
		UART1_Transmit_char(*texto);
		texto++;
	}
}
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	08 95       	ret

0000049e <UART1_Transmit_Printf>:

void UART1_Transmit_Printf(char *str, ...){
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62
 4a6:	9e 01       	movw	r18, r28
 4a8:	2b 5f       	subi	r18, 0xFB	; 251
 4aa:	3f 4f       	sbci	r19, 0xFF	; 255
 4ac:	f9 01       	movw	r30, r18
 4ae:	41 91       	ld	r20, Z+
 4b0:	51 91       	ld	r21, Z+
 4b2:	9f 01       	movw	r18, r30
	
	va_list args;
	va_start(args,str);
	vsnprintf(_uart_buffer_, 51, str, args);
 4b4:	63 e3       	ldi	r22, 0x33	; 51
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	8e e1       	ldi	r24, 0x1E	; 30
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	0e 94 89 02 	call	0x512	; 0x512 <vsnprintf>
	va_end(args);
	UART1_Transmit_Text(_uart_buffer_);
 4c0:	8e e1       	ldi	r24, 0x1E	; 30
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	0e 94 42 02 	call	0x484	; 0x484 <UART1_Transmit_Text>
	
}
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	08 95       	ret

000004ce <__udivmodsi4>:
 4ce:	a1 e2       	ldi	r26, 0x21	; 33
 4d0:	1a 2e       	mov	r1, r26
 4d2:	aa 1b       	sub	r26, r26
 4d4:	bb 1b       	sub	r27, r27
 4d6:	fd 01       	movw	r30, r26
 4d8:	0d c0       	rjmp	.+26     	; 0x4f4 <__udivmodsi4_ep>

000004da <__udivmodsi4_loop>:
 4da:	aa 1f       	adc	r26, r26
 4dc:	bb 1f       	adc	r27, r27
 4de:	ee 1f       	adc	r30, r30
 4e0:	ff 1f       	adc	r31, r31
 4e2:	a2 17       	cp	r26, r18
 4e4:	b3 07       	cpc	r27, r19
 4e6:	e4 07       	cpc	r30, r20
 4e8:	f5 07       	cpc	r31, r21
 4ea:	20 f0       	brcs	.+8      	; 0x4f4 <__udivmodsi4_ep>
 4ec:	a2 1b       	sub	r26, r18
 4ee:	b3 0b       	sbc	r27, r19
 4f0:	e4 0b       	sbc	r30, r20
 4f2:	f5 0b       	sbc	r31, r21

000004f4 <__udivmodsi4_ep>:
 4f4:	66 1f       	adc	r22, r22
 4f6:	77 1f       	adc	r23, r23
 4f8:	88 1f       	adc	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	1a 94       	dec	r1
 4fe:	69 f7       	brne	.-38     	; 0x4da <__udivmodsi4_loop>
 500:	60 95       	com	r22
 502:	70 95       	com	r23
 504:	80 95       	com	r24
 506:	90 95       	com	r25
 508:	9b 01       	movw	r18, r22
 50a:	ac 01       	movw	r20, r24
 50c:	bd 01       	movw	r22, r26
 50e:	cf 01       	movw	r24, r30
 510:	08 95       	ret

00000512 <vsnprintf>:
 512:	ae e0       	ldi	r26, 0x0E	; 14
 514:	b0 e0       	ldi	r27, 0x00	; 0
 516:	ef e8       	ldi	r30, 0x8F	; 143
 518:	f2 e0       	ldi	r31, 0x02	; 2
 51a:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <__prologue_saves__+0x1c>
 51e:	8c 01       	movw	r16, r24
 520:	fa 01       	movw	r30, r20
 522:	86 e0       	ldi	r24, 0x06	; 6
 524:	8c 83       	std	Y+4, r24	; 0x04
 526:	1a 83       	std	Y+2, r17	; 0x02
 528:	09 83       	std	Y+1, r16	; 0x01
 52a:	77 ff       	sbrs	r23, 7
 52c:	02 c0       	rjmp	.+4      	; 0x532 <vsnprintf+0x20>
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	70 e8       	ldi	r23, 0x80	; 128
 532:	cb 01       	movw	r24, r22
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	9e 83       	std	Y+6, r25	; 0x06
 538:	8d 83       	std	Y+5, r24	; 0x05
 53a:	a9 01       	movw	r20, r18
 53c:	bf 01       	movw	r22, r30
 53e:	ce 01       	movw	r24, r28
 540:	01 96       	adiw	r24, 0x01	; 1
 542:	0e 94 b5 02 	call	0x56a	; 0x56a <vfprintf>
 546:	4d 81       	ldd	r20, Y+5	; 0x05
 548:	5e 81       	ldd	r21, Y+6	; 0x06
 54a:	57 fd       	sbrc	r21, 7
 54c:	0a c0       	rjmp	.+20     	; 0x562 <vsnprintf+0x50>
 54e:	2f 81       	ldd	r18, Y+7	; 0x07
 550:	38 85       	ldd	r19, Y+8	; 0x08
 552:	42 17       	cp	r20, r18
 554:	53 07       	cpc	r21, r19
 556:	0c f4       	brge	.+2      	; 0x55a <vsnprintf+0x48>
 558:	9a 01       	movw	r18, r20
 55a:	f8 01       	movw	r30, r16
 55c:	e2 0f       	add	r30, r18
 55e:	f3 1f       	adc	r31, r19
 560:	10 82       	st	Z, r1
 562:	2e 96       	adiw	r28, 0x0e	; 14
 564:	e4 e0       	ldi	r30, 0x04	; 4
 566:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__epilogue_restores__+0x1c>

0000056a <vfprintf>:
 56a:	ab e0       	ldi	r26, 0x0B	; 11
 56c:	b0 e0       	ldi	r27, 0x00	; 0
 56e:	eb eb       	ldi	r30, 0xBB	; 187
 570:	f2 e0       	ldi	r31, 0x02	; 2
 572:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__prologue_saves__>
 576:	6c 01       	movw	r12, r24
 578:	7b 01       	movw	r14, r22
 57a:	8a 01       	movw	r16, r20
 57c:	fc 01       	movw	r30, r24
 57e:	17 82       	std	Z+7, r1	; 0x07
 580:	16 82       	std	Z+6, r1	; 0x06
 582:	83 81       	ldd	r24, Z+3	; 0x03
 584:	81 ff       	sbrs	r24, 1
 586:	cc c1       	rjmp	.+920    	; 0x920 <__stack+0x21>
 588:	ce 01       	movw	r24, r28
 58a:	01 96       	adiw	r24, 0x01	; 1
 58c:	3c 01       	movw	r6, r24
 58e:	f6 01       	movw	r30, r12
 590:	93 81       	ldd	r25, Z+3	; 0x03
 592:	f7 01       	movw	r30, r14
 594:	93 fd       	sbrc	r25, 3
 596:	85 91       	lpm	r24, Z+
 598:	93 ff       	sbrs	r25, 3
 59a:	81 91       	ld	r24, Z+
 59c:	7f 01       	movw	r14, r30
 59e:	88 23       	and	r24, r24
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <vfprintf+0x3a>
 5a2:	ba c1       	rjmp	.+884    	; 0x918 <__stack+0x19>
 5a4:	85 32       	cpi	r24, 0x25	; 37
 5a6:	39 f4       	brne	.+14     	; 0x5b6 <vfprintf+0x4c>
 5a8:	93 fd       	sbrc	r25, 3
 5aa:	85 91       	lpm	r24, Z+
 5ac:	93 ff       	sbrs	r25, 3
 5ae:	81 91       	ld	r24, Z+
 5b0:	7f 01       	movw	r14, r30
 5b2:	85 32       	cpi	r24, 0x25	; 37
 5b4:	29 f4       	brne	.+10     	; 0x5c0 <vfprintf+0x56>
 5b6:	b6 01       	movw	r22, r12
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 ac 04 	call	0x958	; 0x958 <fputc>
 5be:	e7 cf       	rjmp	.-50     	; 0x58e <vfprintf+0x24>
 5c0:	91 2c       	mov	r9, r1
 5c2:	21 2c       	mov	r2, r1
 5c4:	31 2c       	mov	r3, r1
 5c6:	ff e1       	ldi	r31, 0x1F	; 31
 5c8:	f3 15       	cp	r31, r3
 5ca:	d8 f0       	brcs	.+54     	; 0x602 <vfprintf+0x98>
 5cc:	8b 32       	cpi	r24, 0x2B	; 43
 5ce:	79 f0       	breq	.+30     	; 0x5ee <vfprintf+0x84>
 5d0:	38 f4       	brcc	.+14     	; 0x5e0 <vfprintf+0x76>
 5d2:	80 32       	cpi	r24, 0x20	; 32
 5d4:	79 f0       	breq	.+30     	; 0x5f4 <vfprintf+0x8a>
 5d6:	83 32       	cpi	r24, 0x23	; 35
 5d8:	a1 f4       	brne	.+40     	; 0x602 <vfprintf+0x98>
 5da:	23 2d       	mov	r18, r3
 5dc:	20 61       	ori	r18, 0x10	; 16
 5de:	1d c0       	rjmp	.+58     	; 0x61a <vfprintf+0xb0>
 5e0:	8d 32       	cpi	r24, 0x2D	; 45
 5e2:	61 f0       	breq	.+24     	; 0x5fc <vfprintf+0x92>
 5e4:	80 33       	cpi	r24, 0x30	; 48
 5e6:	69 f4       	brne	.+26     	; 0x602 <vfprintf+0x98>
 5e8:	23 2d       	mov	r18, r3
 5ea:	21 60       	ori	r18, 0x01	; 1
 5ec:	16 c0       	rjmp	.+44     	; 0x61a <vfprintf+0xb0>
 5ee:	83 2d       	mov	r24, r3
 5f0:	82 60       	ori	r24, 0x02	; 2
 5f2:	38 2e       	mov	r3, r24
 5f4:	e3 2d       	mov	r30, r3
 5f6:	e4 60       	ori	r30, 0x04	; 4
 5f8:	3e 2e       	mov	r3, r30
 5fa:	2a c0       	rjmp	.+84     	; 0x650 <vfprintf+0xe6>
 5fc:	f3 2d       	mov	r31, r3
 5fe:	f8 60       	ori	r31, 0x08	; 8
 600:	1d c0       	rjmp	.+58     	; 0x63c <vfprintf+0xd2>
 602:	37 fc       	sbrc	r3, 7
 604:	2d c0       	rjmp	.+90     	; 0x660 <vfprintf+0xf6>
 606:	20 ed       	ldi	r18, 0xD0	; 208
 608:	28 0f       	add	r18, r24
 60a:	2a 30       	cpi	r18, 0x0A	; 10
 60c:	40 f0       	brcs	.+16     	; 0x61e <vfprintf+0xb4>
 60e:	8e 32       	cpi	r24, 0x2E	; 46
 610:	b9 f4       	brne	.+46     	; 0x640 <vfprintf+0xd6>
 612:	36 fc       	sbrc	r3, 6
 614:	81 c1       	rjmp	.+770    	; 0x918 <__stack+0x19>
 616:	23 2d       	mov	r18, r3
 618:	20 64       	ori	r18, 0x40	; 64
 61a:	32 2e       	mov	r3, r18
 61c:	19 c0       	rjmp	.+50     	; 0x650 <vfprintf+0xe6>
 61e:	36 fe       	sbrs	r3, 6
 620:	06 c0       	rjmp	.+12     	; 0x62e <vfprintf+0xc4>
 622:	8a e0       	ldi	r24, 0x0A	; 10
 624:	98 9e       	mul	r9, r24
 626:	20 0d       	add	r18, r0
 628:	11 24       	eor	r1, r1
 62a:	92 2e       	mov	r9, r18
 62c:	11 c0       	rjmp	.+34     	; 0x650 <vfprintf+0xe6>
 62e:	ea e0       	ldi	r30, 0x0A	; 10
 630:	2e 9e       	mul	r2, r30
 632:	20 0d       	add	r18, r0
 634:	11 24       	eor	r1, r1
 636:	22 2e       	mov	r2, r18
 638:	f3 2d       	mov	r31, r3
 63a:	f0 62       	ori	r31, 0x20	; 32
 63c:	3f 2e       	mov	r3, r31
 63e:	08 c0       	rjmp	.+16     	; 0x650 <vfprintf+0xe6>
 640:	8c 36       	cpi	r24, 0x6C	; 108
 642:	21 f4       	brne	.+8      	; 0x64c <vfprintf+0xe2>
 644:	83 2d       	mov	r24, r3
 646:	80 68       	ori	r24, 0x80	; 128
 648:	38 2e       	mov	r3, r24
 64a:	02 c0       	rjmp	.+4      	; 0x650 <vfprintf+0xe6>
 64c:	88 36       	cpi	r24, 0x68	; 104
 64e:	41 f4       	brne	.+16     	; 0x660 <vfprintf+0xf6>
 650:	f7 01       	movw	r30, r14
 652:	93 fd       	sbrc	r25, 3
 654:	85 91       	lpm	r24, Z+
 656:	93 ff       	sbrs	r25, 3
 658:	81 91       	ld	r24, Z+
 65a:	7f 01       	movw	r14, r30
 65c:	81 11       	cpse	r24, r1
 65e:	b3 cf       	rjmp	.-154    	; 0x5c6 <vfprintf+0x5c>
 660:	98 2f       	mov	r25, r24
 662:	9f 7d       	andi	r25, 0xDF	; 223
 664:	95 54       	subi	r25, 0x45	; 69
 666:	93 30       	cpi	r25, 0x03	; 3
 668:	28 f4       	brcc	.+10     	; 0x674 <vfprintf+0x10a>
 66a:	0c 5f       	subi	r16, 0xFC	; 252
 66c:	1f 4f       	sbci	r17, 0xFF	; 255
 66e:	9f e3       	ldi	r25, 0x3F	; 63
 670:	99 83       	std	Y+1, r25	; 0x01
 672:	0d c0       	rjmp	.+26     	; 0x68e <vfprintf+0x124>
 674:	83 36       	cpi	r24, 0x63	; 99
 676:	31 f0       	breq	.+12     	; 0x684 <vfprintf+0x11a>
 678:	83 37       	cpi	r24, 0x73	; 115
 67a:	71 f0       	breq	.+28     	; 0x698 <vfprintf+0x12e>
 67c:	83 35       	cpi	r24, 0x53	; 83
 67e:	09 f0       	breq	.+2      	; 0x682 <vfprintf+0x118>
 680:	59 c0       	rjmp	.+178    	; 0x734 <vfprintf+0x1ca>
 682:	21 c0       	rjmp	.+66     	; 0x6c6 <vfprintf+0x15c>
 684:	f8 01       	movw	r30, r16
 686:	80 81       	ld	r24, Z
 688:	89 83       	std	Y+1, r24	; 0x01
 68a:	0e 5f       	subi	r16, 0xFE	; 254
 68c:	1f 4f       	sbci	r17, 0xFF	; 255
 68e:	88 24       	eor	r8, r8
 690:	83 94       	inc	r8
 692:	91 2c       	mov	r9, r1
 694:	53 01       	movw	r10, r6
 696:	13 c0       	rjmp	.+38     	; 0x6be <vfprintf+0x154>
 698:	28 01       	movw	r4, r16
 69a:	f2 e0       	ldi	r31, 0x02	; 2
 69c:	4f 0e       	add	r4, r31
 69e:	51 1c       	adc	r5, r1
 6a0:	f8 01       	movw	r30, r16
 6a2:	a0 80       	ld	r10, Z
 6a4:	b1 80       	ldd	r11, Z+1	; 0x01
 6a6:	36 fe       	sbrs	r3, 6
 6a8:	03 c0       	rjmp	.+6      	; 0x6b0 <vfprintf+0x146>
 6aa:	69 2d       	mov	r22, r9
 6ac:	70 e0       	ldi	r23, 0x00	; 0
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <vfprintf+0x14a>
 6b0:	6f ef       	ldi	r22, 0xFF	; 255
 6b2:	7f ef       	ldi	r23, 0xFF	; 255
 6b4:	c5 01       	movw	r24, r10
 6b6:	0e 94 a1 04 	call	0x942	; 0x942 <strnlen>
 6ba:	4c 01       	movw	r8, r24
 6bc:	82 01       	movw	r16, r4
 6be:	f3 2d       	mov	r31, r3
 6c0:	ff 77       	andi	r31, 0x7F	; 127
 6c2:	3f 2e       	mov	r3, r31
 6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <vfprintf+0x188>
 6c6:	28 01       	movw	r4, r16
 6c8:	22 e0       	ldi	r18, 0x02	; 2
 6ca:	42 0e       	add	r4, r18
 6cc:	51 1c       	adc	r5, r1
 6ce:	f8 01       	movw	r30, r16
 6d0:	a0 80       	ld	r10, Z
 6d2:	b1 80       	ldd	r11, Z+1	; 0x01
 6d4:	36 fe       	sbrs	r3, 6
 6d6:	03 c0       	rjmp	.+6      	; 0x6de <vfprintf+0x174>
 6d8:	69 2d       	mov	r22, r9
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <vfprintf+0x178>
 6de:	6f ef       	ldi	r22, 0xFF	; 255
 6e0:	7f ef       	ldi	r23, 0xFF	; 255
 6e2:	c5 01       	movw	r24, r10
 6e4:	0e 94 96 04 	call	0x92c	; 0x92c <strnlen_P>
 6e8:	4c 01       	movw	r8, r24
 6ea:	f3 2d       	mov	r31, r3
 6ec:	f0 68       	ori	r31, 0x80	; 128
 6ee:	3f 2e       	mov	r3, r31
 6f0:	82 01       	movw	r16, r4
 6f2:	33 fc       	sbrc	r3, 3
 6f4:	1b c0       	rjmp	.+54     	; 0x72c <vfprintf+0x1c2>
 6f6:	82 2d       	mov	r24, r2
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	88 16       	cp	r8, r24
 6fc:	99 06       	cpc	r9, r25
 6fe:	b0 f4       	brcc	.+44     	; 0x72c <vfprintf+0x1c2>
 700:	b6 01       	movw	r22, r12
 702:	80 e2       	ldi	r24, 0x20	; 32
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 ac 04 	call	0x958	; 0x958 <fputc>
 70a:	2a 94       	dec	r2
 70c:	f4 cf       	rjmp	.-24     	; 0x6f6 <vfprintf+0x18c>
 70e:	f5 01       	movw	r30, r10
 710:	37 fc       	sbrc	r3, 7
 712:	85 91       	lpm	r24, Z+
 714:	37 fe       	sbrs	r3, 7
 716:	81 91       	ld	r24, Z+
 718:	5f 01       	movw	r10, r30
 71a:	b6 01       	movw	r22, r12
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 ac 04 	call	0x958	; 0x958 <fputc>
 722:	21 10       	cpse	r2, r1
 724:	2a 94       	dec	r2
 726:	21 e0       	ldi	r18, 0x01	; 1
 728:	82 1a       	sub	r8, r18
 72a:	91 08       	sbc	r9, r1
 72c:	81 14       	cp	r8, r1
 72e:	91 04       	cpc	r9, r1
 730:	71 f7       	brne	.-36     	; 0x70e <vfprintf+0x1a4>
 732:	e8 c0       	rjmp	.+464    	; 0x904 <__stack+0x5>
 734:	84 36       	cpi	r24, 0x64	; 100
 736:	11 f0       	breq	.+4      	; 0x73c <vfprintf+0x1d2>
 738:	89 36       	cpi	r24, 0x69	; 105
 73a:	41 f5       	brne	.+80     	; 0x78c <vfprintf+0x222>
 73c:	f8 01       	movw	r30, r16
 73e:	37 fe       	sbrs	r3, 7
 740:	07 c0       	rjmp	.+14     	; 0x750 <vfprintf+0x1e6>
 742:	60 81       	ld	r22, Z
 744:	71 81       	ldd	r23, Z+1	; 0x01
 746:	82 81       	ldd	r24, Z+2	; 0x02
 748:	93 81       	ldd	r25, Z+3	; 0x03
 74a:	0c 5f       	subi	r16, 0xFC	; 252
 74c:	1f 4f       	sbci	r17, 0xFF	; 255
 74e:	08 c0       	rjmp	.+16     	; 0x760 <vfprintf+0x1f6>
 750:	60 81       	ld	r22, Z
 752:	71 81       	ldd	r23, Z+1	; 0x01
 754:	07 2e       	mov	r0, r23
 756:	00 0c       	add	r0, r0
 758:	88 0b       	sbc	r24, r24
 75a:	99 0b       	sbc	r25, r25
 75c:	0e 5f       	subi	r16, 0xFE	; 254
 75e:	1f 4f       	sbci	r17, 0xFF	; 255
 760:	f3 2d       	mov	r31, r3
 762:	ff 76       	andi	r31, 0x6F	; 111
 764:	3f 2e       	mov	r3, r31
 766:	97 ff       	sbrs	r25, 7
 768:	09 c0       	rjmp	.+18     	; 0x77c <vfprintf+0x212>
 76a:	90 95       	com	r25
 76c:	80 95       	com	r24
 76e:	70 95       	com	r23
 770:	61 95       	neg	r22
 772:	7f 4f       	sbci	r23, 0xFF	; 255
 774:	8f 4f       	sbci	r24, 0xFF	; 255
 776:	9f 4f       	sbci	r25, 0xFF	; 255
 778:	f0 68       	ori	r31, 0x80	; 128
 77a:	3f 2e       	mov	r3, r31
 77c:	2a e0       	ldi	r18, 0x0A	; 10
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	a3 01       	movw	r20, r6
 782:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__ultoa_invert>
 786:	88 2e       	mov	r8, r24
 788:	86 18       	sub	r8, r6
 78a:	45 c0       	rjmp	.+138    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 78c:	85 37       	cpi	r24, 0x75	; 117
 78e:	31 f4       	brne	.+12     	; 0x79c <vfprintf+0x232>
 790:	23 2d       	mov	r18, r3
 792:	2f 7e       	andi	r18, 0xEF	; 239
 794:	b2 2e       	mov	r11, r18
 796:	2a e0       	ldi	r18, 0x0A	; 10
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	25 c0       	rjmp	.+74     	; 0x7e6 <vfprintf+0x27c>
 79c:	93 2d       	mov	r25, r3
 79e:	99 7f       	andi	r25, 0xF9	; 249
 7a0:	b9 2e       	mov	r11, r25
 7a2:	8f 36       	cpi	r24, 0x6F	; 111
 7a4:	c1 f0       	breq	.+48     	; 0x7d6 <vfprintf+0x26c>
 7a6:	18 f4       	brcc	.+6      	; 0x7ae <vfprintf+0x244>
 7a8:	88 35       	cpi	r24, 0x58	; 88
 7aa:	79 f0       	breq	.+30     	; 0x7ca <vfprintf+0x260>
 7ac:	b5 c0       	rjmp	.+362    	; 0x918 <__stack+0x19>
 7ae:	80 37       	cpi	r24, 0x70	; 112
 7b0:	19 f0       	breq	.+6      	; 0x7b8 <vfprintf+0x24e>
 7b2:	88 37       	cpi	r24, 0x78	; 120
 7b4:	21 f0       	breq	.+8      	; 0x7be <vfprintf+0x254>
 7b6:	b0 c0       	rjmp	.+352    	; 0x918 <__stack+0x19>
 7b8:	e9 2f       	mov	r30, r25
 7ba:	e0 61       	ori	r30, 0x10	; 16
 7bc:	be 2e       	mov	r11, r30
 7be:	b4 fe       	sbrs	r11, 4
 7c0:	0d c0       	rjmp	.+26     	; 0x7dc <vfprintf+0x272>
 7c2:	fb 2d       	mov	r31, r11
 7c4:	f4 60       	ori	r31, 0x04	; 4
 7c6:	bf 2e       	mov	r11, r31
 7c8:	09 c0       	rjmp	.+18     	; 0x7dc <vfprintf+0x272>
 7ca:	34 fe       	sbrs	r3, 4
 7cc:	0a c0       	rjmp	.+20     	; 0x7e2 <vfprintf+0x278>
 7ce:	29 2f       	mov	r18, r25
 7d0:	26 60       	ori	r18, 0x06	; 6
 7d2:	b2 2e       	mov	r11, r18
 7d4:	06 c0       	rjmp	.+12     	; 0x7e2 <vfprintf+0x278>
 7d6:	28 e0       	ldi	r18, 0x08	; 8
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	05 c0       	rjmp	.+10     	; 0x7e6 <vfprintf+0x27c>
 7dc:	20 e1       	ldi	r18, 0x10	; 16
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <vfprintf+0x27c>
 7e2:	20 e1       	ldi	r18, 0x10	; 16
 7e4:	32 e0       	ldi	r19, 0x02	; 2
 7e6:	f8 01       	movw	r30, r16
 7e8:	b7 fe       	sbrs	r11, 7
 7ea:	07 c0       	rjmp	.+14     	; 0x7fa <vfprintf+0x290>
 7ec:	60 81       	ld	r22, Z
 7ee:	71 81       	ldd	r23, Z+1	; 0x01
 7f0:	82 81       	ldd	r24, Z+2	; 0x02
 7f2:	93 81       	ldd	r25, Z+3	; 0x03
 7f4:	0c 5f       	subi	r16, 0xFC	; 252
 7f6:	1f 4f       	sbci	r17, 0xFF	; 255
 7f8:	06 c0       	rjmp	.+12     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7fa:	60 81       	ld	r22, Z
 7fc:	71 81       	ldd	r23, Z+1	; 0x01
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	0e 5f       	subi	r16, 0xFE	; 254
 804:	1f 4f       	sbci	r17, 0xFF	; 255
 806:	a3 01       	movw	r20, r6
 808:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__ultoa_invert>
 80c:	88 2e       	mov	r8, r24
 80e:	86 18       	sub	r8, r6
 810:	fb 2d       	mov	r31, r11
 812:	ff 77       	andi	r31, 0x7F	; 127
 814:	3f 2e       	mov	r3, r31
 816:	36 fe       	sbrs	r3, 6
 818:	0d c0       	rjmp	.+26     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 81a:	23 2d       	mov	r18, r3
 81c:	2e 7f       	andi	r18, 0xFE	; 254
 81e:	a2 2e       	mov	r10, r18
 820:	89 14       	cp	r8, r9
 822:	58 f4       	brcc	.+22     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 824:	34 fe       	sbrs	r3, 4
 826:	0b c0       	rjmp	.+22     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 828:	32 fc       	sbrc	r3, 2
 82a:	09 c0       	rjmp	.+18     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 82c:	83 2d       	mov	r24, r3
 82e:	8e 7e       	andi	r24, 0xEE	; 238
 830:	a8 2e       	mov	r10, r24
 832:	05 c0       	rjmp	.+10     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 834:	b8 2c       	mov	r11, r8
 836:	a3 2c       	mov	r10, r3
 838:	03 c0       	rjmp	.+6      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 83a:	b8 2c       	mov	r11, r8
 83c:	01 c0       	rjmp	.+2      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 83e:	b9 2c       	mov	r11, r9
 840:	a4 fe       	sbrs	r10, 4
 842:	0f c0       	rjmp	.+30     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 844:	fe 01       	movw	r30, r28
 846:	e8 0d       	add	r30, r8
 848:	f1 1d       	adc	r31, r1
 84a:	80 81       	ld	r24, Z
 84c:	80 33       	cpi	r24, 0x30	; 48
 84e:	21 f4       	brne	.+8      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 850:	9a 2d       	mov	r25, r10
 852:	99 7e       	andi	r25, 0xE9	; 233
 854:	a9 2e       	mov	r10, r25
 856:	09 c0       	rjmp	.+18     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 858:	a2 fe       	sbrs	r10, 2
 85a:	06 c0       	rjmp	.+12     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 85c:	b3 94       	inc	r11
 85e:	b3 94       	inc	r11
 860:	04 c0       	rjmp	.+8      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 862:	8a 2d       	mov	r24, r10
 864:	86 78       	andi	r24, 0x86	; 134
 866:	09 f0       	breq	.+2      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 868:	b3 94       	inc	r11
 86a:	a3 fc       	sbrc	r10, 3
 86c:	11 c0       	rjmp	.+34     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 86e:	a0 fe       	sbrs	r10, 0
 870:	06 c0       	rjmp	.+12     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 872:	b2 14       	cp	r11, r2
 874:	88 f4       	brcc	.+34     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 876:	28 0c       	add	r2, r8
 878:	92 2c       	mov	r9, r2
 87a:	9b 18       	sub	r9, r11
 87c:	0e c0       	rjmp	.+28     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 87e:	b2 14       	cp	r11, r2
 880:	60 f4       	brcc	.+24     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 882:	b6 01       	movw	r22, r12
 884:	80 e2       	ldi	r24, 0x20	; 32
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 ac 04 	call	0x958	; 0x958 <fputc>
 88c:	b3 94       	inc	r11
 88e:	f7 cf       	rjmp	.-18     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 890:	b2 14       	cp	r11, r2
 892:	18 f4       	brcc	.+6      	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 894:	2b 18       	sub	r2, r11
 896:	02 c0       	rjmp	.+4      	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 898:	98 2c       	mov	r9, r8
 89a:	21 2c       	mov	r2, r1
 89c:	a4 fe       	sbrs	r10, 4
 89e:	10 c0       	rjmp	.+32     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8a0:	b6 01       	movw	r22, r12
 8a2:	80 e3       	ldi	r24, 0x30	; 48
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	0e 94 ac 04 	call	0x958	; 0x958 <fputc>
 8aa:	a2 fe       	sbrs	r10, 2
 8ac:	17 c0       	rjmp	.+46     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8ae:	a1 fc       	sbrc	r10, 1
 8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
 8b2:	88 e7       	ldi	r24, 0x78	; 120
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
 8b8:	88 e5       	ldi	r24, 0x58	; 88
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	b6 01       	movw	r22, r12
 8be:	0c c0       	rjmp	.+24     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 8c0:	8a 2d       	mov	r24, r10
 8c2:	86 78       	andi	r24, 0x86	; 134
 8c4:	59 f0       	breq	.+22     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8c6:	a1 fe       	sbrs	r10, 1
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8ca:	8b e2       	ldi	r24, 0x2B	; 43
 8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 8ce:	80 e2       	ldi	r24, 0x20	; 32
 8d0:	a7 fc       	sbrc	r10, 7
 8d2:	8d e2       	ldi	r24, 0x2D	; 45
 8d4:	b6 01       	movw	r22, r12
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 ac 04 	call	0x958	; 0x958 <fputc>
 8dc:	89 14       	cp	r8, r9
 8de:	38 f4       	brcc	.+14     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 8e0:	b6 01       	movw	r22, r12
 8e2:	80 e3       	ldi	r24, 0x30	; 48
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	0e 94 ac 04 	call	0x958	; 0x958 <fputc>
 8ea:	9a 94       	dec	r9
 8ec:	f7 cf       	rjmp	.-18     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8ee:	8a 94       	dec	r8
 8f0:	f3 01       	movw	r30, r6
 8f2:	e8 0d       	add	r30, r8
 8f4:	f1 1d       	adc	r31, r1
 8f6:	80 81       	ld	r24, Z
 8f8:	b6 01       	movw	r22, r12
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	0e 94 ac 04 	call	0x958	; 0x958 <fputc>
 900:	81 10       	cpse	r8, r1
 902:	f5 cf       	rjmp	.-22     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 904:	22 20       	and	r2, r2
 906:	09 f4       	brne	.+2      	; 0x90a <__stack+0xb>
 908:	42 ce       	rjmp	.-892    	; 0x58e <vfprintf+0x24>
 90a:	b6 01       	movw	r22, r12
 90c:	80 e2       	ldi	r24, 0x20	; 32
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0e 94 ac 04 	call	0x958	; 0x958 <fputc>
 914:	2a 94       	dec	r2
 916:	f6 cf       	rjmp	.-20     	; 0x904 <__stack+0x5>
 918:	f6 01       	movw	r30, r12
 91a:	86 81       	ldd	r24, Z+6	; 0x06
 91c:	97 81       	ldd	r25, Z+7	; 0x07
 91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0x25>
 920:	8f ef       	ldi	r24, 0xFF	; 255
 922:	9f ef       	ldi	r25, 0xFF	; 255
 924:	2b 96       	adiw	r28, 0x0b	; 11
 926:	e2 e1       	ldi	r30, 0x12	; 18
 928:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__epilogue_restores__>

0000092c <strnlen_P>:
 92c:	fc 01       	movw	r30, r24
 92e:	05 90       	lpm	r0, Z+
 930:	61 50       	subi	r22, 0x01	; 1
 932:	70 40       	sbci	r23, 0x00	; 0
 934:	01 10       	cpse	r0, r1
 936:	d8 f7       	brcc	.-10     	; 0x92e <strnlen_P+0x2>
 938:	80 95       	com	r24
 93a:	90 95       	com	r25
 93c:	8e 0f       	add	r24, r30
 93e:	9f 1f       	adc	r25, r31
 940:	08 95       	ret

00000942 <strnlen>:
 942:	fc 01       	movw	r30, r24
 944:	61 50       	subi	r22, 0x01	; 1
 946:	70 40       	sbci	r23, 0x00	; 0
 948:	01 90       	ld	r0, Z+
 94a:	01 10       	cpse	r0, r1
 94c:	d8 f7       	brcc	.-10     	; 0x944 <strnlen+0x2>
 94e:	80 95       	com	r24
 950:	90 95       	com	r25
 952:	8e 0f       	add	r24, r30
 954:	9f 1f       	adc	r25, r31
 956:	08 95       	ret

00000958 <fputc>:
 958:	0f 93       	push	r16
 95a:	1f 93       	push	r17
 95c:	cf 93       	push	r28
 95e:	df 93       	push	r29
 960:	fb 01       	movw	r30, r22
 962:	23 81       	ldd	r18, Z+3	; 0x03
 964:	21 fd       	sbrc	r18, 1
 966:	03 c0       	rjmp	.+6      	; 0x96e <fputc+0x16>
 968:	8f ef       	ldi	r24, 0xFF	; 255
 96a:	9f ef       	ldi	r25, 0xFF	; 255
 96c:	2c c0       	rjmp	.+88     	; 0x9c6 <fputc+0x6e>
 96e:	22 ff       	sbrs	r18, 2
 970:	16 c0       	rjmp	.+44     	; 0x99e <fputc+0x46>
 972:	46 81       	ldd	r20, Z+6	; 0x06
 974:	57 81       	ldd	r21, Z+7	; 0x07
 976:	24 81       	ldd	r18, Z+4	; 0x04
 978:	35 81       	ldd	r19, Z+5	; 0x05
 97a:	42 17       	cp	r20, r18
 97c:	53 07       	cpc	r21, r19
 97e:	44 f4       	brge	.+16     	; 0x990 <fputc+0x38>
 980:	a0 81       	ld	r26, Z
 982:	b1 81       	ldd	r27, Z+1	; 0x01
 984:	9d 01       	movw	r18, r26
 986:	2f 5f       	subi	r18, 0xFF	; 255
 988:	3f 4f       	sbci	r19, 0xFF	; 255
 98a:	31 83       	std	Z+1, r19	; 0x01
 98c:	20 83       	st	Z, r18
 98e:	8c 93       	st	X, r24
 990:	26 81       	ldd	r18, Z+6	; 0x06
 992:	37 81       	ldd	r19, Z+7	; 0x07
 994:	2f 5f       	subi	r18, 0xFF	; 255
 996:	3f 4f       	sbci	r19, 0xFF	; 255
 998:	37 83       	std	Z+7, r19	; 0x07
 99a:	26 83       	std	Z+6, r18	; 0x06
 99c:	14 c0       	rjmp	.+40     	; 0x9c6 <fputc+0x6e>
 99e:	8b 01       	movw	r16, r22
 9a0:	ec 01       	movw	r28, r24
 9a2:	fb 01       	movw	r30, r22
 9a4:	00 84       	ldd	r0, Z+8	; 0x08
 9a6:	f1 85       	ldd	r31, Z+9	; 0x09
 9a8:	e0 2d       	mov	r30, r0
 9aa:	09 95       	icall
 9ac:	89 2b       	or	r24, r25
 9ae:	e1 f6       	brne	.-72     	; 0x968 <fputc+0x10>
 9b0:	d8 01       	movw	r26, r16
 9b2:	16 96       	adiw	r26, 0x06	; 6
 9b4:	8d 91       	ld	r24, X+
 9b6:	9c 91       	ld	r25, X
 9b8:	17 97       	sbiw	r26, 0x07	; 7
 9ba:	01 96       	adiw	r24, 0x01	; 1
 9bc:	17 96       	adiw	r26, 0x07	; 7
 9be:	9c 93       	st	X, r25
 9c0:	8e 93       	st	-X, r24
 9c2:	16 97       	sbiw	r26, 0x06	; 6
 9c4:	ce 01       	movw	r24, r28
 9c6:	df 91       	pop	r29
 9c8:	cf 91       	pop	r28
 9ca:	1f 91       	pop	r17
 9cc:	0f 91       	pop	r16
 9ce:	08 95       	ret

000009d0 <__ultoa_invert>:
 9d0:	fa 01       	movw	r30, r20
 9d2:	aa 27       	eor	r26, r26
 9d4:	28 30       	cpi	r18, 0x08	; 8
 9d6:	51 f1       	breq	.+84     	; 0xa2c <__ultoa_invert+0x5c>
 9d8:	20 31       	cpi	r18, 0x10	; 16
 9da:	81 f1       	breq	.+96     	; 0xa3c <__ultoa_invert+0x6c>
 9dc:	e8 94       	clt
 9de:	6f 93       	push	r22
 9e0:	6e 7f       	andi	r22, 0xFE	; 254
 9e2:	6e 5f       	subi	r22, 0xFE	; 254
 9e4:	7f 4f       	sbci	r23, 0xFF	; 255
 9e6:	8f 4f       	sbci	r24, 0xFF	; 255
 9e8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ea:	af 4f       	sbci	r26, 0xFF	; 255
 9ec:	b1 e0       	ldi	r27, 0x01	; 1
 9ee:	3e d0       	rcall	.+124    	; 0xa6c <__ultoa_invert+0x9c>
 9f0:	b4 e0       	ldi	r27, 0x04	; 4
 9f2:	3c d0       	rcall	.+120    	; 0xa6c <__ultoa_invert+0x9c>
 9f4:	67 0f       	add	r22, r23
 9f6:	78 1f       	adc	r23, r24
 9f8:	89 1f       	adc	r24, r25
 9fa:	9a 1f       	adc	r25, r26
 9fc:	a1 1d       	adc	r26, r1
 9fe:	68 0f       	add	r22, r24
 a00:	79 1f       	adc	r23, r25
 a02:	8a 1f       	adc	r24, r26
 a04:	91 1d       	adc	r25, r1
 a06:	a1 1d       	adc	r26, r1
 a08:	6a 0f       	add	r22, r26
 a0a:	71 1d       	adc	r23, r1
 a0c:	81 1d       	adc	r24, r1
 a0e:	91 1d       	adc	r25, r1
 a10:	a1 1d       	adc	r26, r1
 a12:	20 d0       	rcall	.+64     	; 0xa54 <__ultoa_invert+0x84>
 a14:	09 f4       	brne	.+2      	; 0xa18 <__ultoa_invert+0x48>
 a16:	68 94       	set
 a18:	3f 91       	pop	r19
 a1a:	2a e0       	ldi	r18, 0x0A	; 10
 a1c:	26 9f       	mul	r18, r22
 a1e:	11 24       	eor	r1, r1
 a20:	30 19       	sub	r19, r0
 a22:	30 5d       	subi	r19, 0xD0	; 208
 a24:	31 93       	st	Z+, r19
 a26:	de f6       	brtc	.-74     	; 0x9de <__ultoa_invert+0xe>
 a28:	cf 01       	movw	r24, r30
 a2a:	08 95       	ret
 a2c:	46 2f       	mov	r20, r22
 a2e:	47 70       	andi	r20, 0x07	; 7
 a30:	40 5d       	subi	r20, 0xD0	; 208
 a32:	41 93       	st	Z+, r20
 a34:	b3 e0       	ldi	r27, 0x03	; 3
 a36:	0f d0       	rcall	.+30     	; 0xa56 <__ultoa_invert+0x86>
 a38:	c9 f7       	brne	.-14     	; 0xa2c <__ultoa_invert+0x5c>
 a3a:	f6 cf       	rjmp	.-20     	; 0xa28 <__ultoa_invert+0x58>
 a3c:	46 2f       	mov	r20, r22
 a3e:	4f 70       	andi	r20, 0x0F	; 15
 a40:	40 5d       	subi	r20, 0xD0	; 208
 a42:	4a 33       	cpi	r20, 0x3A	; 58
 a44:	18 f0       	brcs	.+6      	; 0xa4c <__ultoa_invert+0x7c>
 a46:	49 5d       	subi	r20, 0xD9	; 217
 a48:	31 fd       	sbrc	r19, 1
 a4a:	40 52       	subi	r20, 0x20	; 32
 a4c:	41 93       	st	Z+, r20
 a4e:	02 d0       	rcall	.+4      	; 0xa54 <__ultoa_invert+0x84>
 a50:	a9 f7       	brne	.-22     	; 0xa3c <__ultoa_invert+0x6c>
 a52:	ea cf       	rjmp	.-44     	; 0xa28 <__ultoa_invert+0x58>
 a54:	b4 e0       	ldi	r27, 0x04	; 4
 a56:	a6 95       	lsr	r26
 a58:	97 95       	ror	r25
 a5a:	87 95       	ror	r24
 a5c:	77 95       	ror	r23
 a5e:	67 95       	ror	r22
 a60:	ba 95       	dec	r27
 a62:	c9 f7       	brne	.-14     	; 0xa56 <__ultoa_invert+0x86>
 a64:	00 97       	sbiw	r24, 0x00	; 0
 a66:	61 05       	cpc	r22, r1
 a68:	71 05       	cpc	r23, r1
 a6a:	08 95       	ret
 a6c:	9b 01       	movw	r18, r22
 a6e:	ac 01       	movw	r20, r24
 a70:	0a 2e       	mov	r0, r26
 a72:	06 94       	lsr	r0
 a74:	57 95       	ror	r21
 a76:	47 95       	ror	r20
 a78:	37 95       	ror	r19
 a7a:	27 95       	ror	r18
 a7c:	ba 95       	dec	r27
 a7e:	c9 f7       	brne	.-14     	; 0xa72 <__ultoa_invert+0xa2>
 a80:	62 0f       	add	r22, r18
 a82:	73 1f       	adc	r23, r19
 a84:	84 1f       	adc	r24, r20
 a86:	95 1f       	adc	r25, r21
 a88:	a0 1d       	adc	r26, r0
 a8a:	08 95       	ret

00000a8c <__prologue_saves__>:
 a8c:	2f 92       	push	r2
 a8e:	3f 92       	push	r3
 a90:	4f 92       	push	r4
 a92:	5f 92       	push	r5
 a94:	6f 92       	push	r6
 a96:	7f 92       	push	r7
 a98:	8f 92       	push	r8
 a9a:	9f 92       	push	r9
 a9c:	af 92       	push	r10
 a9e:	bf 92       	push	r11
 aa0:	cf 92       	push	r12
 aa2:	df 92       	push	r13
 aa4:	ef 92       	push	r14
 aa6:	ff 92       	push	r15
 aa8:	0f 93       	push	r16
 aaa:	1f 93       	push	r17
 aac:	cf 93       	push	r28
 aae:	df 93       	push	r29
 ab0:	cd b7       	in	r28, 0x3d	; 61
 ab2:	de b7       	in	r29, 0x3e	; 62
 ab4:	ca 1b       	sub	r28, r26
 ab6:	db 0b       	sbc	r29, r27
 ab8:	0f b6       	in	r0, 0x3f	; 63
 aba:	f8 94       	cli
 abc:	de bf       	out	0x3e, r29	; 62
 abe:	0f be       	out	0x3f, r0	; 63
 ac0:	cd bf       	out	0x3d, r28	; 61
 ac2:	09 94       	ijmp

00000ac4 <__epilogue_restores__>:
 ac4:	2a 88       	ldd	r2, Y+18	; 0x12
 ac6:	39 88       	ldd	r3, Y+17	; 0x11
 ac8:	48 88       	ldd	r4, Y+16	; 0x10
 aca:	5f 84       	ldd	r5, Y+15	; 0x0f
 acc:	6e 84       	ldd	r6, Y+14	; 0x0e
 ace:	7d 84       	ldd	r7, Y+13	; 0x0d
 ad0:	8c 84       	ldd	r8, Y+12	; 0x0c
 ad2:	9b 84       	ldd	r9, Y+11	; 0x0b
 ad4:	aa 84       	ldd	r10, Y+10	; 0x0a
 ad6:	b9 84       	ldd	r11, Y+9	; 0x09
 ad8:	c8 84       	ldd	r12, Y+8	; 0x08
 ada:	df 80       	ldd	r13, Y+7	; 0x07
 adc:	ee 80       	ldd	r14, Y+6	; 0x06
 ade:	fd 80       	ldd	r15, Y+5	; 0x05
 ae0:	0c 81       	ldd	r16, Y+4	; 0x04
 ae2:	1b 81       	ldd	r17, Y+3	; 0x03
 ae4:	aa 81       	ldd	r26, Y+2	; 0x02
 ae6:	b9 81       	ldd	r27, Y+1	; 0x01
 ae8:	ce 0f       	add	r28, r30
 aea:	d1 1d       	adc	r29, r1
 aec:	0f b6       	in	r0, 0x3f	; 63
 aee:	f8 94       	cli
 af0:	de bf       	out	0x3e, r29	; 62
 af2:	0f be       	out	0x3f, r0	; 63
 af4:	cd bf       	out	0x3d, r28	; 61
 af6:	ed 01       	movw	r28, r26
 af8:	08 95       	ret

00000afa <_exit>:
 afa:	f8 94       	cli

00000afc <__stop_program>:
 afc:	ff cf       	rjmp	.-2      	; 0xafc <__stop_program>
