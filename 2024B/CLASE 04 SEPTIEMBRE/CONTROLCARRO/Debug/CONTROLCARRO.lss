
CONTROLCARRO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a8f  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000956  00000000  00000000  00000cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037e  00000000  00000000  00001649  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000019c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004eb  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00001f27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 82 00 	call	0x104	; 0x104 <main>
  c4:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <Motor_Forward>:
void Motor_Turn_Left(){
	MOTOR_PORT &= ~( (1<<IN1)|(1<<IN2)|(1<<IN3)|(1<<IN4) );
	MOTOR_PORT |=  ( (1<<IN3) );
}
void Motor_Stop(){
	MOTOR_PORT &= ~( (1<<IN1)|(1<<IN2)|(1<<IN3)|(1<<IN4) );
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	80 7f       	andi	r24, 0xF0	; 240
  d0:	8b b9       	out	0x0b, r24	; 11
  d2:	8b b1       	in	r24, 0x0b	; 11
  d4:	86 60       	ori	r24, 0x06	; 6
  d6:	8b b9       	out	0x0b, r24	; 11
  d8:	08 95       	ret

000000da <Motor_Backward>:
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	80 7f       	andi	r24, 0xF0	; 240
  de:	8b b9       	out	0x0b, r24	; 11
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	89 60       	ori	r24, 0x09	; 9
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	08 95       	ret

000000e8 <Motor_Turn_Right>:
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	80 7f       	andi	r24, 0xF0	; 240
  ec:	8b b9       	out	0x0b, r24	; 11
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	8b b9       	out	0x0b, r24	; 11
  f4:	08 95       	ret

000000f6 <Motor_Turn_Left>:
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	80 7f       	andi	r24, 0xF0	; 240
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	84 60       	ori	r24, 0x04	; 4
 100:	8b b9       	out	0x0b, r24	; 11
 102:	08 95       	ret

00000104 <main>:
}

int main(void)
{
	BTN_DDR   &= ~( (1<<BTN_L)|(1<<BTN_D)|(1<<BTN_R)|(1<<BTN_U) );
 104:	84 b1       	in	r24, 0x04	; 4
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	84 b9       	out	0x04, r24	; 4
    MOTOR_DDR |= ( (1<<IN1)|(1<<IN2)|(1<<IN3)|(1<<IN4) );
 10a:	8a b1       	in	r24, 0x0a	; 10
 10c:	8f 60       	ori	r24, 0x0F	; 15
 10e:	8a b9       	out	0x0a, r24	; 10
	MOTOR_PORT &= ~( (1<<IN1)|(1<<IN2)|(1<<IN3)|(1<<IN4) );
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 7f       	andi	r24, 0xF0	; 240
 114:	8b b9       	out	0x0b, r24	; 11
	Motor_Turn_Left();
 116:	0e 94 7b 00 	call	0xf6	; 0xf6 <Motor_Turn_Left>
    while (1) 
    {
		if( getBTN_Up() == 1 ){
 11a:	1a 9b       	sbis	0x03, 2	; 3
 11c:	03 c0       	rjmp	.+6      	; 0x124 <main+0x20>
			Motor_Forward();
 11e:	0e 94 66 00 	call	0xcc	; 0xcc <Motor_Forward>
 122:	0d c0       	rjmp	.+26     	; 0x13e <main+0x3a>
		}
		else if(getBTN_Down() == 1){
 124:	1b 9b       	sbis	0x03, 3	; 3
 126:	03 c0       	rjmp	.+6      	; 0x12e <main+0x2a>
			Motor_Backward();
 128:	0e 94 6d 00 	call	0xda	; 0xda <Motor_Backward>
 12c:	08 c0       	rjmp	.+16     	; 0x13e <main+0x3a>
		}
		else if(getBTN_Left()==1){
 12e:	18 9b       	sbis	0x03, 0	; 3
 130:	03 c0       	rjmp	.+6      	; 0x138 <main+0x34>
			Motor_Turn_Left();
 132:	0e 94 7b 00 	call	0xf6	; 0xf6 <Motor_Turn_Left>
 136:	03 c0       	rjmp	.+6      	; 0x13e <main+0x3a>
		}
		else if(getBTN_Right() == 1){
 138:	19 99       	sbic	0x03, 1	; 3
			Motor_Turn_Right();
 13a:	0e 94 74 00 	call	0xe8	; 0xe8 <Motor_Turn_Right>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	2f e7       	ldi	r18, 0x7F	; 127
 140:	88 e3       	ldi	r24, 0x38	; 56
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0x40>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x4a>
 14e:	00 00       	nop
 150:	e4 cf       	rjmp	.-56     	; 0x11a <main+0x16>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
